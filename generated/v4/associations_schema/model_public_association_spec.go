/*
Associations Schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package associations_schema

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicAssociationSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicAssociationSpec{}

// PublicAssociationSpec struct for PublicAssociationSpec
type PublicAssociationSpec struct {
	TypeId int32 `json:"typeId"`
	Category string `json:"category"`
}

type _PublicAssociationSpec PublicAssociationSpec

// NewPublicAssociationSpec instantiates a new PublicAssociationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicAssociationSpec(typeId int32, category string) *PublicAssociationSpec {
	this := PublicAssociationSpec{}
	this.TypeId = typeId
	this.Category = category
	return &this
}

// NewPublicAssociationSpecWithDefaults instantiates a new PublicAssociationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicAssociationSpecWithDefaults() *PublicAssociationSpec {
	this := PublicAssociationSpec{}
	return &this
}

// GetTypeId returns the TypeId field value
func (o *PublicAssociationSpec) GetTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationSpec) GetTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *PublicAssociationSpec) SetTypeId(v int32) {
	o.TypeId = v
}

// GetCategory returns the Category field value
func (o *PublicAssociationSpec) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationSpec) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *PublicAssociationSpec) SetCategory(v string) {
	o.Category = v
}

func (o PublicAssociationSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicAssociationSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["typeId"] = o.TypeId
	toSerialize["category"] = o.Category
	return toSerialize, nil
}

func (o *PublicAssociationSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"typeId",
		"category",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicAssociationSpec := _PublicAssociationSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicAssociationSpec)

	if err != nil {
		return err
	}

	*o = PublicAssociationSpec(varPublicAssociationSpec)

	return err
}

type NullablePublicAssociationSpec struct {
	value *PublicAssociationSpec
	isSet bool
}

func (v NullablePublicAssociationSpec) Get() *PublicAssociationSpec {
	return v.value
}

func (v *NullablePublicAssociationSpec) Set(val *PublicAssociationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicAssociationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicAssociationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicAssociationSpec(val *PublicAssociationSpec) *NullablePublicAssociationSpec {
	return &NullablePublicAssociationSpec{value: val, isSet: true}
}

func (v NullablePublicAssociationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicAssociationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


