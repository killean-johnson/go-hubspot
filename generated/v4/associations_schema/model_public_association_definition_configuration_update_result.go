/*
Associations Schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package associations_schema

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicAssociationDefinitionConfigurationUpdateResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicAssociationDefinitionConfigurationUpdateResult{}

// PublicAssociationDefinitionConfigurationUpdateResult struct for PublicAssociationDefinitionConfigurationUpdateResult
type PublicAssociationDefinitionConfigurationUpdateResult struct {
	UserEnforcedMaxToObjectIds *int32 `json:"userEnforcedMaxToObjectIds,omitempty"`
	TypeId int32 `json:"typeId"`
	Category string `json:"category"`
}

type _PublicAssociationDefinitionConfigurationUpdateResult PublicAssociationDefinitionConfigurationUpdateResult

// NewPublicAssociationDefinitionConfigurationUpdateResult instantiates a new PublicAssociationDefinitionConfigurationUpdateResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicAssociationDefinitionConfigurationUpdateResult(typeId int32, category string) *PublicAssociationDefinitionConfigurationUpdateResult {
	this := PublicAssociationDefinitionConfigurationUpdateResult{}
	this.TypeId = typeId
	this.Category = category
	return &this
}

// NewPublicAssociationDefinitionConfigurationUpdateResultWithDefaults instantiates a new PublicAssociationDefinitionConfigurationUpdateResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicAssociationDefinitionConfigurationUpdateResultWithDefaults() *PublicAssociationDefinitionConfigurationUpdateResult {
	this := PublicAssociationDefinitionConfigurationUpdateResult{}
	return &this
}

// GetUserEnforcedMaxToObjectIds returns the UserEnforcedMaxToObjectIds field value if set, zero value otherwise.
func (o *PublicAssociationDefinitionConfigurationUpdateResult) GetUserEnforcedMaxToObjectIds() int32 {
	if o == nil || IsNil(o.UserEnforcedMaxToObjectIds) {
		var ret int32
		return ret
	}
	return *o.UserEnforcedMaxToObjectIds
}

// GetUserEnforcedMaxToObjectIdsOk returns a tuple with the UserEnforcedMaxToObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicAssociationDefinitionConfigurationUpdateResult) GetUserEnforcedMaxToObjectIdsOk() (*int32, bool) {
	if o == nil || IsNil(o.UserEnforcedMaxToObjectIds) {
		return nil, false
	}
	return o.UserEnforcedMaxToObjectIds, true
}

// HasUserEnforcedMaxToObjectIds returns a boolean if a field has been set.
func (o *PublicAssociationDefinitionConfigurationUpdateResult) HasUserEnforcedMaxToObjectIds() bool {
	if o != nil && !IsNil(o.UserEnforcedMaxToObjectIds) {
		return true
	}

	return false
}

// SetUserEnforcedMaxToObjectIds gets a reference to the given int32 and assigns it to the UserEnforcedMaxToObjectIds field.
func (o *PublicAssociationDefinitionConfigurationUpdateResult) SetUserEnforcedMaxToObjectIds(v int32) {
	o.UserEnforcedMaxToObjectIds = &v
}

// GetTypeId returns the TypeId field value
func (o *PublicAssociationDefinitionConfigurationUpdateResult) GetTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationDefinitionConfigurationUpdateResult) GetTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *PublicAssociationDefinitionConfigurationUpdateResult) SetTypeId(v int32) {
	o.TypeId = v
}

// GetCategory returns the Category field value
func (o *PublicAssociationDefinitionConfigurationUpdateResult) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationDefinitionConfigurationUpdateResult) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *PublicAssociationDefinitionConfigurationUpdateResult) SetCategory(v string) {
	o.Category = v
}

func (o PublicAssociationDefinitionConfigurationUpdateResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicAssociationDefinitionConfigurationUpdateResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserEnforcedMaxToObjectIds) {
		toSerialize["userEnforcedMaxToObjectIds"] = o.UserEnforcedMaxToObjectIds
	}
	toSerialize["typeId"] = o.TypeId
	toSerialize["category"] = o.Category
	return toSerialize, nil
}

func (o *PublicAssociationDefinitionConfigurationUpdateResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"typeId",
		"category",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicAssociationDefinitionConfigurationUpdateResult := _PublicAssociationDefinitionConfigurationUpdateResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicAssociationDefinitionConfigurationUpdateResult)

	if err != nil {
		return err
	}

	*o = PublicAssociationDefinitionConfigurationUpdateResult(varPublicAssociationDefinitionConfigurationUpdateResult)

	return err
}

type NullablePublicAssociationDefinitionConfigurationUpdateResult struct {
	value *PublicAssociationDefinitionConfigurationUpdateResult
	isSet bool
}

func (v NullablePublicAssociationDefinitionConfigurationUpdateResult) Get() *PublicAssociationDefinitionConfigurationUpdateResult {
	return v.value
}

func (v *NullablePublicAssociationDefinitionConfigurationUpdateResult) Set(val *PublicAssociationDefinitionConfigurationUpdateResult) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicAssociationDefinitionConfigurationUpdateResult) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicAssociationDefinitionConfigurationUpdateResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicAssociationDefinitionConfigurationUpdateResult(val *PublicAssociationDefinitionConfigurationUpdateResult) *NullablePublicAssociationDefinitionConfigurationUpdateResult {
	return &NullablePublicAssociationDefinitionConfigurationUpdateResult{value: val, isSet: true}
}

func (v NullablePublicAssociationDefinitionConfigurationUpdateResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicAssociationDefinitionConfigurationUpdateResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


