/*
Associations Schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package associations_schema

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
)


// DefinitionConfigurationsAPIService DefinitionConfigurationsAPI service
type DefinitionConfigurationsAPIService service

type ApiGetCrmV4AssociationsDefinitionsConfigurationsAllGetAllRequest struct {
	ctx context.Context
	ApiService *DefinitionConfigurationsAPIService
}

func (r ApiGetCrmV4AssociationsDefinitionsConfigurationsAllGetAllRequest) Execute() (*CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging, *http.Response, error) {
	return r.ApiService.GetCrmV4AssociationsDefinitionsConfigurationsAllGetAllExecute(r)
}

/*
GetCrmV4AssociationsDefinitionsConfigurationsAllGetAll Read All

Returns all user configurations available on a given portal

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCrmV4AssociationsDefinitionsConfigurationsAllGetAllRequest
*/
func (a *DefinitionConfigurationsAPIService) GetCrmV4AssociationsDefinitionsConfigurationsAllGetAll(ctx context.Context) ApiGetCrmV4AssociationsDefinitionsConfigurationsAllGetAllRequest {
	return ApiGetCrmV4AssociationsDefinitionsConfigurationsAllGetAllRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging
func (a *DefinitionConfigurationsAPIService) GetCrmV4AssociationsDefinitionsConfigurationsAllGetAllExecute(r ApiGetCrmV4AssociationsDefinitionsConfigurationsAllGetAllRequest) (*CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefinitionConfigurationsAPIService.GetCrmV4AssociationsDefinitionsConfigurationsAllGetAll")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/associations/definitions/configurations/all"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeGetAllBetweenTwoObjectTypesRequest struct {
	ctx context.Context
	ApiService *DefinitionConfigurationsAPIService
	fromObjectType string
	toObjectType string
}

func (r ApiGetCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeGetAllBetweenTwoObjectTypesRequest) Execute() (*CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging, *http.Response, error) {
	return r.ApiService.GetCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeGetAllBetweenTwoObjectTypesExecute(r)
}

/*
GetCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeGetAllBetweenTwoObjectTypes Read

Returns user configurations on all association definitions between two object types

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fromObjectType
 @param toObjectType
 @return ApiGetCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeGetAllBetweenTwoObjectTypesRequest
*/
func (a *DefinitionConfigurationsAPIService) GetCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeGetAllBetweenTwoObjectTypes(ctx context.Context, fromObjectType string, toObjectType string) ApiGetCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeGetAllBetweenTwoObjectTypesRequest {
	return ApiGetCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeGetAllBetweenTwoObjectTypesRequest{
		ApiService: a,
		ctx: ctx,
		fromObjectType: fromObjectType,
		toObjectType: toObjectType,
	}
}

// Execute executes the request
//  @return CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging
func (a *DefinitionConfigurationsAPIService) GetCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeGetAllBetweenTwoObjectTypesExecute(r ApiGetCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeGetAllBetweenTwoObjectTypesRequest) (*CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefinitionConfigurationsAPIService.GetCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeGetAllBetweenTwoObjectTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/associations/definitions/configurations/{fromObjectType}/{toObjectType}"
	localVarPath = strings.Replace(localVarPath, "{"+"fromObjectType"+"}", url.PathEscape(parameterValueToString(r.fromObjectType, "fromObjectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterValueToString(r.toObjectType, "toObjectType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreateRequest struct {
	ctx context.Context
	ApiService *DefinitionConfigurationsAPIService
	fromObjectType string
	toObjectType string
	batchInputPublicAssociationDefinitionConfigurationCreateRequest *BatchInputPublicAssociationDefinitionConfigurationCreateRequest
}

func (r ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreateRequest) BatchInputPublicAssociationDefinitionConfigurationCreateRequest(batchInputPublicAssociationDefinitionConfigurationCreateRequest BatchInputPublicAssociationDefinitionConfigurationCreateRequest) ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreateRequest {
	r.batchInputPublicAssociationDefinitionConfigurationCreateRequest = &batchInputPublicAssociationDefinitionConfigurationCreateRequest
	return r
}

func (r ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreateRequest) Execute() (*BatchResponsePublicAssociationDefinitionUserConfiguration, *http.Response, error) {
	return r.ApiService.PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreateExecute(r)
}

/*
PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreate Create

Batch create user configurations between two object types

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fromObjectType
 @param toObjectType
 @return ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreateRequest
*/
func (a *DefinitionConfigurationsAPIService) PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreate(ctx context.Context, fromObjectType string, toObjectType string) ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreateRequest {
	return ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreateRequest{
		ApiService: a,
		ctx: ctx,
		fromObjectType: fromObjectType,
		toObjectType: toObjectType,
	}
}

// Execute executes the request
//  @return BatchResponsePublicAssociationDefinitionUserConfiguration
func (a *DefinitionConfigurationsAPIService) PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreateExecute(r ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreateRequest) (*BatchResponsePublicAssociationDefinitionUserConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponsePublicAssociationDefinitionUserConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefinitionConfigurationsAPIService.PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchCreateBatchCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/associations/definitions/configurations/{fromObjectType}/{toObjectType}/batch/create"
	localVarPath = strings.Replace(localVarPath, "{"+"fromObjectType"+"}", url.PathEscape(parameterValueToString(r.fromObjectType, "fromObjectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterValueToString(r.toObjectType, "toObjectType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputPublicAssociationDefinitionConfigurationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("batchInputPublicAssociationDefinitionConfigurationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputPublicAssociationDefinitionConfigurationCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemoveRequest struct {
	ctx context.Context
	ApiService *DefinitionConfigurationsAPIService
	fromObjectType string
	toObjectType string
	batchInputPublicAssociationSpec *BatchInputPublicAssociationSpec
}

func (r ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemoveRequest) BatchInputPublicAssociationSpec(batchInputPublicAssociationSpec BatchInputPublicAssociationSpec) ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemoveRequest {
	r.batchInputPublicAssociationSpec = &batchInputPublicAssociationSpec
	return r
}

func (r ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemoveRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemoveExecute(r)
}

/*
PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemove Delete

Batch delete user configurations between two object types

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fromObjectType
 @param toObjectType
 @return ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemoveRequest
*/
func (a *DefinitionConfigurationsAPIService) PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemove(ctx context.Context, fromObjectType string, toObjectType string) ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemoveRequest {
	return ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemoveRequest{
		ApiService: a,
		ctx: ctx,
		fromObjectType: fromObjectType,
		toObjectType: toObjectType,
	}
}

// Execute executes the request
func (a *DefinitionConfigurationsAPIService) PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemoveExecute(r ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemoveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefinitionConfigurationsAPIService.PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchPurgeBatchRemove")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/associations/definitions/configurations/{fromObjectType}/{toObjectType}/batch/purge"
	localVarPath = strings.Replace(localVarPath, "{"+"fromObjectType"+"}", url.PathEscape(parameterValueToString(r.fromObjectType, "fromObjectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterValueToString(r.toObjectType, "toObjectType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputPublicAssociationSpec == nil {
		return nil, reportError("batchInputPublicAssociationSpec is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputPublicAssociationSpec
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdateRequest struct {
	ctx context.Context
	ApiService *DefinitionConfigurationsAPIService
	fromObjectType string
	toObjectType string
	batchInputPublicAssociationDefinitionConfigurationUpdateRequest *BatchInputPublicAssociationDefinitionConfigurationUpdateRequest
}

func (r ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdateRequest) BatchInputPublicAssociationDefinitionConfigurationUpdateRequest(batchInputPublicAssociationDefinitionConfigurationUpdateRequest BatchInputPublicAssociationDefinitionConfigurationUpdateRequest) ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdateRequest {
	r.batchInputPublicAssociationDefinitionConfigurationUpdateRequest = &batchInputPublicAssociationDefinitionConfigurationUpdateRequest
	return r
}

func (r ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdateRequest) Execute() (*BatchResponsePublicAssociationDefinitionConfigurationUpdateResult, *http.Response, error) {
	return r.ApiService.PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdateExecute(r)
}

/*
PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdate Update

Batch update user configurations between two object types

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fromObjectType
 @param toObjectType
 @return ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdateRequest
*/
func (a *DefinitionConfigurationsAPIService) PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdate(ctx context.Context, fromObjectType string, toObjectType string) ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdateRequest {
	return ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdateRequest{
		ApiService: a,
		ctx: ctx,
		fromObjectType: fromObjectType,
		toObjectType: toObjectType,
	}
}

// Execute executes the request
//  @return BatchResponsePublicAssociationDefinitionConfigurationUpdateResult
func (a *DefinitionConfigurationsAPIService) PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdateExecute(r ApiPostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdateRequest) (*BatchResponsePublicAssociationDefinitionConfigurationUpdateResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponsePublicAssociationDefinitionConfigurationUpdateResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefinitionConfigurationsAPIService.PostCrmV4AssociationsDefinitionsConfigurationsFromObjectTypeToObjectTypeBatchUpdateBatchUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/associations/definitions/configurations/{fromObjectType}/{toObjectType}/batch/update"
	localVarPath = strings.Replace(localVarPath, "{"+"fromObjectType"+"}", url.PathEscape(parameterValueToString(r.fromObjectType, "fromObjectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterValueToString(r.toObjectType, "toObjectType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputPublicAssociationDefinitionConfigurationUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("batchInputPublicAssociationDefinitionConfigurationUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputPublicAssociationDefinitionConfigurationUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
