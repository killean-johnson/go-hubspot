/*
Associations Schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package associations_schema

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicAssociationDefinitionUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicAssociationDefinitionUpdateRequest{}

// PublicAssociationDefinitionUpdateRequest struct for PublicAssociationDefinitionUpdateRequest
type PublicAssociationDefinitionUpdateRequest struct {
	InverseLabel *string `json:"inverseLabel,omitempty"`
	AssociationTypeId int32 `json:"associationTypeId"`
	Label string `json:"label"`
}

type _PublicAssociationDefinitionUpdateRequest PublicAssociationDefinitionUpdateRequest

// NewPublicAssociationDefinitionUpdateRequest instantiates a new PublicAssociationDefinitionUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicAssociationDefinitionUpdateRequest(associationTypeId int32, label string) *PublicAssociationDefinitionUpdateRequest {
	this := PublicAssociationDefinitionUpdateRequest{}
	this.AssociationTypeId = associationTypeId
	this.Label = label
	return &this
}

// NewPublicAssociationDefinitionUpdateRequestWithDefaults instantiates a new PublicAssociationDefinitionUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicAssociationDefinitionUpdateRequestWithDefaults() *PublicAssociationDefinitionUpdateRequest {
	this := PublicAssociationDefinitionUpdateRequest{}
	return &this
}

// GetInverseLabel returns the InverseLabel field value if set, zero value otherwise.
func (o *PublicAssociationDefinitionUpdateRequest) GetInverseLabel() string {
	if o == nil || IsNil(o.InverseLabel) {
		var ret string
		return ret
	}
	return *o.InverseLabel
}

// GetInverseLabelOk returns a tuple with the InverseLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicAssociationDefinitionUpdateRequest) GetInverseLabelOk() (*string, bool) {
	if o == nil || IsNil(o.InverseLabel) {
		return nil, false
	}
	return o.InverseLabel, true
}

// HasInverseLabel returns a boolean if a field has been set.
func (o *PublicAssociationDefinitionUpdateRequest) HasInverseLabel() bool {
	if o != nil && !IsNil(o.InverseLabel) {
		return true
	}

	return false
}

// SetInverseLabel gets a reference to the given string and assigns it to the InverseLabel field.
func (o *PublicAssociationDefinitionUpdateRequest) SetInverseLabel(v string) {
	o.InverseLabel = &v
}

// GetAssociationTypeId returns the AssociationTypeId field value
func (o *PublicAssociationDefinitionUpdateRequest) GetAssociationTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AssociationTypeId
}

// GetAssociationTypeIdOk returns a tuple with the AssociationTypeId field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationDefinitionUpdateRequest) GetAssociationTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssociationTypeId, true
}

// SetAssociationTypeId sets field value
func (o *PublicAssociationDefinitionUpdateRequest) SetAssociationTypeId(v int32) {
	o.AssociationTypeId = v
}

// GetLabel returns the Label field value
func (o *PublicAssociationDefinitionUpdateRequest) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationDefinitionUpdateRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *PublicAssociationDefinitionUpdateRequest) SetLabel(v string) {
	o.Label = v
}

func (o PublicAssociationDefinitionUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicAssociationDefinitionUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InverseLabel) {
		toSerialize["inverseLabel"] = o.InverseLabel
	}
	toSerialize["associationTypeId"] = o.AssociationTypeId
	toSerialize["label"] = o.Label
	return toSerialize, nil
}

func (o *PublicAssociationDefinitionUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"associationTypeId",
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicAssociationDefinitionUpdateRequest := _PublicAssociationDefinitionUpdateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicAssociationDefinitionUpdateRequest)

	if err != nil {
		return err
	}

	*o = PublicAssociationDefinitionUpdateRequest(varPublicAssociationDefinitionUpdateRequest)

	return err
}

type NullablePublicAssociationDefinitionUpdateRequest struct {
	value *PublicAssociationDefinitionUpdateRequest
	isSet bool
}

func (v NullablePublicAssociationDefinitionUpdateRequest) Get() *PublicAssociationDefinitionUpdateRequest {
	return v.value
}

func (v *NullablePublicAssociationDefinitionUpdateRequest) Set(val *PublicAssociationDefinitionUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicAssociationDefinitionUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicAssociationDefinitionUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicAssociationDefinitionUpdateRequest(val *PublicAssociationDefinitionUpdateRequest) *NullablePublicAssociationDefinitionUpdateRequest {
	return &NullablePublicAssociationDefinitionUpdateRequest{value: val, isSet: true}
}

func (v NullablePublicAssociationDefinitionUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicAssociationDefinitionUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


