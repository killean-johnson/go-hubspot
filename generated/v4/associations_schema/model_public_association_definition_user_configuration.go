/*
Associations Schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package associations_schema

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicAssociationDefinitionUserConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicAssociationDefinitionUserConfiguration{}

// PublicAssociationDefinitionUserConfiguration struct for PublicAssociationDefinitionUserConfiguration
type PublicAssociationDefinitionUserConfiguration struct {
	UserEnforcedMaxToObjectIds *int32 `json:"userEnforcedMaxToObjectIds,omitempty"`
	TypeId int32 `json:"typeId"`
	Label *string `json:"label,omitempty"`
	Category string `json:"category"`
}

type _PublicAssociationDefinitionUserConfiguration PublicAssociationDefinitionUserConfiguration

// NewPublicAssociationDefinitionUserConfiguration instantiates a new PublicAssociationDefinitionUserConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicAssociationDefinitionUserConfiguration(typeId int32, category string) *PublicAssociationDefinitionUserConfiguration {
	this := PublicAssociationDefinitionUserConfiguration{}
	this.TypeId = typeId
	this.Category = category
	return &this
}

// NewPublicAssociationDefinitionUserConfigurationWithDefaults instantiates a new PublicAssociationDefinitionUserConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicAssociationDefinitionUserConfigurationWithDefaults() *PublicAssociationDefinitionUserConfiguration {
	this := PublicAssociationDefinitionUserConfiguration{}
	return &this
}

// GetUserEnforcedMaxToObjectIds returns the UserEnforcedMaxToObjectIds field value if set, zero value otherwise.
func (o *PublicAssociationDefinitionUserConfiguration) GetUserEnforcedMaxToObjectIds() int32 {
	if o == nil || IsNil(o.UserEnforcedMaxToObjectIds) {
		var ret int32
		return ret
	}
	return *o.UserEnforcedMaxToObjectIds
}

// GetUserEnforcedMaxToObjectIdsOk returns a tuple with the UserEnforcedMaxToObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicAssociationDefinitionUserConfiguration) GetUserEnforcedMaxToObjectIdsOk() (*int32, bool) {
	if o == nil || IsNil(o.UserEnforcedMaxToObjectIds) {
		return nil, false
	}
	return o.UserEnforcedMaxToObjectIds, true
}

// HasUserEnforcedMaxToObjectIds returns a boolean if a field has been set.
func (o *PublicAssociationDefinitionUserConfiguration) HasUserEnforcedMaxToObjectIds() bool {
	if o != nil && !IsNil(o.UserEnforcedMaxToObjectIds) {
		return true
	}

	return false
}

// SetUserEnforcedMaxToObjectIds gets a reference to the given int32 and assigns it to the UserEnforcedMaxToObjectIds field.
func (o *PublicAssociationDefinitionUserConfiguration) SetUserEnforcedMaxToObjectIds(v int32) {
	o.UserEnforcedMaxToObjectIds = &v
}

// GetTypeId returns the TypeId field value
func (o *PublicAssociationDefinitionUserConfiguration) GetTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationDefinitionUserConfiguration) GetTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *PublicAssociationDefinitionUserConfiguration) SetTypeId(v int32) {
	o.TypeId = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *PublicAssociationDefinitionUserConfiguration) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicAssociationDefinitionUserConfiguration) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *PublicAssociationDefinitionUserConfiguration) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *PublicAssociationDefinitionUserConfiguration) SetLabel(v string) {
	o.Label = &v
}

// GetCategory returns the Category field value
func (o *PublicAssociationDefinitionUserConfiguration) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationDefinitionUserConfiguration) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *PublicAssociationDefinitionUserConfiguration) SetCategory(v string) {
	o.Category = v
}

func (o PublicAssociationDefinitionUserConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicAssociationDefinitionUserConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserEnforcedMaxToObjectIds) {
		toSerialize["userEnforcedMaxToObjectIds"] = o.UserEnforcedMaxToObjectIds
	}
	toSerialize["typeId"] = o.TypeId
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["category"] = o.Category
	return toSerialize, nil
}

func (o *PublicAssociationDefinitionUserConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"typeId",
		"category",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicAssociationDefinitionUserConfiguration := _PublicAssociationDefinitionUserConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicAssociationDefinitionUserConfiguration)

	if err != nil {
		return err
	}

	*o = PublicAssociationDefinitionUserConfiguration(varPublicAssociationDefinitionUserConfiguration)

	return err
}

type NullablePublicAssociationDefinitionUserConfiguration struct {
	value *PublicAssociationDefinitionUserConfiguration
	isSet bool
}

func (v NullablePublicAssociationDefinitionUserConfiguration) Get() *PublicAssociationDefinitionUserConfiguration {
	return v.value
}

func (v *NullablePublicAssociationDefinitionUserConfiguration) Set(val *PublicAssociationDefinitionUserConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicAssociationDefinitionUserConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicAssociationDefinitionUserConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicAssociationDefinitionUserConfiguration(val *PublicAssociationDefinitionUserConfiguration) *NullablePublicAssociationDefinitionUserConfiguration {
	return &NullablePublicAssociationDefinitionUserConfiguration{value: val, isSet: true}
}

func (v NullablePublicAssociationDefinitionUserConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicAssociationDefinitionUserConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


