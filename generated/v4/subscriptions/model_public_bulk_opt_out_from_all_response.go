/*
Communication Preferences Subscriptions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package subscriptions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicBulkOptOutFromAllResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicBulkOptOutFromAllResponse{}

// PublicBulkOptOutFromAllResponse struct for PublicBulkOptOutFromAllResponse
type PublicBulkOptOutFromAllResponse struct {
	SubscriberIdString string `json:"subscriberIdString"`
	Statuses []PublicStatus `json:"statuses,omitempty"`
}

type _PublicBulkOptOutFromAllResponse PublicBulkOptOutFromAllResponse

// NewPublicBulkOptOutFromAllResponse instantiates a new PublicBulkOptOutFromAllResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicBulkOptOutFromAllResponse(subscriberIdString string) *PublicBulkOptOutFromAllResponse {
	this := PublicBulkOptOutFromAllResponse{}
	this.SubscriberIdString = subscriberIdString
	return &this
}

// NewPublicBulkOptOutFromAllResponseWithDefaults instantiates a new PublicBulkOptOutFromAllResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicBulkOptOutFromAllResponseWithDefaults() *PublicBulkOptOutFromAllResponse {
	this := PublicBulkOptOutFromAllResponse{}
	return &this
}

// GetSubscriberIdString returns the SubscriberIdString field value
func (o *PublicBulkOptOutFromAllResponse) GetSubscriberIdString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriberIdString
}

// GetSubscriberIdStringOk returns a tuple with the SubscriberIdString field value
// and a boolean to check if the value has been set.
func (o *PublicBulkOptOutFromAllResponse) GetSubscriberIdStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriberIdString, true
}

// SetSubscriberIdString sets field value
func (o *PublicBulkOptOutFromAllResponse) SetSubscriberIdString(v string) {
	o.SubscriberIdString = v
}

// GetStatuses returns the Statuses field value if set, zero value otherwise.
func (o *PublicBulkOptOutFromAllResponse) GetStatuses() []PublicStatus {
	if o == nil || IsNil(o.Statuses) {
		var ret []PublicStatus
		return ret
	}
	return o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicBulkOptOutFromAllResponse) GetStatusesOk() ([]PublicStatus, bool) {
	if o == nil || IsNil(o.Statuses) {
		return nil, false
	}
	return o.Statuses, true
}

// HasStatuses returns a boolean if a field has been set.
func (o *PublicBulkOptOutFromAllResponse) HasStatuses() bool {
	if o != nil && !IsNil(o.Statuses) {
		return true
	}

	return false
}

// SetStatuses gets a reference to the given []PublicStatus and assigns it to the Statuses field.
func (o *PublicBulkOptOutFromAllResponse) SetStatuses(v []PublicStatus) {
	o.Statuses = v
}

func (o PublicBulkOptOutFromAllResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicBulkOptOutFromAllResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriberIdString"] = o.SubscriberIdString
	if !IsNil(o.Statuses) {
		toSerialize["statuses"] = o.Statuses
	}
	return toSerialize, nil
}

func (o *PublicBulkOptOutFromAllResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscriberIdString",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicBulkOptOutFromAllResponse := _PublicBulkOptOutFromAllResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicBulkOptOutFromAllResponse)

	if err != nil {
		return err
	}

	*o = PublicBulkOptOutFromAllResponse(varPublicBulkOptOutFromAllResponse)

	return err
}

type NullablePublicBulkOptOutFromAllResponse struct {
	value *PublicBulkOptOutFromAllResponse
	isSet bool
}

func (v NullablePublicBulkOptOutFromAllResponse) Get() *PublicBulkOptOutFromAllResponse {
	return v.value
}

func (v *NullablePublicBulkOptOutFromAllResponse) Set(val *PublicBulkOptOutFromAllResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicBulkOptOutFromAllResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicBulkOptOutFromAllResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicBulkOptOutFromAllResponse(val *PublicBulkOptOutFromAllResponse) *NullablePublicBulkOptOutFromAllResponse {
	return &NullablePublicBulkOptOutFromAllResponse{value: val, isSet: true}
}

func (v NullablePublicBulkOptOutFromAllResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicBulkOptOutFromAllResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


