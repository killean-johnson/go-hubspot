/*
Communication Preferences Subscriptions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package subscriptions

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublicStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicStatus{}

// PublicStatus struct for PublicStatus
type PublicStatus struct {
	SubscriptionName *string `json:"subscriptionName,omitempty"`
	Channel string `json:"channel"`
	SubscriberIdString string `json:"subscriberIdString"`
	LegalBasis *string `json:"legalBasis,omitempty"`
	SetStatusSuccessReason *string `json:"setStatusSuccessReason,omitempty"`
	Source string `json:"source"`
	SubscriptionId int32 `json:"subscriptionId"`
	LegalBasisExplanation *string `json:"legalBasisExplanation,omitempty"`
	BusinessUnitId *int64 `json:"businessUnitId,omitempty"`
	Status string `json:"status"`
	Timestamp time.Time `json:"timestamp"`
}

type _PublicStatus PublicStatus

// NewPublicStatus instantiates a new PublicStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicStatus(channel string, subscriberIdString string, source string, subscriptionId int32, status string, timestamp time.Time) *PublicStatus {
	this := PublicStatus{}
	this.Channel = channel
	this.SubscriberIdString = subscriberIdString
	this.Source = source
	this.SubscriptionId = subscriptionId
	this.Status = status
	this.Timestamp = timestamp
	return &this
}

// NewPublicStatusWithDefaults instantiates a new PublicStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicStatusWithDefaults() *PublicStatus {
	this := PublicStatus{}
	return &this
}

// GetSubscriptionName returns the SubscriptionName field value if set, zero value otherwise.
func (o *PublicStatus) GetSubscriptionName() string {
	if o == nil || IsNil(o.SubscriptionName) {
		var ret string
		return ret
	}
	return *o.SubscriptionName
}

// GetSubscriptionNameOk returns a tuple with the SubscriptionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicStatus) GetSubscriptionNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionName) {
		return nil, false
	}
	return o.SubscriptionName, true
}

// HasSubscriptionName returns a boolean if a field has been set.
func (o *PublicStatus) HasSubscriptionName() bool {
	if o != nil && !IsNil(o.SubscriptionName) {
		return true
	}

	return false
}

// SetSubscriptionName gets a reference to the given string and assigns it to the SubscriptionName field.
func (o *PublicStatus) SetSubscriptionName(v string) {
	o.SubscriptionName = &v
}

// GetChannel returns the Channel field value
func (o *PublicStatus) GetChannel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *PublicStatus) GetChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *PublicStatus) SetChannel(v string) {
	o.Channel = v
}

// GetSubscriberIdString returns the SubscriberIdString field value
func (o *PublicStatus) GetSubscriberIdString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriberIdString
}

// GetSubscriberIdStringOk returns a tuple with the SubscriberIdString field value
// and a boolean to check if the value has been set.
func (o *PublicStatus) GetSubscriberIdStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriberIdString, true
}

// SetSubscriberIdString sets field value
func (o *PublicStatus) SetSubscriberIdString(v string) {
	o.SubscriberIdString = v
}

// GetLegalBasis returns the LegalBasis field value if set, zero value otherwise.
func (o *PublicStatus) GetLegalBasis() string {
	if o == nil || IsNil(o.LegalBasis) {
		var ret string
		return ret
	}
	return *o.LegalBasis
}

// GetLegalBasisOk returns a tuple with the LegalBasis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicStatus) GetLegalBasisOk() (*string, bool) {
	if o == nil || IsNil(o.LegalBasis) {
		return nil, false
	}
	return o.LegalBasis, true
}

// HasLegalBasis returns a boolean if a field has been set.
func (o *PublicStatus) HasLegalBasis() bool {
	if o != nil && !IsNil(o.LegalBasis) {
		return true
	}

	return false
}

// SetLegalBasis gets a reference to the given string and assigns it to the LegalBasis field.
func (o *PublicStatus) SetLegalBasis(v string) {
	o.LegalBasis = &v
}

// GetSetStatusSuccessReason returns the SetStatusSuccessReason field value if set, zero value otherwise.
func (o *PublicStatus) GetSetStatusSuccessReason() string {
	if o == nil || IsNil(o.SetStatusSuccessReason) {
		var ret string
		return ret
	}
	return *o.SetStatusSuccessReason
}

// GetSetStatusSuccessReasonOk returns a tuple with the SetStatusSuccessReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicStatus) GetSetStatusSuccessReasonOk() (*string, bool) {
	if o == nil || IsNil(o.SetStatusSuccessReason) {
		return nil, false
	}
	return o.SetStatusSuccessReason, true
}

// HasSetStatusSuccessReason returns a boolean if a field has been set.
func (o *PublicStatus) HasSetStatusSuccessReason() bool {
	if o != nil && !IsNil(o.SetStatusSuccessReason) {
		return true
	}

	return false
}

// SetSetStatusSuccessReason gets a reference to the given string and assigns it to the SetStatusSuccessReason field.
func (o *PublicStatus) SetSetStatusSuccessReason(v string) {
	o.SetStatusSuccessReason = &v
}

// GetSource returns the Source field value
func (o *PublicStatus) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *PublicStatus) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *PublicStatus) SetSource(v string) {
	o.Source = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *PublicStatus) GetSubscriptionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *PublicStatus) GetSubscriptionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *PublicStatus) SetSubscriptionId(v int32) {
	o.SubscriptionId = v
}

// GetLegalBasisExplanation returns the LegalBasisExplanation field value if set, zero value otherwise.
func (o *PublicStatus) GetLegalBasisExplanation() string {
	if o == nil || IsNil(o.LegalBasisExplanation) {
		var ret string
		return ret
	}
	return *o.LegalBasisExplanation
}

// GetLegalBasisExplanationOk returns a tuple with the LegalBasisExplanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicStatus) GetLegalBasisExplanationOk() (*string, bool) {
	if o == nil || IsNil(o.LegalBasisExplanation) {
		return nil, false
	}
	return o.LegalBasisExplanation, true
}

// HasLegalBasisExplanation returns a boolean if a field has been set.
func (o *PublicStatus) HasLegalBasisExplanation() bool {
	if o != nil && !IsNil(o.LegalBasisExplanation) {
		return true
	}

	return false
}

// SetLegalBasisExplanation gets a reference to the given string and assigns it to the LegalBasisExplanation field.
func (o *PublicStatus) SetLegalBasisExplanation(v string) {
	o.LegalBasisExplanation = &v
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise.
func (o *PublicStatus) GetBusinessUnitId() int64 {
	if o == nil || IsNil(o.BusinessUnitId) {
		var ret int64
		return ret
	}
	return *o.BusinessUnitId
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicStatus) GetBusinessUnitIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BusinessUnitId) {
		return nil, false
	}
	return o.BusinessUnitId, true
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *PublicStatus) HasBusinessUnitId() bool {
	if o != nil && !IsNil(o.BusinessUnitId) {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given int64 and assigns it to the BusinessUnitId field.
func (o *PublicStatus) SetBusinessUnitId(v int64) {
	o.BusinessUnitId = &v
}

// GetStatus returns the Status field value
func (o *PublicStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PublicStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PublicStatus) SetStatus(v string) {
	o.Status = v
}

// GetTimestamp returns the Timestamp field value
func (o *PublicStatus) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *PublicStatus) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *PublicStatus) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o PublicStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubscriptionName) {
		toSerialize["subscriptionName"] = o.SubscriptionName
	}
	toSerialize["channel"] = o.Channel
	toSerialize["subscriberIdString"] = o.SubscriberIdString
	if !IsNil(o.LegalBasis) {
		toSerialize["legalBasis"] = o.LegalBasis
	}
	if !IsNil(o.SetStatusSuccessReason) {
		toSerialize["setStatusSuccessReason"] = o.SetStatusSuccessReason
	}
	toSerialize["source"] = o.Source
	toSerialize["subscriptionId"] = o.SubscriptionId
	if !IsNil(o.LegalBasisExplanation) {
		toSerialize["legalBasisExplanation"] = o.LegalBasisExplanation
	}
	if !IsNil(o.BusinessUnitId) {
		toSerialize["businessUnitId"] = o.BusinessUnitId
	}
	toSerialize["status"] = o.Status
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *PublicStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"channel",
		"subscriberIdString",
		"source",
		"subscriptionId",
		"status",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicStatus := _PublicStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicStatus)

	if err != nil {
		return err
	}

	*o = PublicStatus(varPublicStatus)

	return err
}

type NullablePublicStatus struct {
	value *PublicStatus
	isSet bool
}

func (v NullablePublicStatus) Get() *PublicStatus {
	return v.value
}

func (v *NullablePublicStatus) Set(val *PublicStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicStatus(val *PublicStatus) *NullablePublicStatus {
	return &NullablePublicStatus{value: val, isSet: true}
}

func (v NullablePublicStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


