/*
Communication Preferences Subscriptions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package subscriptions

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
)


// SubscriptionDefinitionsAPIService SubscriptionDefinitionsAPI service
type SubscriptionDefinitionsAPIService service

type ApiGetCommunicationPreferencesV4DefinitionsRequest struct {
	ctx context.Context
	ApiService *SubscriptionDefinitionsAPIService
	businessUnitId *int64
	includeTranslations *bool
}

// If you have the [business unit add-on](https://developers.hubspot.com/beta-docs/guides/api/settings/business-units-api), include this parameter to filter results by business unit ID. The default Account business unit will always use &#x60;0&#x60;.
func (r ApiGetCommunicationPreferencesV4DefinitionsRequest) BusinessUnitId(businessUnitId int64) ApiGetCommunicationPreferencesV4DefinitionsRequest {
	r.businessUnitId = &businessUnitId
	return r
}

// Set to &#x60;true&#x60; to return subscription translations associated with each definition.
func (r ApiGetCommunicationPreferencesV4DefinitionsRequest) IncludeTranslations(includeTranslations bool) ApiGetCommunicationPreferencesV4DefinitionsRequest {
	r.includeTranslations = &includeTranslations
	return r
}

func (r ApiGetCommunicationPreferencesV4DefinitionsRequest) Execute() (*ActionResponseWithResultsSubscriptionDefinition, *http.Response, error) {
	return r.ApiService.GetCommunicationPreferencesV4DefinitionsExecute(r)
}

/*
GetCommunicationPreferencesV4Definitions Retrieve all subscription status definitions

Get a list of subscription status definitions from the account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCommunicationPreferencesV4DefinitionsRequest
*/
func (a *SubscriptionDefinitionsAPIService) GetCommunicationPreferencesV4Definitions(ctx context.Context) ApiGetCommunicationPreferencesV4DefinitionsRequest {
	return ApiGetCommunicationPreferencesV4DefinitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ActionResponseWithResultsSubscriptionDefinition
func (a *SubscriptionDefinitionsAPIService) GetCommunicationPreferencesV4DefinitionsExecute(r ApiGetCommunicationPreferencesV4DefinitionsRequest) (*ActionResponseWithResultsSubscriptionDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActionResponseWithResultsSubscriptionDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionDefinitionsAPIService.GetCommunicationPreferencesV4Definitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/communication-preferences/v4/definitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.businessUnitId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "businessUnitId", r.businessUnitId, "form", "")
	}
	if r.includeTranslations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTranslations", r.includeTranslations, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
