/*
Automation Sequences

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sequences

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
)


// PublicEnrollmentsAPIService PublicEnrollmentsAPI service
type PublicEnrollmentsAPIService service

type ApiGetAutomationV4SequencesEnrollmentsContactContactIdRequest struct {
	ctx context.Context
	ApiService *PublicEnrollmentsAPIService
	contactId string
}

func (r ApiGetAutomationV4SequencesEnrollmentsContactContactIdRequest) Execute() (*PublicSequenceEnrollmentResponse, *http.Response, error) {
	return r.ApiService.GetAutomationV4SequencesEnrollmentsContactContactIdExecute(r)
}

/*
GetAutomationV4SequencesEnrollmentsContactContactId Method for GetAutomationV4SequencesEnrollmentsContactContactId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactId 
 @return ApiGetAutomationV4SequencesEnrollmentsContactContactIdRequest
*/
func (a *PublicEnrollmentsAPIService) GetAutomationV4SequencesEnrollmentsContactContactId(ctx context.Context, contactId string) ApiGetAutomationV4SequencesEnrollmentsContactContactIdRequest {
	return ApiGetAutomationV4SequencesEnrollmentsContactContactIdRequest{
		ApiService: a,
		ctx: ctx,
		contactId: contactId,
	}
}

// Execute executes the request
//  @return PublicSequenceEnrollmentResponse
func (a *PublicEnrollmentsAPIService) GetAutomationV4SequencesEnrollmentsContactContactIdExecute(r ApiGetAutomationV4SequencesEnrollmentsContactContactIdRequest) (*PublicSequenceEnrollmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicSequenceEnrollmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicEnrollmentsAPIService.GetAutomationV4SequencesEnrollmentsContactContactId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/sequences/enrollments/contact/{contactId}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactId"+"}", url.PathEscape(parameterValueToString(r.contactId, "contactId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostAutomationV4SequencesEnrollmentsRequest struct {
	ctx context.Context
	ApiService *PublicEnrollmentsAPIService
	userId *string
	publicSequenceEnrollmentRequest *PublicSequenceEnrollmentRequest
}

// 
func (r ApiPostAutomationV4SequencesEnrollmentsRequest) UserId(userId string) ApiPostAutomationV4SequencesEnrollmentsRequest {
	r.userId = &userId
	return r
}

func (r ApiPostAutomationV4SequencesEnrollmentsRequest) PublicSequenceEnrollmentRequest(publicSequenceEnrollmentRequest PublicSequenceEnrollmentRequest) ApiPostAutomationV4SequencesEnrollmentsRequest {
	r.publicSequenceEnrollmentRequest = &publicSequenceEnrollmentRequest
	return r
}

func (r ApiPostAutomationV4SequencesEnrollmentsRequest) Execute() (*PublicSequenceEnrollmentLiteResponse, *http.Response, error) {
	return r.ApiService.PostAutomationV4SequencesEnrollmentsExecute(r)
}

/*
PostAutomationV4SequencesEnrollments Method for PostAutomationV4SequencesEnrollments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostAutomationV4SequencesEnrollmentsRequest
*/
func (a *PublicEnrollmentsAPIService) PostAutomationV4SequencesEnrollments(ctx context.Context) ApiPostAutomationV4SequencesEnrollmentsRequest {
	return ApiPostAutomationV4SequencesEnrollmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PublicSequenceEnrollmentLiteResponse
func (a *PublicEnrollmentsAPIService) PostAutomationV4SequencesEnrollmentsExecute(r ApiPostAutomationV4SequencesEnrollmentsRequest) (*PublicSequenceEnrollmentLiteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicSequenceEnrollmentLiteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicEnrollmentsAPIService.PostAutomationV4SequencesEnrollments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/sequences/enrollments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.publicSequenceEnrollmentRequest == nil {
		return localVarReturnValue, nil, reportError("publicSequenceEnrollmentRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.publicSequenceEnrollmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
