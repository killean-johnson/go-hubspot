/*
Automation Actions V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FieldTypeDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldTypeDefinition{}

// FieldTypeDefinition struct for FieldTypeDefinition
type FieldTypeDefinition struct {
	HelpText *string `json:"helpText,omitempty"`
	ReferencedObjectType *string `json:"referencedObjectType,omitempty"`
	Name string `json:"name"`
	Options []Option `json:"options"`
	Description *string `json:"description,omitempty"`
	ExternalOptionsReferenceType *string `json:"externalOptionsReferenceType,omitempty"`
	Label *string `json:"label,omitempty"`
	Type string `json:"type"`
	FieldType *string `json:"fieldType,omitempty"`
	OptionsUrl *string `json:"optionsUrl,omitempty"`
	ExternalOptions bool `json:"externalOptions"`
}

type _FieldTypeDefinition FieldTypeDefinition

// NewFieldTypeDefinition instantiates a new FieldTypeDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldTypeDefinition(name string, options []Option, type_ string, externalOptions bool) *FieldTypeDefinition {
	this := FieldTypeDefinition{}
	this.Name = name
	this.Options = options
	this.Type = type_
	this.ExternalOptions = externalOptions
	return &this
}

// NewFieldTypeDefinitionWithDefaults instantiates a new FieldTypeDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldTypeDefinitionWithDefaults() *FieldTypeDefinition {
	this := FieldTypeDefinition{}
	return &this
}

// GetHelpText returns the HelpText field value if set, zero value otherwise.
func (o *FieldTypeDefinition) GetHelpText() string {
	if o == nil || IsNil(o.HelpText) {
		var ret string
		return ret
	}
	return *o.HelpText
}

// GetHelpTextOk returns a tuple with the HelpText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetHelpTextOk() (*string, bool) {
	if o == nil || IsNil(o.HelpText) {
		return nil, false
	}
	return o.HelpText, true
}

// HasHelpText returns a boolean if a field has been set.
func (o *FieldTypeDefinition) HasHelpText() bool {
	if o != nil && !IsNil(o.HelpText) {
		return true
	}

	return false
}

// SetHelpText gets a reference to the given string and assigns it to the HelpText field.
func (o *FieldTypeDefinition) SetHelpText(v string) {
	o.HelpText = &v
}

// GetReferencedObjectType returns the ReferencedObjectType field value if set, zero value otherwise.
func (o *FieldTypeDefinition) GetReferencedObjectType() string {
	if o == nil || IsNil(o.ReferencedObjectType) {
		var ret string
		return ret
	}
	return *o.ReferencedObjectType
}

// GetReferencedObjectTypeOk returns a tuple with the ReferencedObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetReferencedObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReferencedObjectType) {
		return nil, false
	}
	return o.ReferencedObjectType, true
}

// HasReferencedObjectType returns a boolean if a field has been set.
func (o *FieldTypeDefinition) HasReferencedObjectType() bool {
	if o != nil && !IsNil(o.ReferencedObjectType) {
		return true
	}

	return false
}

// SetReferencedObjectType gets a reference to the given string and assigns it to the ReferencedObjectType field.
func (o *FieldTypeDefinition) SetReferencedObjectType(v string) {
	o.ReferencedObjectType = &v
}

// GetName returns the Name field value
func (o *FieldTypeDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FieldTypeDefinition) SetName(v string) {
	o.Name = v
}

// GetOptions returns the Options field value
func (o *FieldTypeDefinition) GetOptions() []Option {
	if o == nil {
		var ret []Option
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetOptionsOk() ([]Option, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *FieldTypeDefinition) SetOptions(v []Option) {
	o.Options = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FieldTypeDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FieldTypeDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FieldTypeDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetExternalOptionsReferenceType returns the ExternalOptionsReferenceType field value if set, zero value otherwise.
func (o *FieldTypeDefinition) GetExternalOptionsReferenceType() string {
	if o == nil || IsNil(o.ExternalOptionsReferenceType) {
		var ret string
		return ret
	}
	return *o.ExternalOptionsReferenceType
}

// GetExternalOptionsReferenceTypeOk returns a tuple with the ExternalOptionsReferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetExternalOptionsReferenceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalOptionsReferenceType) {
		return nil, false
	}
	return o.ExternalOptionsReferenceType, true
}

// HasExternalOptionsReferenceType returns a boolean if a field has been set.
func (o *FieldTypeDefinition) HasExternalOptionsReferenceType() bool {
	if o != nil && !IsNil(o.ExternalOptionsReferenceType) {
		return true
	}

	return false
}

// SetExternalOptionsReferenceType gets a reference to the given string and assigns it to the ExternalOptionsReferenceType field.
func (o *FieldTypeDefinition) SetExternalOptionsReferenceType(v string) {
	o.ExternalOptionsReferenceType = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *FieldTypeDefinition) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *FieldTypeDefinition) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *FieldTypeDefinition) SetLabel(v string) {
	o.Label = &v
}

// GetType returns the Type field value
func (o *FieldTypeDefinition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FieldTypeDefinition) SetType(v string) {
	o.Type = v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *FieldTypeDefinition) GetFieldType() string {
	if o == nil || IsNil(o.FieldType) {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *FieldTypeDefinition) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *FieldTypeDefinition) SetFieldType(v string) {
	o.FieldType = &v
}

// GetOptionsUrl returns the OptionsUrl field value if set, zero value otherwise.
func (o *FieldTypeDefinition) GetOptionsUrl() string {
	if o == nil || IsNil(o.OptionsUrl) {
		var ret string
		return ret
	}
	return *o.OptionsUrl
}

// GetOptionsUrlOk returns a tuple with the OptionsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetOptionsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OptionsUrl) {
		return nil, false
	}
	return o.OptionsUrl, true
}

// HasOptionsUrl returns a boolean if a field has been set.
func (o *FieldTypeDefinition) HasOptionsUrl() bool {
	if o != nil && !IsNil(o.OptionsUrl) {
		return true
	}

	return false
}

// SetOptionsUrl gets a reference to the given string and assigns it to the OptionsUrl field.
func (o *FieldTypeDefinition) SetOptionsUrl(v string) {
	o.OptionsUrl = &v
}

// GetExternalOptions returns the ExternalOptions field value
func (o *FieldTypeDefinition) GetExternalOptions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExternalOptions
}

// GetExternalOptionsOk returns a tuple with the ExternalOptions field value
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetExternalOptionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalOptions, true
}

// SetExternalOptions sets field value
func (o *FieldTypeDefinition) SetExternalOptions(v bool) {
	o.ExternalOptions = v
}

func (o FieldTypeDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldTypeDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HelpText) {
		toSerialize["helpText"] = o.HelpText
	}
	if !IsNil(o.ReferencedObjectType) {
		toSerialize["referencedObjectType"] = o.ReferencedObjectType
	}
	toSerialize["name"] = o.Name
	toSerialize["options"] = o.Options
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExternalOptionsReferenceType) {
		toSerialize["externalOptionsReferenceType"] = o.ExternalOptionsReferenceType
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.FieldType) {
		toSerialize["fieldType"] = o.FieldType
	}
	if !IsNil(o.OptionsUrl) {
		toSerialize["optionsUrl"] = o.OptionsUrl
	}
	toSerialize["externalOptions"] = o.ExternalOptions
	return toSerialize, nil
}

func (o *FieldTypeDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"options",
		"type",
		"externalOptions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFieldTypeDefinition := _FieldTypeDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFieldTypeDefinition)

	if err != nil {
		return err
	}

	*o = FieldTypeDefinition(varFieldTypeDefinition)

	return err
}

type NullableFieldTypeDefinition struct {
	value *FieldTypeDefinition
	isSet bool
}

func (v NullableFieldTypeDefinition) Get() *FieldTypeDefinition {
	return v.value
}

func (v *NullableFieldTypeDefinition) Set(val *FieldTypeDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldTypeDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldTypeDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldTypeDefinition(val *FieldTypeDefinition) *NullableFieldTypeDefinition {
	return &NullableFieldTypeDefinition{value: val, isSet: true}
}

func (v NullableFieldTypeDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldTypeDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


