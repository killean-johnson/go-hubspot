/*
Automation Actions V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicConditionalSingleFieldDependency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicConditionalSingleFieldDependency{}

// PublicConditionalSingleFieldDependency struct for PublicConditionalSingleFieldDependency
type PublicConditionalSingleFieldDependency struct {
	DependencyType string `json:"dependencyType"`
	ControllingFieldName string `json:"controllingFieldName"`
	ControllingFieldValue string `json:"controllingFieldValue"`
	DependentFieldNames []string `json:"dependentFieldNames"`
}

type _PublicConditionalSingleFieldDependency PublicConditionalSingleFieldDependency

// NewPublicConditionalSingleFieldDependency instantiates a new PublicConditionalSingleFieldDependency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicConditionalSingleFieldDependency(dependencyType string, controllingFieldName string, controllingFieldValue string, dependentFieldNames []string) *PublicConditionalSingleFieldDependency {
	this := PublicConditionalSingleFieldDependency{}
	this.DependencyType = dependencyType
	this.ControllingFieldName = controllingFieldName
	this.ControllingFieldValue = controllingFieldValue
	this.DependentFieldNames = dependentFieldNames
	return &this
}

// NewPublicConditionalSingleFieldDependencyWithDefaults instantiates a new PublicConditionalSingleFieldDependency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicConditionalSingleFieldDependencyWithDefaults() *PublicConditionalSingleFieldDependency {
	this := PublicConditionalSingleFieldDependency{}
	var dependencyType string = "CONDITIONAL_SINGLE_FIELD"
	this.DependencyType = dependencyType
	return &this
}

// GetDependencyType returns the DependencyType field value
func (o *PublicConditionalSingleFieldDependency) GetDependencyType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DependencyType
}

// GetDependencyTypeOk returns a tuple with the DependencyType field value
// and a boolean to check if the value has been set.
func (o *PublicConditionalSingleFieldDependency) GetDependencyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DependencyType, true
}

// SetDependencyType sets field value
func (o *PublicConditionalSingleFieldDependency) SetDependencyType(v string) {
	o.DependencyType = v
}

// GetControllingFieldName returns the ControllingFieldName field value
func (o *PublicConditionalSingleFieldDependency) GetControllingFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ControllingFieldName
}

// GetControllingFieldNameOk returns a tuple with the ControllingFieldName field value
// and a boolean to check if the value has been set.
func (o *PublicConditionalSingleFieldDependency) GetControllingFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ControllingFieldName, true
}

// SetControllingFieldName sets field value
func (o *PublicConditionalSingleFieldDependency) SetControllingFieldName(v string) {
	o.ControllingFieldName = v
}

// GetControllingFieldValue returns the ControllingFieldValue field value
func (o *PublicConditionalSingleFieldDependency) GetControllingFieldValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ControllingFieldValue
}

// GetControllingFieldValueOk returns a tuple with the ControllingFieldValue field value
// and a boolean to check if the value has been set.
func (o *PublicConditionalSingleFieldDependency) GetControllingFieldValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ControllingFieldValue, true
}

// SetControllingFieldValue sets field value
func (o *PublicConditionalSingleFieldDependency) SetControllingFieldValue(v string) {
	o.ControllingFieldValue = v
}

// GetDependentFieldNames returns the DependentFieldNames field value
func (o *PublicConditionalSingleFieldDependency) GetDependentFieldNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DependentFieldNames
}

// GetDependentFieldNamesOk returns a tuple with the DependentFieldNames field value
// and a boolean to check if the value has been set.
func (o *PublicConditionalSingleFieldDependency) GetDependentFieldNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependentFieldNames, true
}

// SetDependentFieldNames sets field value
func (o *PublicConditionalSingleFieldDependency) SetDependentFieldNames(v []string) {
	o.DependentFieldNames = v
}

func (o PublicConditionalSingleFieldDependency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicConditionalSingleFieldDependency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dependencyType"] = o.DependencyType
	toSerialize["controllingFieldName"] = o.ControllingFieldName
	toSerialize["controllingFieldValue"] = o.ControllingFieldValue
	toSerialize["dependentFieldNames"] = o.DependentFieldNames
	return toSerialize, nil
}

func (o *PublicConditionalSingleFieldDependency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dependencyType",
		"controllingFieldName",
		"controllingFieldValue",
		"dependentFieldNames",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicConditionalSingleFieldDependency := _PublicConditionalSingleFieldDependency{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicConditionalSingleFieldDependency)

	if err != nil {
		return err
	}

	*o = PublicConditionalSingleFieldDependency(varPublicConditionalSingleFieldDependency)

	return err
}

type NullablePublicConditionalSingleFieldDependency struct {
	value *PublicConditionalSingleFieldDependency
	isSet bool
}

func (v NullablePublicConditionalSingleFieldDependency) Get() *PublicConditionalSingleFieldDependency {
	return v.value
}

func (v *NullablePublicConditionalSingleFieldDependency) Set(val *PublicConditionalSingleFieldDependency) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicConditionalSingleFieldDependency) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicConditionalSingleFieldDependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicConditionalSingleFieldDependency(val *PublicConditionalSingleFieldDependency) *NullablePublicConditionalSingleFieldDependency {
	return &NullablePublicConditionalSingleFieldDependency{value: val, isSet: true}
}

func (v NullablePublicConditionalSingleFieldDependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicConditionalSingleFieldDependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


