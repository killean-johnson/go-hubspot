/*
Automation Actions V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InputFieldDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputFieldDefinition{}

// InputFieldDefinition struct for InputFieldDefinition
type InputFieldDefinition struct {
	IsRequired bool `json:"isRequired"`
	AutomationFieldType *string `json:"automationFieldType,omitempty"`
	TypeDefinition FieldTypeDefinition `json:"typeDefinition"`
	SupportedValueTypes []string `json:"supportedValueTypes,omitempty"`
}

type _InputFieldDefinition InputFieldDefinition

// NewInputFieldDefinition instantiates a new InputFieldDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputFieldDefinition(isRequired bool, typeDefinition FieldTypeDefinition) *InputFieldDefinition {
	this := InputFieldDefinition{}
	this.IsRequired = isRequired
	this.TypeDefinition = typeDefinition
	return &this
}

// NewInputFieldDefinitionWithDefaults instantiates a new InputFieldDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputFieldDefinitionWithDefaults() *InputFieldDefinition {
	this := InputFieldDefinition{}
	return &this
}

// GetIsRequired returns the IsRequired field value
func (o *InputFieldDefinition) GetIsRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value
// and a boolean to check if the value has been set.
func (o *InputFieldDefinition) GetIsRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRequired, true
}

// SetIsRequired sets field value
func (o *InputFieldDefinition) SetIsRequired(v bool) {
	o.IsRequired = v
}

// GetAutomationFieldType returns the AutomationFieldType field value if set, zero value otherwise.
func (o *InputFieldDefinition) GetAutomationFieldType() string {
	if o == nil || IsNil(o.AutomationFieldType) {
		var ret string
		return ret
	}
	return *o.AutomationFieldType
}

// GetAutomationFieldTypeOk returns a tuple with the AutomationFieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputFieldDefinition) GetAutomationFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AutomationFieldType) {
		return nil, false
	}
	return o.AutomationFieldType, true
}

// HasAutomationFieldType returns a boolean if a field has been set.
func (o *InputFieldDefinition) HasAutomationFieldType() bool {
	if o != nil && !IsNil(o.AutomationFieldType) {
		return true
	}

	return false
}

// SetAutomationFieldType gets a reference to the given string and assigns it to the AutomationFieldType field.
func (o *InputFieldDefinition) SetAutomationFieldType(v string) {
	o.AutomationFieldType = &v
}

// GetTypeDefinition returns the TypeDefinition field value
func (o *InputFieldDefinition) GetTypeDefinition() FieldTypeDefinition {
	if o == nil {
		var ret FieldTypeDefinition
		return ret
	}

	return o.TypeDefinition
}

// GetTypeDefinitionOk returns a tuple with the TypeDefinition field value
// and a boolean to check if the value has been set.
func (o *InputFieldDefinition) GetTypeDefinitionOk() (*FieldTypeDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeDefinition, true
}

// SetTypeDefinition sets field value
func (o *InputFieldDefinition) SetTypeDefinition(v FieldTypeDefinition) {
	o.TypeDefinition = v
}

// GetSupportedValueTypes returns the SupportedValueTypes field value if set, zero value otherwise.
func (o *InputFieldDefinition) GetSupportedValueTypes() []string {
	if o == nil || IsNil(o.SupportedValueTypes) {
		var ret []string
		return ret
	}
	return o.SupportedValueTypes
}

// GetSupportedValueTypesOk returns a tuple with the SupportedValueTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputFieldDefinition) GetSupportedValueTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedValueTypes) {
		return nil, false
	}
	return o.SupportedValueTypes, true
}

// HasSupportedValueTypes returns a boolean if a field has been set.
func (o *InputFieldDefinition) HasSupportedValueTypes() bool {
	if o != nil && !IsNil(o.SupportedValueTypes) {
		return true
	}

	return false
}

// SetSupportedValueTypes gets a reference to the given []string and assigns it to the SupportedValueTypes field.
func (o *InputFieldDefinition) SetSupportedValueTypes(v []string) {
	o.SupportedValueTypes = v
}

func (o InputFieldDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputFieldDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isRequired"] = o.IsRequired
	if !IsNil(o.AutomationFieldType) {
		toSerialize["automationFieldType"] = o.AutomationFieldType
	}
	toSerialize["typeDefinition"] = o.TypeDefinition
	if !IsNil(o.SupportedValueTypes) {
		toSerialize["supportedValueTypes"] = o.SupportedValueTypes
	}
	return toSerialize, nil
}

func (o *InputFieldDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isRequired",
		"typeDefinition",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInputFieldDefinition := _InputFieldDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInputFieldDefinition)

	if err != nil {
		return err
	}

	*o = InputFieldDefinition(varInputFieldDefinition)

	return err
}

type NullableInputFieldDefinition struct {
	value *InputFieldDefinition
	isSet bool
}

func (v NullableInputFieldDefinition) Get() *InputFieldDefinition {
	return v.value
}

func (v *NullableInputFieldDefinition) Set(val *InputFieldDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableInputFieldDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableInputFieldDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputFieldDefinition(val *InputFieldDefinition) *NullableInputFieldDefinition {
	return &NullableInputFieldDefinition{value: val, isSet: true}
}

func (v NullableInputFieldDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputFieldDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


