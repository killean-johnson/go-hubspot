/*
Automation Actions V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions_v4

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// RevisionsAPIService RevisionsAPI service
type RevisionsAPIService service

type ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest struct {
	ctx context.Context
	ApiService *RevisionsAPIService
	definitionId string
	appId int32
	limit *int32
	after *string
}

// The maximum number of results to display per page.
func (r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest) Limit(limit int32) ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest {
	r.limit = &limit
	return r
}

// The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest) After(after string) ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest {
	r.after = &after
	return r
}

func (r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest) Execute() (*CollectionResponsePublicActionRevisionForwardPaging, *http.Response, error) {
	return r.ApiService.GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageExecute(r)
}

/*
GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPage Retrieve revisions for a given definition

Retrieve the versions of a definition by ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param definitionId The ID of the definition.
 @param appId The ID of the app.
 @return ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest
*/
func (a *RevisionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPage(ctx context.Context, definitionId string, appId int32) ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest {
	return ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest{
		ApiService: a,
		ctx: ctx,
		definitionId: definitionId,
		appId: appId,
	}
}

// Execute executes the request
//  @return CollectionResponsePublicActionRevisionForwardPaging
func (a *RevisionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageExecute(r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest) (*CollectionResponsePublicActionRevisionForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponsePublicActionRevisionForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RevisionsAPIService.GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/actions/{appId}/{definitionId}/revisions"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdRequest struct {
	ctx context.Context
	ApiService *RevisionsAPIService
	definitionId string
	revisionId string
	appId int32
}

func (r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdRequest) Execute() (*PublicActionRevision, *http.Response, error) {
	return r.ApiService.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdExecute(r)
}

/*
GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetById Retrieve a specific revision of a definition

Retrieve a specific revision of a definition by revision ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param definitionId The ID of the definition.
 @param revisionId The ID of the revision.
 @param appId The ID of the app.
 @return ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdRequest
*/
func (a *RevisionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetById(ctx context.Context, definitionId string, revisionId string, appId int32) ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdRequest {
	return ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdRequest{
		ApiService: a,
		ctx: ctx,
		definitionId: definitionId,
		revisionId: revisionId,
		appId: appId,
	}
}

// Execute executes the request
//  @return PublicActionRevision
func (a *RevisionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdExecute(r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdRequest) (*PublicActionRevision, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicActionRevision
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RevisionsAPIService.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/actions/{appId}/{definitionId}/revisions/{revisionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"revisionId"+"}", url.PathEscape(parameterValueToString(r.revisionId, "revisionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
