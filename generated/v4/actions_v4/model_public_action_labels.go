/*
Automation Actions V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicActionLabels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicActionLabels{}

// PublicActionLabels struct for PublicActionLabels
type PublicActionLabels struct {
	InputFieldDescriptions *map[string]string `json:"inputFieldDescriptions,omitempty"`
	AppDisplayName *string `json:"appDisplayName,omitempty"`
	OutputFieldLabels *map[string]string `json:"outputFieldLabels,omitempty"`
	InputFieldOptionLabels *map[string]map[string]string `json:"inputFieldOptionLabels,omitempty"`
	ActionDescription *string `json:"actionDescription,omitempty"`
	ExecutionRules *map[string]string `json:"executionRules,omitempty"`
	InputFieldLabels *map[string]string `json:"inputFieldLabels,omitempty"`
	ActionName string `json:"actionName"`
	ActionCardContent *string `json:"actionCardContent,omitempty"`
}

type _PublicActionLabels PublicActionLabels

// NewPublicActionLabels instantiates a new PublicActionLabels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicActionLabels(actionName string) *PublicActionLabels {
	this := PublicActionLabels{}
	this.ActionName = actionName
	return &this
}

// NewPublicActionLabelsWithDefaults instantiates a new PublicActionLabels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicActionLabelsWithDefaults() *PublicActionLabels {
	this := PublicActionLabels{}
	return &this
}

// GetInputFieldDescriptions returns the InputFieldDescriptions field value if set, zero value otherwise.
func (o *PublicActionLabels) GetInputFieldDescriptions() map[string]string {
	if o == nil || IsNil(o.InputFieldDescriptions) {
		var ret map[string]string
		return ret
	}
	return *o.InputFieldDescriptions
}

// GetInputFieldDescriptionsOk returns a tuple with the InputFieldDescriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicActionLabels) GetInputFieldDescriptionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.InputFieldDescriptions) {
		return nil, false
	}
	return o.InputFieldDescriptions, true
}

// HasInputFieldDescriptions returns a boolean if a field has been set.
func (o *PublicActionLabels) HasInputFieldDescriptions() bool {
	if o != nil && !IsNil(o.InputFieldDescriptions) {
		return true
	}

	return false
}

// SetInputFieldDescriptions gets a reference to the given map[string]string and assigns it to the InputFieldDescriptions field.
func (o *PublicActionLabels) SetInputFieldDescriptions(v map[string]string) {
	o.InputFieldDescriptions = &v
}

// GetAppDisplayName returns the AppDisplayName field value if set, zero value otherwise.
func (o *PublicActionLabels) GetAppDisplayName() string {
	if o == nil || IsNil(o.AppDisplayName) {
		var ret string
		return ret
	}
	return *o.AppDisplayName
}

// GetAppDisplayNameOk returns a tuple with the AppDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicActionLabels) GetAppDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppDisplayName) {
		return nil, false
	}
	return o.AppDisplayName, true
}

// HasAppDisplayName returns a boolean if a field has been set.
func (o *PublicActionLabels) HasAppDisplayName() bool {
	if o != nil && !IsNil(o.AppDisplayName) {
		return true
	}

	return false
}

// SetAppDisplayName gets a reference to the given string and assigns it to the AppDisplayName field.
func (o *PublicActionLabels) SetAppDisplayName(v string) {
	o.AppDisplayName = &v
}

// GetOutputFieldLabels returns the OutputFieldLabels field value if set, zero value otherwise.
func (o *PublicActionLabels) GetOutputFieldLabels() map[string]string {
	if o == nil || IsNil(o.OutputFieldLabels) {
		var ret map[string]string
		return ret
	}
	return *o.OutputFieldLabels
}

// GetOutputFieldLabelsOk returns a tuple with the OutputFieldLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicActionLabels) GetOutputFieldLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.OutputFieldLabels) {
		return nil, false
	}
	return o.OutputFieldLabels, true
}

// HasOutputFieldLabels returns a boolean if a field has been set.
func (o *PublicActionLabels) HasOutputFieldLabels() bool {
	if o != nil && !IsNil(o.OutputFieldLabels) {
		return true
	}

	return false
}

// SetOutputFieldLabels gets a reference to the given map[string]string and assigns it to the OutputFieldLabels field.
func (o *PublicActionLabels) SetOutputFieldLabels(v map[string]string) {
	o.OutputFieldLabels = &v
}

// GetInputFieldOptionLabels returns the InputFieldOptionLabels field value if set, zero value otherwise.
func (o *PublicActionLabels) GetInputFieldOptionLabels() map[string]map[string]string {
	if o == nil || IsNil(o.InputFieldOptionLabels) {
		var ret map[string]map[string]string
		return ret
	}
	return *o.InputFieldOptionLabels
}

// GetInputFieldOptionLabelsOk returns a tuple with the InputFieldOptionLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicActionLabels) GetInputFieldOptionLabelsOk() (*map[string]map[string]string, bool) {
	if o == nil || IsNil(o.InputFieldOptionLabels) {
		return nil, false
	}
	return o.InputFieldOptionLabels, true
}

// HasInputFieldOptionLabels returns a boolean if a field has been set.
func (o *PublicActionLabels) HasInputFieldOptionLabels() bool {
	if o != nil && !IsNil(o.InputFieldOptionLabels) {
		return true
	}

	return false
}

// SetInputFieldOptionLabels gets a reference to the given map[string]map[string]string and assigns it to the InputFieldOptionLabels field.
func (o *PublicActionLabels) SetInputFieldOptionLabels(v map[string]map[string]string) {
	o.InputFieldOptionLabels = &v
}

// GetActionDescription returns the ActionDescription field value if set, zero value otherwise.
func (o *PublicActionLabels) GetActionDescription() string {
	if o == nil || IsNil(o.ActionDescription) {
		var ret string
		return ret
	}
	return *o.ActionDescription
}

// GetActionDescriptionOk returns a tuple with the ActionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicActionLabels) GetActionDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ActionDescription) {
		return nil, false
	}
	return o.ActionDescription, true
}

// HasActionDescription returns a boolean if a field has been set.
func (o *PublicActionLabels) HasActionDescription() bool {
	if o != nil && !IsNil(o.ActionDescription) {
		return true
	}

	return false
}

// SetActionDescription gets a reference to the given string and assigns it to the ActionDescription field.
func (o *PublicActionLabels) SetActionDescription(v string) {
	o.ActionDescription = &v
}

// GetExecutionRules returns the ExecutionRules field value if set, zero value otherwise.
func (o *PublicActionLabels) GetExecutionRules() map[string]string {
	if o == nil || IsNil(o.ExecutionRules) {
		var ret map[string]string
		return ret
	}
	return *o.ExecutionRules
}

// GetExecutionRulesOk returns a tuple with the ExecutionRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicActionLabels) GetExecutionRulesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ExecutionRules) {
		return nil, false
	}
	return o.ExecutionRules, true
}

// HasExecutionRules returns a boolean if a field has been set.
func (o *PublicActionLabels) HasExecutionRules() bool {
	if o != nil && !IsNil(o.ExecutionRules) {
		return true
	}

	return false
}

// SetExecutionRules gets a reference to the given map[string]string and assigns it to the ExecutionRules field.
func (o *PublicActionLabels) SetExecutionRules(v map[string]string) {
	o.ExecutionRules = &v
}

// GetInputFieldLabels returns the InputFieldLabels field value if set, zero value otherwise.
func (o *PublicActionLabels) GetInputFieldLabels() map[string]string {
	if o == nil || IsNil(o.InputFieldLabels) {
		var ret map[string]string
		return ret
	}
	return *o.InputFieldLabels
}

// GetInputFieldLabelsOk returns a tuple with the InputFieldLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicActionLabels) GetInputFieldLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.InputFieldLabels) {
		return nil, false
	}
	return o.InputFieldLabels, true
}

// HasInputFieldLabels returns a boolean if a field has been set.
func (o *PublicActionLabels) HasInputFieldLabels() bool {
	if o != nil && !IsNil(o.InputFieldLabels) {
		return true
	}

	return false
}

// SetInputFieldLabels gets a reference to the given map[string]string and assigns it to the InputFieldLabels field.
func (o *PublicActionLabels) SetInputFieldLabels(v map[string]string) {
	o.InputFieldLabels = &v
}

// GetActionName returns the ActionName field value
func (o *PublicActionLabels) GetActionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionName
}

// GetActionNameOk returns a tuple with the ActionName field value
// and a boolean to check if the value has been set.
func (o *PublicActionLabels) GetActionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionName, true
}

// SetActionName sets field value
func (o *PublicActionLabels) SetActionName(v string) {
	o.ActionName = v
}

// GetActionCardContent returns the ActionCardContent field value if set, zero value otherwise.
func (o *PublicActionLabels) GetActionCardContent() string {
	if o == nil || IsNil(o.ActionCardContent) {
		var ret string
		return ret
	}
	return *o.ActionCardContent
}

// GetActionCardContentOk returns a tuple with the ActionCardContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicActionLabels) GetActionCardContentOk() (*string, bool) {
	if o == nil || IsNil(o.ActionCardContent) {
		return nil, false
	}
	return o.ActionCardContent, true
}

// HasActionCardContent returns a boolean if a field has been set.
func (o *PublicActionLabels) HasActionCardContent() bool {
	if o != nil && !IsNil(o.ActionCardContent) {
		return true
	}

	return false
}

// SetActionCardContent gets a reference to the given string and assigns it to the ActionCardContent field.
func (o *PublicActionLabels) SetActionCardContent(v string) {
	o.ActionCardContent = &v
}

func (o PublicActionLabels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicActionLabels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InputFieldDescriptions) {
		toSerialize["inputFieldDescriptions"] = o.InputFieldDescriptions
	}
	if !IsNil(o.AppDisplayName) {
		toSerialize["appDisplayName"] = o.AppDisplayName
	}
	if !IsNil(o.OutputFieldLabels) {
		toSerialize["outputFieldLabels"] = o.OutputFieldLabels
	}
	if !IsNil(o.InputFieldOptionLabels) {
		toSerialize["inputFieldOptionLabels"] = o.InputFieldOptionLabels
	}
	if !IsNil(o.ActionDescription) {
		toSerialize["actionDescription"] = o.ActionDescription
	}
	if !IsNil(o.ExecutionRules) {
		toSerialize["executionRules"] = o.ExecutionRules
	}
	if !IsNil(o.InputFieldLabels) {
		toSerialize["inputFieldLabels"] = o.InputFieldLabels
	}
	toSerialize["actionName"] = o.ActionName
	if !IsNil(o.ActionCardContent) {
		toSerialize["actionCardContent"] = o.ActionCardContent
	}
	return toSerialize, nil
}

func (o *PublicActionLabels) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"actionName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicActionLabels := _PublicActionLabels{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicActionLabels)

	if err != nil {
		return err
	}

	*o = PublicActionLabels(varPublicActionLabels)

	return err
}

type NullablePublicActionLabels struct {
	value *PublicActionLabels
	isSet bool
}

func (v NullablePublicActionLabels) Get() *PublicActionLabels {
	return v.value
}

func (v *NullablePublicActionLabels) Set(val *PublicActionLabels) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicActionLabels) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicActionLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicActionLabels(val *PublicActionLabels) *NullablePublicActionLabels {
	return &NullablePublicActionLabels{value: val, isSet: true}
}

func (v NullablePublicActionLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicActionLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


