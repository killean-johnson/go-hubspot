/*
Automation Actions V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions_v4

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublicActionRevision type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicActionRevision{}

// PublicActionRevision struct for PublicActionRevision
type PublicActionRevision struct {
	RevisionId string `json:"revisionId"`
	CreatedAt time.Time `json:"createdAt"`
	Definition PublicActionDefinition `json:"definition"`
	Id string `json:"id"`
}

type _PublicActionRevision PublicActionRevision

// NewPublicActionRevision instantiates a new PublicActionRevision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicActionRevision(revisionId string, createdAt time.Time, definition PublicActionDefinition, id string) *PublicActionRevision {
	this := PublicActionRevision{}
	this.RevisionId = revisionId
	this.CreatedAt = createdAt
	this.Definition = definition
	this.Id = id
	return &this
}

// NewPublicActionRevisionWithDefaults instantiates a new PublicActionRevision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicActionRevisionWithDefaults() *PublicActionRevision {
	this := PublicActionRevision{}
	return &this
}

// GetRevisionId returns the RevisionId field value
func (o *PublicActionRevision) GetRevisionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionId
}

// GetRevisionIdOk returns a tuple with the RevisionId field value
// and a boolean to check if the value has been set.
func (o *PublicActionRevision) GetRevisionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionId, true
}

// SetRevisionId sets field value
func (o *PublicActionRevision) SetRevisionId(v string) {
	o.RevisionId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PublicActionRevision) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicActionRevision) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PublicActionRevision) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDefinition returns the Definition field value
func (o *PublicActionRevision) GetDefinition() PublicActionDefinition {
	if o == nil {
		var ret PublicActionDefinition
		return ret
	}

	return o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value
// and a boolean to check if the value has been set.
func (o *PublicActionRevision) GetDefinitionOk() (*PublicActionDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Definition, true
}

// SetDefinition sets field value
func (o *PublicActionRevision) SetDefinition(v PublicActionDefinition) {
	o.Definition = v
}

// GetId returns the Id field value
func (o *PublicActionRevision) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicActionRevision) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicActionRevision) SetId(v string) {
	o.Id = v
}

func (o PublicActionRevision) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicActionRevision) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revisionId"] = o.RevisionId
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["definition"] = o.Definition
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *PublicActionRevision) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revisionId",
		"createdAt",
		"definition",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicActionRevision := _PublicActionRevision{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicActionRevision)

	if err != nil {
		return err
	}

	*o = PublicActionRevision(varPublicActionRevision)

	return err
}

type NullablePublicActionRevision struct {
	value *PublicActionRevision
	isSet bool
}

func (v NullablePublicActionRevision) Get() *PublicActionRevision {
	return v.value
}

func (v *NullablePublicActionRevision) Set(val *PublicActionRevision) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicActionRevision) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicActionRevision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicActionRevision(val *PublicActionRevision) *NullablePublicActionRevision {
	return &NullablePublicActionRevision{value: val, isSet: true}
}

func (v NullablePublicActionRevision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicActionRevision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


