/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlowIdWorkflowIdMappingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowIdWorkflowIdMappingResponse{}

// FlowIdWorkflowIdMappingResponse struct for FlowIdWorkflowIdMappingResponse
type FlowIdWorkflowIdMappingResponse struct {
	FlowId int32 `json:"flowId"`
	WorkflowId int32 `json:"workflowId"`
}

type _FlowIdWorkflowIdMappingResponse FlowIdWorkflowIdMappingResponse

// NewFlowIdWorkflowIdMappingResponse instantiates a new FlowIdWorkflowIdMappingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowIdWorkflowIdMappingResponse(flowId int32, workflowId int32) *FlowIdWorkflowIdMappingResponse {
	this := FlowIdWorkflowIdMappingResponse{}
	this.FlowId = flowId
	this.WorkflowId = workflowId
	return &this
}

// NewFlowIdWorkflowIdMappingResponseWithDefaults instantiates a new FlowIdWorkflowIdMappingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowIdWorkflowIdMappingResponseWithDefaults() *FlowIdWorkflowIdMappingResponse {
	this := FlowIdWorkflowIdMappingResponse{}
	return &this
}

// GetFlowId returns the FlowId field value
func (o *FlowIdWorkflowIdMappingResponse) GetFlowId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value
// and a boolean to check if the value has been set.
func (o *FlowIdWorkflowIdMappingResponse) GetFlowIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowId, true
}

// SetFlowId sets field value
func (o *FlowIdWorkflowIdMappingResponse) SetFlowId(v int32) {
	o.FlowId = v
}

// GetWorkflowId returns the WorkflowId field value
func (o *FlowIdWorkflowIdMappingResponse) GetWorkflowId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WorkflowId
}

// GetWorkflowIdOk returns a tuple with the WorkflowId field value
// and a boolean to check if the value has been set.
func (o *FlowIdWorkflowIdMappingResponse) GetWorkflowIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkflowId, true
}

// SetWorkflowId sets field value
func (o *FlowIdWorkflowIdMappingResponse) SetWorkflowId(v int32) {
	o.WorkflowId = v
}

func (o FlowIdWorkflowIdMappingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowIdWorkflowIdMappingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["flowId"] = o.FlowId
	toSerialize["workflowId"] = o.WorkflowId
	return toSerialize, nil
}

func (o *FlowIdWorkflowIdMappingResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"flowId",
		"workflowId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowIdWorkflowIdMappingResponse := _FlowIdWorkflowIdMappingResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlowIdWorkflowIdMappingResponse)

	if err != nil {
		return err
	}

	*o = FlowIdWorkflowIdMappingResponse(varFlowIdWorkflowIdMappingResponse)

	return err
}

type NullableFlowIdWorkflowIdMappingResponse struct {
	value *FlowIdWorkflowIdMappingResponse
	isSet bool
}

func (v NullableFlowIdWorkflowIdMappingResponse) Get() *FlowIdWorkflowIdMappingResponse {
	return v.value
}

func (v *NullableFlowIdWorkflowIdMappingResponse) Set(val *FlowIdWorkflowIdMappingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowIdWorkflowIdMappingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowIdWorkflowIdMappingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowIdWorkflowIdMappingResponse(val *FlowIdWorkflowIdMappingResponse) *NullableFlowIdWorkflowIdMappingResponse {
	return &NullableFlowIdWorkflowIdMappingResponse{value: val, isSet: true}
}

func (v NullableFlowIdWorkflowIdMappingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowIdWorkflowIdMappingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


