/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiSingleConnectionAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiSingleConnectionAction{}

// ApiSingleConnectionAction struct for ApiSingleConnectionAction
type ApiSingleConnectionAction struct {
	// The ID of the actionType to use.
	ActionTypeId string `json:"actionTypeId"`
	// The ID for this action.
	ActionId string `json:"actionId"`
	Connection *ApiConnection `json:"connection,omitempty"`
	// The type of action this is, can be: \"STATIC_BRANCH\", \"LIST_BRANCH\", \"AB_TEST_BRANCH\", \"CUSTOM_CODE\", \"WEBHOOK\", or \"SINGLE_CONNECTION\"
	Type string `json:"type"`
	// The version of this actionType to use.
	ActionTypeVersion int32 `json:"actionTypeVersion"`
	// The fields to pass into this action. Different action types accept different fields.
	Fields map[string]map[string]interface{} `json:"fields"`
}

type _ApiSingleConnectionAction ApiSingleConnectionAction

// NewApiSingleConnectionAction instantiates a new ApiSingleConnectionAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiSingleConnectionAction(actionTypeId string, actionId string, type_ string, actionTypeVersion int32, fields map[string]map[string]interface{}) *ApiSingleConnectionAction {
	this := ApiSingleConnectionAction{}
	this.ActionTypeId = actionTypeId
	this.ActionId = actionId
	this.Type = type_
	this.ActionTypeVersion = actionTypeVersion
	this.Fields = fields
	return &this
}

// NewApiSingleConnectionActionWithDefaults instantiates a new ApiSingleConnectionAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiSingleConnectionActionWithDefaults() *ApiSingleConnectionAction {
	this := ApiSingleConnectionAction{}
	var type_ string = "SINGLE_CONNECTION"
	this.Type = type_
	return &this
}

// GetActionTypeId returns the ActionTypeId field value
func (o *ApiSingleConnectionAction) GetActionTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionTypeId
}

// GetActionTypeIdOk returns a tuple with the ActionTypeId field value
// and a boolean to check if the value has been set.
func (o *ApiSingleConnectionAction) GetActionTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionTypeId, true
}

// SetActionTypeId sets field value
func (o *ApiSingleConnectionAction) SetActionTypeId(v string) {
	o.ActionTypeId = v
}

// GetActionId returns the ActionId field value
func (o *ApiSingleConnectionAction) GetActionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value
// and a boolean to check if the value has been set.
func (o *ApiSingleConnectionAction) GetActionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionId, true
}

// SetActionId sets field value
func (o *ApiSingleConnectionAction) SetActionId(v string) {
	o.ActionId = v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *ApiSingleConnectionAction) GetConnection() ApiConnection {
	if o == nil || IsNil(o.Connection) {
		var ret ApiConnection
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiSingleConnectionAction) GetConnectionOk() (*ApiConnection, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *ApiSingleConnectionAction) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given ApiConnection and assigns it to the Connection field.
func (o *ApiSingleConnectionAction) SetConnection(v ApiConnection) {
	o.Connection = &v
}

// GetType returns the Type field value
func (o *ApiSingleConnectionAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApiSingleConnectionAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApiSingleConnectionAction) SetType(v string) {
	o.Type = v
}

// GetActionTypeVersion returns the ActionTypeVersion field value
func (o *ApiSingleConnectionAction) GetActionTypeVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ActionTypeVersion
}

// GetActionTypeVersionOk returns a tuple with the ActionTypeVersion field value
// and a boolean to check if the value has been set.
func (o *ApiSingleConnectionAction) GetActionTypeVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionTypeVersion, true
}

// SetActionTypeVersion sets field value
func (o *ApiSingleConnectionAction) SetActionTypeVersion(v int32) {
	o.ActionTypeVersion = v
}

// GetFields returns the Fields field value
func (o *ApiSingleConnectionAction) GetFields() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *ApiSingleConnectionAction) GetFieldsOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *ApiSingleConnectionAction) SetFields(v map[string]map[string]interface{}) {
	o.Fields = v
}

func (o ApiSingleConnectionAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiSingleConnectionAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["actionTypeId"] = o.ActionTypeId
	toSerialize["actionId"] = o.ActionId
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	toSerialize["type"] = o.Type
	toSerialize["actionTypeVersion"] = o.ActionTypeVersion
	toSerialize["fields"] = o.Fields
	return toSerialize, nil
}

func (o *ApiSingleConnectionAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"actionTypeId",
		"actionId",
		"type",
		"actionTypeVersion",
		"fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiSingleConnectionAction := _ApiSingleConnectionAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiSingleConnectionAction)

	if err != nil {
		return err
	}

	*o = ApiSingleConnectionAction(varApiSingleConnectionAction)

	return err
}

type NullableApiSingleConnectionAction struct {
	value *ApiSingleConnectionAction
	isSet bool
}

func (v NullableApiSingleConnectionAction) Get() *ApiSingleConnectionAction {
	return v.value
}

func (v *NullableApiSingleConnectionAction) Set(val *ApiSingleConnectionAction) {
	v.value = val
	v.isSet = true
}

func (v NullableApiSingleConnectionAction) IsSet() bool {
	return v.isSet
}

func (v *NullableApiSingleConnectionAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiSingleConnectionAction(val *ApiSingleConnectionAction) *NullableApiSingleConnectionAction {
	return &NullableApiSingleConnectionAction{value: val, isSet: true}
}

func (v NullableApiSingleConnectionAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiSingleConnectionAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


