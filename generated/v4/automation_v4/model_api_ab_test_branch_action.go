/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiABTestBranchAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiABTestBranchAction{}

// ApiABTestBranchAction struct for ApiABTestBranchAction
type ApiABTestBranchAction struct {
	TestBranches []ApiConnection `json:"testBranches"`
	// The ID for this action.
	ActionId string `json:"actionId"`
	// The type of action this is, can be: \"STATIC_BRANCH\", \"LIST_BRANCH\", \"AB_TEST_BRANCH\", \"CUSTOM_CODE\", \"WEBHOOK\", or \"SINGLE_CONNECTION\"
	Type string `json:"type"`
}

type _ApiABTestBranchAction ApiABTestBranchAction

// NewApiABTestBranchAction instantiates a new ApiABTestBranchAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiABTestBranchAction(testBranches []ApiConnection, actionId string, type_ string) *ApiABTestBranchAction {
	this := ApiABTestBranchAction{}
	this.TestBranches = testBranches
	this.ActionId = actionId
	this.Type = type_
	return &this
}

// NewApiABTestBranchActionWithDefaults instantiates a new ApiABTestBranchAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiABTestBranchActionWithDefaults() *ApiABTestBranchAction {
	this := ApiABTestBranchAction{}
	var type_ string = "AB_TEST_BRANCH"
	this.Type = type_
	return &this
}

// GetTestBranches returns the TestBranches field value
func (o *ApiABTestBranchAction) GetTestBranches() []ApiConnection {
	if o == nil {
		var ret []ApiConnection
		return ret
	}

	return o.TestBranches
}

// GetTestBranchesOk returns a tuple with the TestBranches field value
// and a boolean to check if the value has been set.
func (o *ApiABTestBranchAction) GetTestBranchesOk() ([]ApiConnection, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestBranches, true
}

// SetTestBranches sets field value
func (o *ApiABTestBranchAction) SetTestBranches(v []ApiConnection) {
	o.TestBranches = v
}

// GetActionId returns the ActionId field value
func (o *ApiABTestBranchAction) GetActionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value
// and a boolean to check if the value has been set.
func (o *ApiABTestBranchAction) GetActionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionId, true
}

// SetActionId sets field value
func (o *ApiABTestBranchAction) SetActionId(v string) {
	o.ActionId = v
}

// GetType returns the Type field value
func (o *ApiABTestBranchAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApiABTestBranchAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApiABTestBranchAction) SetType(v string) {
	o.Type = v
}

func (o ApiABTestBranchAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiABTestBranchAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["testBranches"] = o.TestBranches
	toSerialize["actionId"] = o.ActionId
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ApiABTestBranchAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"testBranches",
		"actionId",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiABTestBranchAction := _ApiABTestBranchAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiABTestBranchAction)

	if err != nil {
		return err
	}

	*o = ApiABTestBranchAction(varApiABTestBranchAction)

	return err
}

type NullableApiABTestBranchAction struct {
	value *ApiABTestBranchAction
	isSet bool
}

func (v NullableApiABTestBranchAction) Get() *ApiABTestBranchAction {
	return v.value
}

func (v *NullableApiABTestBranchAction) Set(val *ApiABTestBranchAction) {
	v.value = val
	v.isSet = true
}

func (v NullableApiABTestBranchAction) IsSet() bool {
	return v.isSet
}

func (v *NullableApiABTestBranchAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiABTestBranchAction(val *ApiABTestBranchAction) *NullableApiABTestBranchAction {
	return &NullableApiABTestBranchAction{value: val, isSet: true}
}

func (v NullableApiABTestBranchAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiABTestBranchAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


