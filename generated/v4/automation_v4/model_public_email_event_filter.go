/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicEmailEventFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicEmailEventFilter{}

// PublicEmailEventFilter struct for PublicEmailEventFilter
type PublicEmailEventFilter struct {
	ClickUrl *string `json:"clickUrl,omitempty"`
	Level string `json:"level"`
	PruningRefineBy *PublicFormSubmissionFilterCoalescingRefineBy `json:"pruningRefineBy,omitempty"`
	AppId string `json:"appId"`
	EmailId string `json:"emailId"`
	FilterType string `json:"filterType"`
	Operator string `json:"operator"`
}

type _PublicEmailEventFilter PublicEmailEventFilter

// NewPublicEmailEventFilter instantiates a new PublicEmailEventFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicEmailEventFilter(level string, appId string, emailId string, filterType string, operator string) *PublicEmailEventFilter {
	this := PublicEmailEventFilter{}
	this.Level = level
	this.AppId = appId
	this.EmailId = emailId
	this.FilterType = filterType
	this.Operator = operator
	return &this
}

// NewPublicEmailEventFilterWithDefaults instantiates a new PublicEmailEventFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicEmailEventFilterWithDefaults() *PublicEmailEventFilter {
	this := PublicEmailEventFilter{}
	var filterType string = "EMAIL_EVENT"
	this.FilterType = filterType
	return &this
}

// GetClickUrl returns the ClickUrl field value if set, zero value otherwise.
func (o *PublicEmailEventFilter) GetClickUrl() string {
	if o == nil || IsNil(o.ClickUrl) {
		var ret string
		return ret
	}
	return *o.ClickUrl
}

// GetClickUrlOk returns a tuple with the ClickUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmailEventFilter) GetClickUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ClickUrl) {
		return nil, false
	}
	return o.ClickUrl, true
}

// HasClickUrl returns a boolean if a field has been set.
func (o *PublicEmailEventFilter) HasClickUrl() bool {
	if o != nil && !IsNil(o.ClickUrl) {
		return true
	}

	return false
}

// SetClickUrl gets a reference to the given string and assigns it to the ClickUrl field.
func (o *PublicEmailEventFilter) SetClickUrl(v string) {
	o.ClickUrl = &v
}

// GetLevel returns the Level field value
func (o *PublicEmailEventFilter) GetLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *PublicEmailEventFilter) GetLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *PublicEmailEventFilter) SetLevel(v string) {
	o.Level = v
}

// GetPruningRefineBy returns the PruningRefineBy field value if set, zero value otherwise.
func (o *PublicEmailEventFilter) GetPruningRefineBy() PublicFormSubmissionFilterCoalescingRefineBy {
	if o == nil || IsNil(o.PruningRefineBy) {
		var ret PublicFormSubmissionFilterCoalescingRefineBy
		return ret
	}
	return *o.PruningRefineBy
}

// GetPruningRefineByOk returns a tuple with the PruningRefineBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmailEventFilter) GetPruningRefineByOk() (*PublicFormSubmissionFilterCoalescingRefineBy, bool) {
	if o == nil || IsNil(o.PruningRefineBy) {
		return nil, false
	}
	return o.PruningRefineBy, true
}

// HasPruningRefineBy returns a boolean if a field has been set.
func (o *PublicEmailEventFilter) HasPruningRefineBy() bool {
	if o != nil && !IsNil(o.PruningRefineBy) {
		return true
	}

	return false
}

// SetPruningRefineBy gets a reference to the given PublicFormSubmissionFilterCoalescingRefineBy and assigns it to the PruningRefineBy field.
func (o *PublicEmailEventFilter) SetPruningRefineBy(v PublicFormSubmissionFilterCoalescingRefineBy) {
	o.PruningRefineBy = &v
}

// GetAppId returns the AppId field value
func (o *PublicEmailEventFilter) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *PublicEmailEventFilter) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *PublicEmailEventFilter) SetAppId(v string) {
	o.AppId = v
}

// GetEmailId returns the EmailId field value
func (o *PublicEmailEventFilter) GetEmailId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailId
}

// GetEmailIdOk returns a tuple with the EmailId field value
// and a boolean to check if the value has been set.
func (o *PublicEmailEventFilter) GetEmailIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailId, true
}

// SetEmailId sets field value
func (o *PublicEmailEventFilter) SetEmailId(v string) {
	o.EmailId = v
}

// GetFilterType returns the FilterType field value
func (o *PublicEmailEventFilter) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *PublicEmailEventFilter) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *PublicEmailEventFilter) SetFilterType(v string) {
	o.FilterType = v
}

// GetOperator returns the Operator field value
func (o *PublicEmailEventFilter) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *PublicEmailEventFilter) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *PublicEmailEventFilter) SetOperator(v string) {
	o.Operator = v
}

func (o PublicEmailEventFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicEmailEventFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClickUrl) {
		toSerialize["clickUrl"] = o.ClickUrl
	}
	toSerialize["level"] = o.Level
	if !IsNil(o.PruningRefineBy) {
		toSerialize["pruningRefineBy"] = o.PruningRefineBy
	}
	toSerialize["appId"] = o.AppId
	toSerialize["emailId"] = o.EmailId
	toSerialize["filterType"] = o.FilterType
	toSerialize["operator"] = o.Operator
	return toSerialize, nil
}

func (o *PublicEmailEventFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"level",
		"appId",
		"emailId",
		"filterType",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicEmailEventFilter := _PublicEmailEventFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicEmailEventFilter)

	if err != nil {
		return err
	}

	*o = PublicEmailEventFilter(varPublicEmailEventFilter)

	return err
}

type NullablePublicEmailEventFilter struct {
	value *PublicEmailEventFilter
	isSet bool
}

func (v NullablePublicEmailEventFilter) Get() *PublicEmailEventFilter {
	return v.value
}

func (v *NullablePublicEmailEventFilter) Set(val *PublicEmailEventFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicEmailEventFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicEmailEventFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicEmailEventFilter(val *PublicEmailEventFilter) *NullablePublicEmailEventFilter {
	return &NullablePublicEmailEventFilter{value: val, isSet: true}
}

func (v NullablePublicEmailEventFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicEmailEventFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


