/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicRelativeRangedTimestampRefineBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicRelativeRangedTimestampRefineBy{}

// PublicRelativeRangedTimestampRefineBy struct for PublicRelativeRangedTimestampRefineBy
type PublicRelativeRangedTimestampRefineBy struct {
	UpperBoundOffset PublicTimeOffset `json:"upperBoundOffset"`
	RangeType string `json:"rangeType"`
	LowerBoundOffset PublicTimeOffset `json:"lowerBoundOffset"`
	Type string `json:"type"`
}

type _PublicRelativeRangedTimestampRefineBy PublicRelativeRangedTimestampRefineBy

// NewPublicRelativeRangedTimestampRefineBy instantiates a new PublicRelativeRangedTimestampRefineBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicRelativeRangedTimestampRefineBy(upperBoundOffset PublicTimeOffset, rangeType string, lowerBoundOffset PublicTimeOffset, type_ string) *PublicRelativeRangedTimestampRefineBy {
	this := PublicRelativeRangedTimestampRefineBy{}
	this.UpperBoundOffset = upperBoundOffset
	this.RangeType = rangeType
	this.LowerBoundOffset = lowerBoundOffset
	this.Type = type_
	return &this
}

// NewPublicRelativeRangedTimestampRefineByWithDefaults instantiates a new PublicRelativeRangedTimestampRefineBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicRelativeRangedTimestampRefineByWithDefaults() *PublicRelativeRangedTimestampRefineBy {
	this := PublicRelativeRangedTimestampRefineBy{}
	var type_ string = "RELATIVE_RANGED"
	this.Type = type_
	return &this
}

// GetUpperBoundOffset returns the UpperBoundOffset field value
func (o *PublicRelativeRangedTimestampRefineBy) GetUpperBoundOffset() PublicTimeOffset {
	if o == nil {
		var ret PublicTimeOffset
		return ret
	}

	return o.UpperBoundOffset
}

// GetUpperBoundOffsetOk returns a tuple with the UpperBoundOffset field value
// and a boolean to check if the value has been set.
func (o *PublicRelativeRangedTimestampRefineBy) GetUpperBoundOffsetOk() (*PublicTimeOffset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpperBoundOffset, true
}

// SetUpperBoundOffset sets field value
func (o *PublicRelativeRangedTimestampRefineBy) SetUpperBoundOffset(v PublicTimeOffset) {
	o.UpperBoundOffset = v
}

// GetRangeType returns the RangeType field value
func (o *PublicRelativeRangedTimestampRefineBy) GetRangeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RangeType
}

// GetRangeTypeOk returns a tuple with the RangeType field value
// and a boolean to check if the value has been set.
func (o *PublicRelativeRangedTimestampRefineBy) GetRangeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RangeType, true
}

// SetRangeType sets field value
func (o *PublicRelativeRangedTimestampRefineBy) SetRangeType(v string) {
	o.RangeType = v
}

// GetLowerBoundOffset returns the LowerBoundOffset field value
func (o *PublicRelativeRangedTimestampRefineBy) GetLowerBoundOffset() PublicTimeOffset {
	if o == nil {
		var ret PublicTimeOffset
		return ret
	}

	return o.LowerBoundOffset
}

// GetLowerBoundOffsetOk returns a tuple with the LowerBoundOffset field value
// and a boolean to check if the value has been set.
func (o *PublicRelativeRangedTimestampRefineBy) GetLowerBoundOffsetOk() (*PublicTimeOffset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowerBoundOffset, true
}

// SetLowerBoundOffset sets field value
func (o *PublicRelativeRangedTimestampRefineBy) SetLowerBoundOffset(v PublicTimeOffset) {
	o.LowerBoundOffset = v
}

// GetType returns the Type field value
func (o *PublicRelativeRangedTimestampRefineBy) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PublicRelativeRangedTimestampRefineBy) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PublicRelativeRangedTimestampRefineBy) SetType(v string) {
	o.Type = v
}

func (o PublicRelativeRangedTimestampRefineBy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicRelativeRangedTimestampRefineBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["upperBoundOffset"] = o.UpperBoundOffset
	toSerialize["rangeType"] = o.RangeType
	toSerialize["lowerBoundOffset"] = o.LowerBoundOffset
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *PublicRelativeRangedTimestampRefineBy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"upperBoundOffset",
		"rangeType",
		"lowerBoundOffset",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicRelativeRangedTimestampRefineBy := _PublicRelativeRangedTimestampRefineBy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicRelativeRangedTimestampRefineBy)

	if err != nil {
		return err
	}

	*o = PublicRelativeRangedTimestampRefineBy(varPublicRelativeRangedTimestampRefineBy)

	return err
}

type NullablePublicRelativeRangedTimestampRefineBy struct {
	value *PublicRelativeRangedTimestampRefineBy
	isSet bool
}

func (v NullablePublicRelativeRangedTimestampRefineBy) Get() *PublicRelativeRangedTimestampRefineBy {
	return v.value
}

func (v *NullablePublicRelativeRangedTimestampRefineBy) Set(val *PublicRelativeRangedTimestampRefineBy) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicRelativeRangedTimestampRefineBy) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicRelativeRangedTimestampRefineBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicRelativeRangedTimestampRefineBy(val *PublicRelativeRangedTimestampRefineBy) *NullablePublicRelativeRangedTimestampRefineBy {
	return &NullablePublicRelativeRangedTimestampRefineBy{value: val, isSet: true}
}

func (v NullablePublicRelativeRangedTimestampRefineBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicRelativeRangedTimestampRefineBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


