/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiEnumerationOutputField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiEnumerationOutputField{}

// ApiEnumerationOutputField struct for ApiEnumerationOutputField
type ApiEnumerationOutputField struct {
	Name string `json:"name"`
	Options []string `json:"options"`
	Type string `json:"type"`
}

type _ApiEnumerationOutputField ApiEnumerationOutputField

// NewApiEnumerationOutputField instantiates a new ApiEnumerationOutputField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiEnumerationOutputField(name string, options []string, type_ string) *ApiEnumerationOutputField {
	this := ApiEnumerationOutputField{}
	this.Name = name
	this.Options = options
	this.Type = type_
	return &this
}

// NewApiEnumerationOutputFieldWithDefaults instantiates a new ApiEnumerationOutputField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiEnumerationOutputFieldWithDefaults() *ApiEnumerationOutputField {
	this := ApiEnumerationOutputField{}
	var type_ string = "ENUMERATION"
	this.Type = type_
	return &this
}

// GetName returns the Name field value
func (o *ApiEnumerationOutputField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiEnumerationOutputField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiEnumerationOutputField) SetName(v string) {
	o.Name = v
}

// GetOptions returns the Options field value
func (o *ApiEnumerationOutputField) GetOptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *ApiEnumerationOutputField) GetOptionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *ApiEnumerationOutputField) SetOptions(v []string) {
	o.Options = v
}

// GetType returns the Type field value
func (o *ApiEnumerationOutputField) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApiEnumerationOutputField) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApiEnumerationOutputField) SetType(v string) {
	o.Type = v
}

func (o ApiEnumerationOutputField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiEnumerationOutputField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["options"] = o.Options
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ApiEnumerationOutputField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"options",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiEnumerationOutputField := _ApiEnumerationOutputField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiEnumerationOutputField)

	if err != nil {
		return err
	}

	*o = ApiEnumerationOutputField(varApiEnumerationOutputField)

	return err
}

type NullableApiEnumerationOutputField struct {
	value *ApiEnumerationOutputField
	isSet bool
}

func (v NullableApiEnumerationOutputField) Get() *ApiEnumerationOutputField {
	return v.value
}

func (v *NullableApiEnumerationOutputField) Set(val *ApiEnumerationOutputField) {
	v.value = val
	v.isSet = true
}

func (v NullableApiEnumerationOutputField) IsSet() bool {
	return v.isSet
}

func (v *NullableApiEnumerationOutputField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiEnumerationOutputField(val *ApiEnumerationOutputField) *NullableApiEnumerationOutputField {
	return &NullableApiEnumerationOutputField{value: val, isSet: true}
}

func (v NullableApiEnumerationOutputField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiEnumerationOutputField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


