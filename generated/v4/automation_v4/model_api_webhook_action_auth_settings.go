/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ApiWebhookActionAuthSettings - The type of auth to use when calling the webhook endpoint.
type ApiWebhookActionAuthSettings struct {
	ApiAuthKeyWebhookAuthSettings *ApiAuthKeyWebhookAuthSettings
	ApiSignatureWebhookAuthSettings *ApiSignatureWebhookAuthSettings
}

// ApiAuthKeyWebhookAuthSettingsAsApiWebhookActionAuthSettings is a convenience function that returns ApiAuthKeyWebhookAuthSettings wrapped in ApiWebhookActionAuthSettings
func ApiAuthKeyWebhookAuthSettingsAsApiWebhookActionAuthSettings(v *ApiAuthKeyWebhookAuthSettings) ApiWebhookActionAuthSettings {
	return ApiWebhookActionAuthSettings{
		ApiAuthKeyWebhookAuthSettings: v,
	}
}

// ApiSignatureWebhookAuthSettingsAsApiWebhookActionAuthSettings is a convenience function that returns ApiSignatureWebhookAuthSettings wrapped in ApiWebhookActionAuthSettings
func ApiSignatureWebhookAuthSettingsAsApiWebhookActionAuthSettings(v *ApiSignatureWebhookAuthSettings) ApiWebhookActionAuthSettings {
	return ApiWebhookActionAuthSettings{
		ApiSignatureWebhookAuthSettings: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiWebhookActionAuthSettings) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiAuthKeyWebhookAuthSettings
	err = newStrictDecoder(data).Decode(&dst.ApiAuthKeyWebhookAuthSettings)
	if err == nil {
		jsonApiAuthKeyWebhookAuthSettings, _ := json.Marshal(dst.ApiAuthKeyWebhookAuthSettings)
		if string(jsonApiAuthKeyWebhookAuthSettings) == "{}" { // empty struct
			dst.ApiAuthKeyWebhookAuthSettings = nil
		} else {
			if err = validator.Validate(dst.ApiAuthKeyWebhookAuthSettings); err != nil {
				dst.ApiAuthKeyWebhookAuthSettings = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiAuthKeyWebhookAuthSettings = nil
	}

	// try to unmarshal data into ApiSignatureWebhookAuthSettings
	err = newStrictDecoder(data).Decode(&dst.ApiSignatureWebhookAuthSettings)
	if err == nil {
		jsonApiSignatureWebhookAuthSettings, _ := json.Marshal(dst.ApiSignatureWebhookAuthSettings)
		if string(jsonApiSignatureWebhookAuthSettings) == "{}" { // empty struct
			dst.ApiSignatureWebhookAuthSettings = nil
		} else {
			if err = validator.Validate(dst.ApiSignatureWebhookAuthSettings); err != nil {
				dst.ApiSignatureWebhookAuthSettings = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiSignatureWebhookAuthSettings = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiAuthKeyWebhookAuthSettings = nil
		dst.ApiSignatureWebhookAuthSettings = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApiWebhookActionAuthSettings)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApiWebhookActionAuthSettings)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiWebhookActionAuthSettings) MarshalJSON() ([]byte, error) {
	if src.ApiAuthKeyWebhookAuthSettings != nil {
		return json.Marshal(&src.ApiAuthKeyWebhookAuthSettings)
	}

	if src.ApiSignatureWebhookAuthSettings != nil {
		return json.Marshal(&src.ApiSignatureWebhookAuthSettings)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiWebhookActionAuthSettings) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApiAuthKeyWebhookAuthSettings != nil {
		return obj.ApiAuthKeyWebhookAuthSettings
	}

	if obj.ApiSignatureWebhookAuthSettings != nil {
		return obj.ApiSignatureWebhookAuthSettings
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ApiWebhookActionAuthSettings) GetActualInstanceValue() (interface{}) {
	if obj.ApiAuthKeyWebhookAuthSettings != nil {
		return *obj.ApiAuthKeyWebhookAuthSettings
	}

	if obj.ApiSignatureWebhookAuthSettings != nil {
		return *obj.ApiSignatureWebhookAuthSettings
	}

	// all schemas are nil
	return nil
}

type NullableApiWebhookActionAuthSettings struct {
	value *ApiWebhookActionAuthSettings
	isSet bool
}

func (v NullableApiWebhookActionAuthSettings) Get() *ApiWebhookActionAuthSettings {
	return v.value
}

func (v *NullableApiWebhookActionAuthSettings) Set(val *ApiWebhookActionAuthSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableApiWebhookActionAuthSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableApiWebhookActionAuthSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiWebhookActionAuthSettings(val *ApiWebhookActionAuthSettings) *NullableApiWebhookActionAuthSettings {
	return &NullableApiWebhookActionAuthSettings{value: val, isSet: true}
}

func (v NullableApiWebhookActionAuthSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiWebhookActionAuthSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


