/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PublicIndexedTimePointIndexReference - struct for PublicIndexedTimePointIndexReference
type PublicIndexedTimePointIndexReference struct {
	PublicFiscalQuarterReference *PublicFiscalQuarterReference
	PublicFiscalYearReference *PublicFiscalYearReference
	PublicMonthReference *PublicMonthReference
	PublicNowReference *PublicNowReference
	PublicQuarterReference *PublicQuarterReference
	PublicTodayReference *PublicTodayReference
	PublicWeekReference *PublicWeekReference
	PublicYearReference *PublicYearReference
}

// PublicFiscalQuarterReferenceAsPublicIndexedTimePointIndexReference is a convenience function that returns PublicFiscalQuarterReference wrapped in PublicIndexedTimePointIndexReference
func PublicFiscalQuarterReferenceAsPublicIndexedTimePointIndexReference(v *PublicFiscalQuarterReference) PublicIndexedTimePointIndexReference {
	return PublicIndexedTimePointIndexReference{
		PublicFiscalQuarterReference: v,
	}
}

// PublicFiscalYearReferenceAsPublicIndexedTimePointIndexReference is a convenience function that returns PublicFiscalYearReference wrapped in PublicIndexedTimePointIndexReference
func PublicFiscalYearReferenceAsPublicIndexedTimePointIndexReference(v *PublicFiscalYearReference) PublicIndexedTimePointIndexReference {
	return PublicIndexedTimePointIndexReference{
		PublicFiscalYearReference: v,
	}
}

// PublicMonthReferenceAsPublicIndexedTimePointIndexReference is a convenience function that returns PublicMonthReference wrapped in PublicIndexedTimePointIndexReference
func PublicMonthReferenceAsPublicIndexedTimePointIndexReference(v *PublicMonthReference) PublicIndexedTimePointIndexReference {
	return PublicIndexedTimePointIndexReference{
		PublicMonthReference: v,
	}
}

// PublicNowReferenceAsPublicIndexedTimePointIndexReference is a convenience function that returns PublicNowReference wrapped in PublicIndexedTimePointIndexReference
func PublicNowReferenceAsPublicIndexedTimePointIndexReference(v *PublicNowReference) PublicIndexedTimePointIndexReference {
	return PublicIndexedTimePointIndexReference{
		PublicNowReference: v,
	}
}

// PublicQuarterReferenceAsPublicIndexedTimePointIndexReference is a convenience function that returns PublicQuarterReference wrapped in PublicIndexedTimePointIndexReference
func PublicQuarterReferenceAsPublicIndexedTimePointIndexReference(v *PublicQuarterReference) PublicIndexedTimePointIndexReference {
	return PublicIndexedTimePointIndexReference{
		PublicQuarterReference: v,
	}
}

// PublicTodayReferenceAsPublicIndexedTimePointIndexReference is a convenience function that returns PublicTodayReference wrapped in PublicIndexedTimePointIndexReference
func PublicTodayReferenceAsPublicIndexedTimePointIndexReference(v *PublicTodayReference) PublicIndexedTimePointIndexReference {
	return PublicIndexedTimePointIndexReference{
		PublicTodayReference: v,
	}
}

// PublicWeekReferenceAsPublicIndexedTimePointIndexReference is a convenience function that returns PublicWeekReference wrapped in PublicIndexedTimePointIndexReference
func PublicWeekReferenceAsPublicIndexedTimePointIndexReference(v *PublicWeekReference) PublicIndexedTimePointIndexReference {
	return PublicIndexedTimePointIndexReference{
		PublicWeekReference: v,
	}
}

// PublicYearReferenceAsPublicIndexedTimePointIndexReference is a convenience function that returns PublicYearReference wrapped in PublicIndexedTimePointIndexReference
func PublicYearReferenceAsPublicIndexedTimePointIndexReference(v *PublicYearReference) PublicIndexedTimePointIndexReference {
	return PublicIndexedTimePointIndexReference{
		PublicYearReference: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PublicIndexedTimePointIndexReference) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PublicFiscalQuarterReference
	err = newStrictDecoder(data).Decode(&dst.PublicFiscalQuarterReference)
	if err == nil {
		jsonPublicFiscalQuarterReference, _ := json.Marshal(dst.PublicFiscalQuarterReference)
		if string(jsonPublicFiscalQuarterReference) == "{}" { // empty struct
			dst.PublicFiscalQuarterReference = nil
		} else {
			if err = validator.Validate(dst.PublicFiscalQuarterReference); err != nil {
				dst.PublicFiscalQuarterReference = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicFiscalQuarterReference = nil
	}

	// try to unmarshal data into PublicFiscalYearReference
	err = newStrictDecoder(data).Decode(&dst.PublicFiscalYearReference)
	if err == nil {
		jsonPublicFiscalYearReference, _ := json.Marshal(dst.PublicFiscalYearReference)
		if string(jsonPublicFiscalYearReference) == "{}" { // empty struct
			dst.PublicFiscalYearReference = nil
		} else {
			if err = validator.Validate(dst.PublicFiscalYearReference); err != nil {
				dst.PublicFiscalYearReference = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicFiscalYearReference = nil
	}

	// try to unmarshal data into PublicMonthReference
	err = newStrictDecoder(data).Decode(&dst.PublicMonthReference)
	if err == nil {
		jsonPublicMonthReference, _ := json.Marshal(dst.PublicMonthReference)
		if string(jsonPublicMonthReference) == "{}" { // empty struct
			dst.PublicMonthReference = nil
		} else {
			if err = validator.Validate(dst.PublicMonthReference); err != nil {
				dst.PublicMonthReference = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicMonthReference = nil
	}

	// try to unmarshal data into PublicNowReference
	err = newStrictDecoder(data).Decode(&dst.PublicNowReference)
	if err == nil {
		jsonPublicNowReference, _ := json.Marshal(dst.PublicNowReference)
		if string(jsonPublicNowReference) == "{}" { // empty struct
			dst.PublicNowReference = nil
		} else {
			if err = validator.Validate(dst.PublicNowReference); err != nil {
				dst.PublicNowReference = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicNowReference = nil
	}

	// try to unmarshal data into PublicQuarterReference
	err = newStrictDecoder(data).Decode(&dst.PublicQuarterReference)
	if err == nil {
		jsonPublicQuarterReference, _ := json.Marshal(dst.PublicQuarterReference)
		if string(jsonPublicQuarterReference) == "{}" { // empty struct
			dst.PublicQuarterReference = nil
		} else {
			if err = validator.Validate(dst.PublicQuarterReference); err != nil {
				dst.PublicQuarterReference = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicQuarterReference = nil
	}

	// try to unmarshal data into PublicTodayReference
	err = newStrictDecoder(data).Decode(&dst.PublicTodayReference)
	if err == nil {
		jsonPublicTodayReference, _ := json.Marshal(dst.PublicTodayReference)
		if string(jsonPublicTodayReference) == "{}" { // empty struct
			dst.PublicTodayReference = nil
		} else {
			if err = validator.Validate(dst.PublicTodayReference); err != nil {
				dst.PublicTodayReference = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicTodayReference = nil
	}

	// try to unmarshal data into PublicWeekReference
	err = newStrictDecoder(data).Decode(&dst.PublicWeekReference)
	if err == nil {
		jsonPublicWeekReference, _ := json.Marshal(dst.PublicWeekReference)
		if string(jsonPublicWeekReference) == "{}" { // empty struct
			dst.PublicWeekReference = nil
		} else {
			if err = validator.Validate(dst.PublicWeekReference); err != nil {
				dst.PublicWeekReference = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicWeekReference = nil
	}

	// try to unmarshal data into PublicYearReference
	err = newStrictDecoder(data).Decode(&dst.PublicYearReference)
	if err == nil {
		jsonPublicYearReference, _ := json.Marshal(dst.PublicYearReference)
		if string(jsonPublicYearReference) == "{}" { // empty struct
			dst.PublicYearReference = nil
		} else {
			if err = validator.Validate(dst.PublicYearReference); err != nil {
				dst.PublicYearReference = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicYearReference = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PublicFiscalQuarterReference = nil
		dst.PublicFiscalYearReference = nil
		dst.PublicMonthReference = nil
		dst.PublicNowReference = nil
		dst.PublicQuarterReference = nil
		dst.PublicTodayReference = nil
		dst.PublicWeekReference = nil
		dst.PublicYearReference = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PublicIndexedTimePointIndexReference)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PublicIndexedTimePointIndexReference)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PublicIndexedTimePointIndexReference) MarshalJSON() ([]byte, error) {
	if src.PublicFiscalQuarterReference != nil {
		return json.Marshal(&src.PublicFiscalQuarterReference)
	}

	if src.PublicFiscalYearReference != nil {
		return json.Marshal(&src.PublicFiscalYearReference)
	}

	if src.PublicMonthReference != nil {
		return json.Marshal(&src.PublicMonthReference)
	}

	if src.PublicNowReference != nil {
		return json.Marshal(&src.PublicNowReference)
	}

	if src.PublicQuarterReference != nil {
		return json.Marshal(&src.PublicQuarterReference)
	}

	if src.PublicTodayReference != nil {
		return json.Marshal(&src.PublicTodayReference)
	}

	if src.PublicWeekReference != nil {
		return json.Marshal(&src.PublicWeekReference)
	}

	if src.PublicYearReference != nil {
		return json.Marshal(&src.PublicYearReference)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PublicIndexedTimePointIndexReference) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PublicFiscalQuarterReference != nil {
		return obj.PublicFiscalQuarterReference
	}

	if obj.PublicFiscalYearReference != nil {
		return obj.PublicFiscalYearReference
	}

	if obj.PublicMonthReference != nil {
		return obj.PublicMonthReference
	}

	if obj.PublicNowReference != nil {
		return obj.PublicNowReference
	}

	if obj.PublicQuarterReference != nil {
		return obj.PublicQuarterReference
	}

	if obj.PublicTodayReference != nil {
		return obj.PublicTodayReference
	}

	if obj.PublicWeekReference != nil {
		return obj.PublicWeekReference
	}

	if obj.PublicYearReference != nil {
		return obj.PublicYearReference
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PublicIndexedTimePointIndexReference) GetActualInstanceValue() (interface{}) {
	if obj.PublicFiscalQuarterReference != nil {
		return *obj.PublicFiscalQuarterReference
	}

	if obj.PublicFiscalYearReference != nil {
		return *obj.PublicFiscalYearReference
	}

	if obj.PublicMonthReference != nil {
		return *obj.PublicMonthReference
	}

	if obj.PublicNowReference != nil {
		return *obj.PublicNowReference
	}

	if obj.PublicQuarterReference != nil {
		return *obj.PublicQuarterReference
	}

	if obj.PublicTodayReference != nil {
		return *obj.PublicTodayReference
	}

	if obj.PublicWeekReference != nil {
		return *obj.PublicWeekReference
	}

	if obj.PublicYearReference != nil {
		return *obj.PublicYearReference
	}

	// all schemas are nil
	return nil
}

type NullablePublicIndexedTimePointIndexReference struct {
	value *PublicIndexedTimePointIndexReference
	isSet bool
}

func (v NullablePublicIndexedTimePointIndexReference) Get() *PublicIndexedTimePointIndexReference {
	return v.value
}

func (v *NullablePublicIndexedTimePointIndexReference) Set(val *PublicIndexedTimePointIndexReference) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicIndexedTimePointIndexReference) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicIndexedTimePointIndexReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicIndexedTimePointIndexReference(val *PublicIndexedTimePointIndexReference) *NullablePublicIndexedTimePointIndexReference {
	return &NullablePublicIndexedTimePointIndexReference{value: val, isSet: true}
}

func (v NullablePublicIndexedTimePointIndexReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicIndexedTimePointIndexReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


