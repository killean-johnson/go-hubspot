/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiAppendObjectPropertyValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiAppendObjectPropertyValue{}

// ApiAppendObjectPropertyValue struct for ApiAppendObjectPropertyValue
type ApiAppendObjectPropertyValue struct {
	// This is the type of input value. This can be one of: \"FIELD_DATA\", \"OBJECT_PROPERTY\", \"STATIC_VALUE\", \"RELATIVE_DATETIME\", \"TIMESTAMP\", \"INCREMENT\", \"FETCHED_OBJECT_PROPERTY\", \"APPEND_OBJECT_PROPERTY\", \"STATIC_APPEND_VALUE\", \"ENROLLMENT_EVENT_PROPERTY\"
	Type string `json:"type"`
	// The name of the property to append data from
	AppendPropertyName string `json:"appendPropertyName"`
}

type _ApiAppendObjectPropertyValue ApiAppendObjectPropertyValue

// NewApiAppendObjectPropertyValue instantiates a new ApiAppendObjectPropertyValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAppendObjectPropertyValue(type_ string, appendPropertyName string) *ApiAppendObjectPropertyValue {
	this := ApiAppendObjectPropertyValue{}
	this.Type = type_
	this.AppendPropertyName = appendPropertyName
	return &this
}

// NewApiAppendObjectPropertyValueWithDefaults instantiates a new ApiAppendObjectPropertyValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAppendObjectPropertyValueWithDefaults() *ApiAppendObjectPropertyValue {
	this := ApiAppendObjectPropertyValue{}
	var type_ string = "APPEND_OBJECT_PROPERTY"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *ApiAppendObjectPropertyValue) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApiAppendObjectPropertyValue) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApiAppendObjectPropertyValue) SetType(v string) {
	o.Type = v
}

// GetAppendPropertyName returns the AppendPropertyName field value
func (o *ApiAppendObjectPropertyValue) GetAppendPropertyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppendPropertyName
}

// GetAppendPropertyNameOk returns a tuple with the AppendPropertyName field value
// and a boolean to check if the value has been set.
func (o *ApiAppendObjectPropertyValue) GetAppendPropertyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppendPropertyName, true
}

// SetAppendPropertyName sets field value
func (o *ApiAppendObjectPropertyValue) SetAppendPropertyName(v string) {
	o.AppendPropertyName = v
}

func (o ApiAppendObjectPropertyValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiAppendObjectPropertyValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["appendPropertyName"] = o.AppendPropertyName
	return toSerialize, nil
}

func (o *ApiAppendObjectPropertyValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"appendPropertyName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiAppendObjectPropertyValue := _ApiAppendObjectPropertyValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiAppendObjectPropertyValue)

	if err != nil {
		return err
	}

	*o = ApiAppendObjectPropertyValue(varApiAppendObjectPropertyValue)

	return err
}

type NullableApiAppendObjectPropertyValue struct {
	value *ApiAppendObjectPropertyValue
	isSet bool
}

func (v NullableApiAppendObjectPropertyValue) Get() *ApiAppendObjectPropertyValue {
	return v.value
}

func (v *NullableApiAppendObjectPropertyValue) Set(val *ApiAppendObjectPropertyValue) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAppendObjectPropertyValue) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAppendObjectPropertyValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAppendObjectPropertyValue(val *ApiAppendObjectPropertyValue) *NullableApiAppendObjectPropertyValue {
	return &NullableApiAppendObjectPropertyValue{value: val, isSet: true}
}

func (v NullableApiAppendObjectPropertyValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAppendObjectPropertyValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


