/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicConstantFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicConstantFilter{}

// PublicConstantFilter struct for PublicConstantFilter
type PublicConstantFilter struct {
	ShouldAccept bool `json:"shouldAccept"`
	Source *string `json:"source,omitempty"`
	FilterType string `json:"filterType"`
}

type _PublicConstantFilter PublicConstantFilter

// NewPublicConstantFilter instantiates a new PublicConstantFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicConstantFilter(shouldAccept bool, filterType string) *PublicConstantFilter {
	this := PublicConstantFilter{}
	this.ShouldAccept = shouldAccept
	this.FilterType = filterType
	return &this
}

// NewPublicConstantFilterWithDefaults instantiates a new PublicConstantFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicConstantFilterWithDefaults() *PublicConstantFilter {
	this := PublicConstantFilter{}
	var filterType string = "CONSTANT"
	this.FilterType = filterType
	return &this
}

// GetShouldAccept returns the ShouldAccept field value
func (o *PublicConstantFilter) GetShouldAccept() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ShouldAccept
}

// GetShouldAcceptOk returns a tuple with the ShouldAccept field value
// and a boolean to check if the value has been set.
func (o *PublicConstantFilter) GetShouldAcceptOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShouldAccept, true
}

// SetShouldAccept sets field value
func (o *PublicConstantFilter) SetShouldAccept(v bool) {
	o.ShouldAccept = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *PublicConstantFilter) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicConstantFilter) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *PublicConstantFilter) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *PublicConstantFilter) SetSource(v string) {
	o.Source = &v
}

// GetFilterType returns the FilterType field value
func (o *PublicConstantFilter) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *PublicConstantFilter) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *PublicConstantFilter) SetFilterType(v string) {
	o.FilterType = v
}

func (o PublicConstantFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicConstantFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["shouldAccept"] = o.ShouldAccept
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	toSerialize["filterType"] = o.FilterType
	return toSerialize, nil
}

func (o *PublicConstantFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"shouldAccept",
		"filterType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicConstantFilter := _PublicConstantFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicConstantFilter)

	if err != nil {
		return err
	}

	*o = PublicConstantFilter(varPublicConstantFilter)

	return err
}

type NullablePublicConstantFilter struct {
	value *PublicConstantFilter
	isSet bool
}

func (v NullablePublicConstantFilter) Get() *PublicConstantFilter {
	return v.value
}

func (v *NullablePublicConstantFilter) Set(val *PublicConstantFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicConstantFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicConstantFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicConstantFilter(val *PublicConstantFilter) *NullablePublicConstantFilter {
	return &NullablePublicConstantFilter{value: val, isSet: true}
}

func (v NullablePublicConstantFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicConstantFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


