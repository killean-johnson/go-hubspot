/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicFormSubmissionFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicFormSubmissionFilter{}

// PublicFormSubmissionFilter struct for PublicFormSubmissionFilter
type PublicFormSubmissionFilter struct {
	FormId *string `json:"formId,omitempty"`
	CoalescingRefineBy *PublicFormSubmissionFilterCoalescingRefineBy `json:"coalescingRefineBy,omitempty"`
	PruningRefineBy *PublicFormSubmissionFilterCoalescingRefineBy `json:"pruningRefineBy,omitempty"`
	FilterType string `json:"filterType"`
	Operator string `json:"operator"`
}

type _PublicFormSubmissionFilter PublicFormSubmissionFilter

// NewPublicFormSubmissionFilter instantiates a new PublicFormSubmissionFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicFormSubmissionFilter(filterType string, operator string) *PublicFormSubmissionFilter {
	this := PublicFormSubmissionFilter{}
	this.FilterType = filterType
	this.Operator = operator
	return &this
}

// NewPublicFormSubmissionFilterWithDefaults instantiates a new PublicFormSubmissionFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicFormSubmissionFilterWithDefaults() *PublicFormSubmissionFilter {
	this := PublicFormSubmissionFilter{}
	var filterType string = "FORM_SUBMISSION"
	this.FilterType = filterType
	return &this
}

// GetFormId returns the FormId field value if set, zero value otherwise.
func (o *PublicFormSubmissionFilter) GetFormId() string {
	if o == nil || IsNil(o.FormId) {
		var ret string
		return ret
	}
	return *o.FormId
}

// GetFormIdOk returns a tuple with the FormId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFormSubmissionFilter) GetFormIdOk() (*string, bool) {
	if o == nil || IsNil(o.FormId) {
		return nil, false
	}
	return o.FormId, true
}

// HasFormId returns a boolean if a field has been set.
func (o *PublicFormSubmissionFilter) HasFormId() bool {
	if o != nil && !IsNil(o.FormId) {
		return true
	}

	return false
}

// SetFormId gets a reference to the given string and assigns it to the FormId field.
func (o *PublicFormSubmissionFilter) SetFormId(v string) {
	o.FormId = &v
}

// GetCoalescingRefineBy returns the CoalescingRefineBy field value if set, zero value otherwise.
func (o *PublicFormSubmissionFilter) GetCoalescingRefineBy() PublicFormSubmissionFilterCoalescingRefineBy {
	if o == nil || IsNil(o.CoalescingRefineBy) {
		var ret PublicFormSubmissionFilterCoalescingRefineBy
		return ret
	}
	return *o.CoalescingRefineBy
}

// GetCoalescingRefineByOk returns a tuple with the CoalescingRefineBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFormSubmissionFilter) GetCoalescingRefineByOk() (*PublicFormSubmissionFilterCoalescingRefineBy, bool) {
	if o == nil || IsNil(o.CoalescingRefineBy) {
		return nil, false
	}
	return o.CoalescingRefineBy, true
}

// HasCoalescingRefineBy returns a boolean if a field has been set.
func (o *PublicFormSubmissionFilter) HasCoalescingRefineBy() bool {
	if o != nil && !IsNil(o.CoalescingRefineBy) {
		return true
	}

	return false
}

// SetCoalescingRefineBy gets a reference to the given PublicFormSubmissionFilterCoalescingRefineBy and assigns it to the CoalescingRefineBy field.
func (o *PublicFormSubmissionFilter) SetCoalescingRefineBy(v PublicFormSubmissionFilterCoalescingRefineBy) {
	o.CoalescingRefineBy = &v
}

// GetPruningRefineBy returns the PruningRefineBy field value if set, zero value otherwise.
func (o *PublicFormSubmissionFilter) GetPruningRefineBy() PublicFormSubmissionFilterCoalescingRefineBy {
	if o == nil || IsNil(o.PruningRefineBy) {
		var ret PublicFormSubmissionFilterCoalescingRefineBy
		return ret
	}
	return *o.PruningRefineBy
}

// GetPruningRefineByOk returns a tuple with the PruningRefineBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFormSubmissionFilter) GetPruningRefineByOk() (*PublicFormSubmissionFilterCoalescingRefineBy, bool) {
	if o == nil || IsNil(o.PruningRefineBy) {
		return nil, false
	}
	return o.PruningRefineBy, true
}

// HasPruningRefineBy returns a boolean if a field has been set.
func (o *PublicFormSubmissionFilter) HasPruningRefineBy() bool {
	if o != nil && !IsNil(o.PruningRefineBy) {
		return true
	}

	return false
}

// SetPruningRefineBy gets a reference to the given PublicFormSubmissionFilterCoalescingRefineBy and assigns it to the PruningRefineBy field.
func (o *PublicFormSubmissionFilter) SetPruningRefineBy(v PublicFormSubmissionFilterCoalescingRefineBy) {
	o.PruningRefineBy = &v
}

// GetFilterType returns the FilterType field value
func (o *PublicFormSubmissionFilter) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *PublicFormSubmissionFilter) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *PublicFormSubmissionFilter) SetFilterType(v string) {
	o.FilterType = v
}

// GetOperator returns the Operator field value
func (o *PublicFormSubmissionFilter) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *PublicFormSubmissionFilter) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *PublicFormSubmissionFilter) SetOperator(v string) {
	o.Operator = v
}

func (o PublicFormSubmissionFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicFormSubmissionFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FormId) {
		toSerialize["formId"] = o.FormId
	}
	if !IsNil(o.CoalescingRefineBy) {
		toSerialize["coalescingRefineBy"] = o.CoalescingRefineBy
	}
	if !IsNil(o.PruningRefineBy) {
		toSerialize["pruningRefineBy"] = o.PruningRefineBy
	}
	toSerialize["filterType"] = o.FilterType
	toSerialize["operator"] = o.Operator
	return toSerialize, nil
}

func (o *PublicFormSubmissionFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filterType",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicFormSubmissionFilter := _PublicFormSubmissionFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicFormSubmissionFilter)

	if err != nil {
		return err
	}

	*o = PublicFormSubmissionFilter(varPublicFormSubmissionFilter)

	return err
}

type NullablePublicFormSubmissionFilter struct {
	value *PublicFormSubmissionFilter
	isSet bool
}

func (v NullablePublicFormSubmissionFilter) Get() *PublicFormSubmissionFilter {
	return v.value
}

func (v *NullablePublicFormSubmissionFilter) Set(val *PublicFormSubmissionFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicFormSubmissionFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicFormSubmissionFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicFormSubmissionFilter(val *PublicFormSubmissionFilter) *NullablePublicFormSubmissionFilter {
	return &NullablePublicFormSubmissionFilter{value: val, isSet: true}
}

func (v NullablePublicFormSubmissionFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicFormSubmissionFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


