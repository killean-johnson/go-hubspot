/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiTimeWindow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiTimeWindow{}

// ApiTimeWindow struct for ApiTimeWindow
type ApiTimeWindow struct {
	StartTime ApiTimeOfDay `json:"startTime"`
	EndTime ApiTimeOfDay `json:"endTime"`
	Day string `json:"day"`
}

type _ApiTimeWindow ApiTimeWindow

// NewApiTimeWindow instantiates a new ApiTimeWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTimeWindow(startTime ApiTimeOfDay, endTime ApiTimeOfDay, day string) *ApiTimeWindow {
	this := ApiTimeWindow{}
	this.StartTime = startTime
	this.EndTime = endTime
	this.Day = day
	return &this
}

// NewApiTimeWindowWithDefaults instantiates a new ApiTimeWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTimeWindowWithDefaults() *ApiTimeWindow {
	this := ApiTimeWindow{}
	return &this
}

// GetStartTime returns the StartTime field value
func (o *ApiTimeWindow) GetStartTime() ApiTimeOfDay {
	if o == nil {
		var ret ApiTimeOfDay
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *ApiTimeWindow) GetStartTimeOk() (*ApiTimeOfDay, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *ApiTimeWindow) SetStartTime(v ApiTimeOfDay) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *ApiTimeWindow) GetEndTime() ApiTimeOfDay {
	if o == nil {
		var ret ApiTimeOfDay
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *ApiTimeWindow) GetEndTimeOk() (*ApiTimeOfDay, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *ApiTimeWindow) SetEndTime(v ApiTimeOfDay) {
	o.EndTime = v
}

// GetDay returns the Day field value
func (o *ApiTimeWindow) GetDay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Day
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
func (o *ApiTimeWindow) GetDayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Day, true
}

// SetDay sets field value
func (o *ApiTimeWindow) SetDay(v string) {
	o.Day = v
}

func (o ApiTimeWindow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiTimeWindow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	toSerialize["day"] = o.Day
	return toSerialize, nil
}

func (o *ApiTimeWindow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startTime",
		"endTime",
		"day",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiTimeWindow := _ApiTimeWindow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiTimeWindow)

	if err != nil {
		return err
	}

	*o = ApiTimeWindow(varApiTimeWindow)

	return err
}

type NullableApiTimeWindow struct {
	value *ApiTimeWindow
	isSet bool
}

func (v NullableApiTimeWindow) Get() *ApiTimeWindow {
	return v.value
}

func (v *NullableApiTimeWindow) Set(val *ApiTimeWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTimeWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTimeWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTimeWindow(val *ApiTimeWindow) *NullableApiTimeWindow {
	return &NullableApiTimeWindow{value: val, isSet: true}
}

func (v NullableApiTimeWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTimeWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


