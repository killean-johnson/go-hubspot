/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ApiFlow - struct for ApiFlow
type ApiFlow struct {
	ApiContactFlow *ApiContactFlow
	ApiPlatformFlow *ApiPlatformFlow
}

// ApiContactFlowAsApiFlow is a convenience function that returns ApiContactFlow wrapped in ApiFlow
func ApiContactFlowAsApiFlow(v *ApiContactFlow) ApiFlow {
	return ApiFlow{
		ApiContactFlow: v,
	}
}

// ApiPlatformFlowAsApiFlow is a convenience function that returns ApiPlatformFlow wrapped in ApiFlow
func ApiPlatformFlowAsApiFlow(v *ApiPlatformFlow) ApiFlow {
	return ApiFlow{
		ApiPlatformFlow: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiFlow) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiContactFlow
	err = newStrictDecoder(data).Decode(&dst.ApiContactFlow)
	if err == nil {
		jsonApiContactFlow, _ := json.Marshal(dst.ApiContactFlow)
		if string(jsonApiContactFlow) == "{}" { // empty struct
			dst.ApiContactFlow = nil
		} else {
			if err = validator.Validate(dst.ApiContactFlow); err != nil {
				dst.ApiContactFlow = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiContactFlow = nil
	}

	// try to unmarshal data into ApiPlatformFlow
	err = newStrictDecoder(data).Decode(&dst.ApiPlatformFlow)
	if err == nil {
		jsonApiPlatformFlow, _ := json.Marshal(dst.ApiPlatformFlow)
		if string(jsonApiPlatformFlow) == "{}" { // empty struct
			dst.ApiPlatformFlow = nil
		} else {
			if err = validator.Validate(dst.ApiPlatformFlow); err != nil {
				dst.ApiPlatformFlow = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiPlatformFlow = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiContactFlow = nil
		dst.ApiPlatformFlow = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApiFlow)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApiFlow)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiFlow) MarshalJSON() ([]byte, error) {
	if src.ApiContactFlow != nil {
		return json.Marshal(&src.ApiContactFlow)
	}

	if src.ApiPlatformFlow != nil {
		return json.Marshal(&src.ApiPlatformFlow)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiFlow) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApiContactFlow != nil {
		return obj.ApiContactFlow
	}

	if obj.ApiPlatformFlow != nil {
		return obj.ApiPlatformFlow
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ApiFlow) GetActualInstanceValue() (interface{}) {
	if obj.ApiContactFlow != nil {
		return *obj.ApiContactFlow
	}

	if obj.ApiPlatformFlow != nil {
		return *obj.ApiPlatformFlow
	}

	// all schemas are nil
	return nil
}

type NullableApiFlow struct {
	value *ApiFlow
	isSet bool
}

func (v NullableApiFlow) Get() *ApiFlow {
	return v.value
}

func (v *NullableApiFlow) Set(val *ApiFlow) {
	v.value = val
	v.isSet = true
}

func (v NullableApiFlow) IsSet() bool {
	return v.isSet
}

func (v *NullableApiFlow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiFlow(val *ApiFlow) *NullableApiFlow {
	return &NullableApiFlow{value: val, isSet: true}
}

func (v NullableApiFlow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiFlow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


