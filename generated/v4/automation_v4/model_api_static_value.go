/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiStaticValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiStaticValue{}

// ApiStaticValue struct for ApiStaticValue
type ApiStaticValue struct {
	// A static value to use as the input
	StaticValue string `json:"staticValue"`
	// This is the type of input value. This can be one of: \"FIELD_DATA\", \"OBJECT_PROPERTY\", \"STATIC_VALUE\", \"RELATIVE_DATETIME\", \"TIMESTAMP\", \"INCREMENT\", \"FETCHED_OBJECT_PROPERTY\", \"APPEND_OBJECT_PROPERTY\", \"STATIC_APPEND_VALUE\", \"ENROLLMENT_EVENT_PROPERTY\"
	Type string `json:"type"`
}

type _ApiStaticValue ApiStaticValue

// NewApiStaticValue instantiates a new ApiStaticValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiStaticValue(staticValue string, type_ string) *ApiStaticValue {
	this := ApiStaticValue{}
	this.StaticValue = staticValue
	this.Type = type_
	return &this
}

// NewApiStaticValueWithDefaults instantiates a new ApiStaticValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiStaticValueWithDefaults() *ApiStaticValue {
	this := ApiStaticValue{}
	var type_ string = "STATIC_VALUE"
	this.Type = type_
	return &this
}

// GetStaticValue returns the StaticValue field value
func (o *ApiStaticValue) GetStaticValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StaticValue
}

// GetStaticValueOk returns a tuple with the StaticValue field value
// and a boolean to check if the value has been set.
func (o *ApiStaticValue) GetStaticValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaticValue, true
}

// SetStaticValue sets field value
func (o *ApiStaticValue) SetStaticValue(v string) {
	o.StaticValue = v
}

// GetType returns the Type field value
func (o *ApiStaticValue) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApiStaticValue) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApiStaticValue) SetType(v string) {
	o.Type = v
}

func (o ApiStaticValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiStaticValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["staticValue"] = o.StaticValue
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ApiStaticValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"staticValue",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiStaticValue := _ApiStaticValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiStaticValue)

	if err != nil {
		return err
	}

	*o = ApiStaticValue(varApiStaticValue)

	return err
}

type NullableApiStaticValue struct {
	value *ApiStaticValue
	isSet bool
}

func (v NullableApiStaticValue) Get() *ApiStaticValue {
	return v.value
}

func (v *NullableApiStaticValue) Set(val *ApiStaticValue) {
	v.value = val
	v.isSet = true
}

func (v NullableApiStaticValue) IsSet() bool {
	return v.isSet
}

func (v *NullableApiStaticValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiStaticValue(val *ApiStaticValue) *NullableApiStaticValue {
	return &NullableApiStaticValue{value: val, isSet: true}
}

func (v NullableApiStaticValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiStaticValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


