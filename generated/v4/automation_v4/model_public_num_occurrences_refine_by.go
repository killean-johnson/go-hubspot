/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicNumOccurrencesRefineBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicNumOccurrencesRefineBy{}

// PublicNumOccurrencesRefineBy struct for PublicNumOccurrencesRefineBy
type PublicNumOccurrencesRefineBy struct {
	MaxOccurrences *int32 `json:"maxOccurrences,omitempty"`
	Type string `json:"type"`
	MinOccurrences *int32 `json:"minOccurrences,omitempty"`
}

type _PublicNumOccurrencesRefineBy PublicNumOccurrencesRefineBy

// NewPublicNumOccurrencesRefineBy instantiates a new PublicNumOccurrencesRefineBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicNumOccurrencesRefineBy(type_ string) *PublicNumOccurrencesRefineBy {
	this := PublicNumOccurrencesRefineBy{}
	this.Type = type_
	return &this
}

// NewPublicNumOccurrencesRefineByWithDefaults instantiates a new PublicNumOccurrencesRefineBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicNumOccurrencesRefineByWithDefaults() *PublicNumOccurrencesRefineBy {
	this := PublicNumOccurrencesRefineBy{}
	var type_ string = "NUM_OCCURRENCES"
	this.Type = type_
	return &this
}

// GetMaxOccurrences returns the MaxOccurrences field value if set, zero value otherwise.
func (o *PublicNumOccurrencesRefineBy) GetMaxOccurrences() int32 {
	if o == nil || IsNil(o.MaxOccurrences) {
		var ret int32
		return ret
	}
	return *o.MaxOccurrences
}

// GetMaxOccurrencesOk returns a tuple with the MaxOccurrences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicNumOccurrencesRefineBy) GetMaxOccurrencesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxOccurrences) {
		return nil, false
	}
	return o.MaxOccurrences, true
}

// HasMaxOccurrences returns a boolean if a field has been set.
func (o *PublicNumOccurrencesRefineBy) HasMaxOccurrences() bool {
	if o != nil && !IsNil(o.MaxOccurrences) {
		return true
	}

	return false
}

// SetMaxOccurrences gets a reference to the given int32 and assigns it to the MaxOccurrences field.
func (o *PublicNumOccurrencesRefineBy) SetMaxOccurrences(v int32) {
	o.MaxOccurrences = &v
}

// GetType returns the Type field value
func (o *PublicNumOccurrencesRefineBy) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PublicNumOccurrencesRefineBy) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PublicNumOccurrencesRefineBy) SetType(v string) {
	o.Type = v
}

// GetMinOccurrences returns the MinOccurrences field value if set, zero value otherwise.
func (o *PublicNumOccurrencesRefineBy) GetMinOccurrences() int32 {
	if o == nil || IsNil(o.MinOccurrences) {
		var ret int32
		return ret
	}
	return *o.MinOccurrences
}

// GetMinOccurrencesOk returns a tuple with the MinOccurrences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicNumOccurrencesRefineBy) GetMinOccurrencesOk() (*int32, bool) {
	if o == nil || IsNil(o.MinOccurrences) {
		return nil, false
	}
	return o.MinOccurrences, true
}

// HasMinOccurrences returns a boolean if a field has been set.
func (o *PublicNumOccurrencesRefineBy) HasMinOccurrences() bool {
	if o != nil && !IsNil(o.MinOccurrences) {
		return true
	}

	return false
}

// SetMinOccurrences gets a reference to the given int32 and assigns it to the MinOccurrences field.
func (o *PublicNumOccurrencesRefineBy) SetMinOccurrences(v int32) {
	o.MinOccurrences = &v
}

func (o PublicNumOccurrencesRefineBy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicNumOccurrencesRefineBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxOccurrences) {
		toSerialize["maxOccurrences"] = o.MaxOccurrences
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.MinOccurrences) {
		toSerialize["minOccurrences"] = o.MinOccurrences
	}
	return toSerialize, nil
}

func (o *PublicNumOccurrencesRefineBy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicNumOccurrencesRefineBy := _PublicNumOccurrencesRefineBy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicNumOccurrencesRefineBy)

	if err != nil {
		return err
	}

	*o = PublicNumOccurrencesRefineBy(varPublicNumOccurrencesRefineBy)

	return err
}

type NullablePublicNumOccurrencesRefineBy struct {
	value *PublicNumOccurrencesRefineBy
	isSet bool
}

func (v NullablePublicNumOccurrencesRefineBy) Get() *PublicNumOccurrencesRefineBy {
	return v.value
}

func (v *NullablePublicNumOccurrencesRefineBy) Set(val *PublicNumOccurrencesRefineBy) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicNumOccurrencesRefineBy) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicNumOccurrencesRefineBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicNumOccurrencesRefineBy(val *PublicNumOccurrencesRefineBy) *NullablePublicNumOccurrencesRefineBy {
	return &NullablePublicNumOccurrencesRefineBy{value: val, isSet: true}
}

func (v NullablePublicNumOccurrencesRefineBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicNumOccurrencesRefineBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


