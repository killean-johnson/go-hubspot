/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
)

// checks if the ApiListBranch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiListBranch{}

// ApiListBranch struct for ApiListBranch
type ApiListBranch struct {
	// The name of this branch
	BranchName *string `json:"branchName,omitempty"`
	Connection *ApiConnection `json:"connection,omitempty"`
	FilterBranch *ApiListBranchFilterBranch `json:"filterBranch,omitempty"`
}

// NewApiListBranch instantiates a new ApiListBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiListBranch() *ApiListBranch {
	this := ApiListBranch{}
	return &this
}

// NewApiListBranchWithDefaults instantiates a new ApiListBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiListBranchWithDefaults() *ApiListBranch {
	this := ApiListBranch{}
	return &this
}

// GetBranchName returns the BranchName field value if set, zero value otherwise.
func (o *ApiListBranch) GetBranchName() string {
	if o == nil || IsNil(o.BranchName) {
		var ret string
		return ret
	}
	return *o.BranchName
}

// GetBranchNameOk returns a tuple with the BranchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiListBranch) GetBranchNameOk() (*string, bool) {
	if o == nil || IsNil(o.BranchName) {
		return nil, false
	}
	return o.BranchName, true
}

// HasBranchName returns a boolean if a field has been set.
func (o *ApiListBranch) HasBranchName() bool {
	if o != nil && !IsNil(o.BranchName) {
		return true
	}

	return false
}

// SetBranchName gets a reference to the given string and assigns it to the BranchName field.
func (o *ApiListBranch) SetBranchName(v string) {
	o.BranchName = &v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *ApiListBranch) GetConnection() ApiConnection {
	if o == nil || IsNil(o.Connection) {
		var ret ApiConnection
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiListBranch) GetConnectionOk() (*ApiConnection, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *ApiListBranch) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given ApiConnection and assigns it to the Connection field.
func (o *ApiListBranch) SetConnection(v ApiConnection) {
	o.Connection = &v
}

// GetFilterBranch returns the FilterBranch field value if set, zero value otherwise.
func (o *ApiListBranch) GetFilterBranch() ApiListBranchFilterBranch {
	if o == nil || IsNil(o.FilterBranch) {
		var ret ApiListBranchFilterBranch
		return ret
	}
	return *o.FilterBranch
}

// GetFilterBranchOk returns a tuple with the FilterBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiListBranch) GetFilterBranchOk() (*ApiListBranchFilterBranch, bool) {
	if o == nil || IsNil(o.FilterBranch) {
		return nil, false
	}
	return o.FilterBranch, true
}

// HasFilterBranch returns a boolean if a field has been set.
func (o *ApiListBranch) HasFilterBranch() bool {
	if o != nil && !IsNil(o.FilterBranch) {
		return true
	}

	return false
}

// SetFilterBranch gets a reference to the given ApiListBranchFilterBranch and assigns it to the FilterBranch field.
func (o *ApiListBranch) SetFilterBranch(v ApiListBranchFilterBranch) {
	o.FilterBranch = &v
}

func (o ApiListBranch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiListBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BranchName) {
		toSerialize["branchName"] = o.BranchName
	}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	if !IsNil(o.FilterBranch) {
		toSerialize["filterBranch"] = o.FilterBranch
	}
	return toSerialize, nil
}

type NullableApiListBranch struct {
	value *ApiListBranch
	isSet bool
}

func (v NullableApiListBranch) Get() *ApiListBranch {
	return v.value
}

func (v *NullableApiListBranch) Set(val *ApiListBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableApiListBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableApiListBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiListBranch(val *ApiListBranch) *NullableApiListBranch {
	return &NullableApiListBranch{value: val, isSet: true}
}

func (v NullableApiListBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiListBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


