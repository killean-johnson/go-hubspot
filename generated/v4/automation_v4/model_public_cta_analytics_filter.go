/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicCtaAnalyticsFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicCtaAnalyticsFilter{}

// PublicCtaAnalyticsFilter struct for PublicCtaAnalyticsFilter
type PublicCtaAnalyticsFilter struct {
	CoalescingRefineBy *PublicFormSubmissionFilterCoalescingRefineBy `json:"coalescingRefineBy,omitempty"`
	PruningRefineBy *PublicFormSubmissionFilterCoalescingRefineBy `json:"pruningRefineBy,omitempty"`
	FilterType string `json:"filterType"`
	CtaName string `json:"ctaName"`
	Operator string `json:"operator"`
}

type _PublicCtaAnalyticsFilter PublicCtaAnalyticsFilter

// NewPublicCtaAnalyticsFilter instantiates a new PublicCtaAnalyticsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicCtaAnalyticsFilter(filterType string, ctaName string, operator string) *PublicCtaAnalyticsFilter {
	this := PublicCtaAnalyticsFilter{}
	this.FilterType = filterType
	this.CtaName = ctaName
	this.Operator = operator
	return &this
}

// NewPublicCtaAnalyticsFilterWithDefaults instantiates a new PublicCtaAnalyticsFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicCtaAnalyticsFilterWithDefaults() *PublicCtaAnalyticsFilter {
	this := PublicCtaAnalyticsFilter{}
	var filterType string = "CTA"
	this.FilterType = filterType
	return &this
}

// GetCoalescingRefineBy returns the CoalescingRefineBy field value if set, zero value otherwise.
func (o *PublicCtaAnalyticsFilter) GetCoalescingRefineBy() PublicFormSubmissionFilterCoalescingRefineBy {
	if o == nil || IsNil(o.CoalescingRefineBy) {
		var ret PublicFormSubmissionFilterCoalescingRefineBy
		return ret
	}
	return *o.CoalescingRefineBy
}

// GetCoalescingRefineByOk returns a tuple with the CoalescingRefineBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCtaAnalyticsFilter) GetCoalescingRefineByOk() (*PublicFormSubmissionFilterCoalescingRefineBy, bool) {
	if o == nil || IsNil(o.CoalescingRefineBy) {
		return nil, false
	}
	return o.CoalescingRefineBy, true
}

// HasCoalescingRefineBy returns a boolean if a field has been set.
func (o *PublicCtaAnalyticsFilter) HasCoalescingRefineBy() bool {
	if o != nil && !IsNil(o.CoalescingRefineBy) {
		return true
	}

	return false
}

// SetCoalescingRefineBy gets a reference to the given PublicFormSubmissionFilterCoalescingRefineBy and assigns it to the CoalescingRefineBy field.
func (o *PublicCtaAnalyticsFilter) SetCoalescingRefineBy(v PublicFormSubmissionFilterCoalescingRefineBy) {
	o.CoalescingRefineBy = &v
}

// GetPruningRefineBy returns the PruningRefineBy field value if set, zero value otherwise.
func (o *PublicCtaAnalyticsFilter) GetPruningRefineBy() PublicFormSubmissionFilterCoalescingRefineBy {
	if o == nil || IsNil(o.PruningRefineBy) {
		var ret PublicFormSubmissionFilterCoalescingRefineBy
		return ret
	}
	return *o.PruningRefineBy
}

// GetPruningRefineByOk returns a tuple with the PruningRefineBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCtaAnalyticsFilter) GetPruningRefineByOk() (*PublicFormSubmissionFilterCoalescingRefineBy, bool) {
	if o == nil || IsNil(o.PruningRefineBy) {
		return nil, false
	}
	return o.PruningRefineBy, true
}

// HasPruningRefineBy returns a boolean if a field has been set.
func (o *PublicCtaAnalyticsFilter) HasPruningRefineBy() bool {
	if o != nil && !IsNil(o.PruningRefineBy) {
		return true
	}

	return false
}

// SetPruningRefineBy gets a reference to the given PublicFormSubmissionFilterCoalescingRefineBy and assigns it to the PruningRefineBy field.
func (o *PublicCtaAnalyticsFilter) SetPruningRefineBy(v PublicFormSubmissionFilterCoalescingRefineBy) {
	o.PruningRefineBy = &v
}

// GetFilterType returns the FilterType field value
func (o *PublicCtaAnalyticsFilter) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *PublicCtaAnalyticsFilter) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *PublicCtaAnalyticsFilter) SetFilterType(v string) {
	o.FilterType = v
}

// GetCtaName returns the CtaName field value
func (o *PublicCtaAnalyticsFilter) GetCtaName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CtaName
}

// GetCtaNameOk returns a tuple with the CtaName field value
// and a boolean to check if the value has been set.
func (o *PublicCtaAnalyticsFilter) GetCtaNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CtaName, true
}

// SetCtaName sets field value
func (o *PublicCtaAnalyticsFilter) SetCtaName(v string) {
	o.CtaName = v
}

// GetOperator returns the Operator field value
func (o *PublicCtaAnalyticsFilter) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *PublicCtaAnalyticsFilter) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *PublicCtaAnalyticsFilter) SetOperator(v string) {
	o.Operator = v
}

func (o PublicCtaAnalyticsFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicCtaAnalyticsFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CoalescingRefineBy) {
		toSerialize["coalescingRefineBy"] = o.CoalescingRefineBy
	}
	if !IsNil(o.PruningRefineBy) {
		toSerialize["pruningRefineBy"] = o.PruningRefineBy
	}
	toSerialize["filterType"] = o.FilterType
	toSerialize["ctaName"] = o.CtaName
	toSerialize["operator"] = o.Operator
	return toSerialize, nil
}

func (o *PublicCtaAnalyticsFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filterType",
		"ctaName",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicCtaAnalyticsFilter := _PublicCtaAnalyticsFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicCtaAnalyticsFilter)

	if err != nil {
		return err
	}

	*o = PublicCtaAnalyticsFilter(varPublicCtaAnalyticsFilter)

	return err
}

type NullablePublicCtaAnalyticsFilter struct {
	value *PublicCtaAnalyticsFilter
	isSet bool
}

func (v NullablePublicCtaAnalyticsFilter) Get() *PublicCtaAnalyticsFilter {
	return v.value
}

func (v *NullablePublicCtaAnalyticsFilter) Set(val *PublicCtaAnalyticsFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicCtaAnalyticsFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicCtaAnalyticsFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicCtaAnalyticsFilter(val *PublicCtaAnalyticsFilter) *NullablePublicCtaAnalyticsFilter {
	return &NullablePublicCtaAnalyticsFilter{value: val, isSet: true}
}

func (v NullablePublicCtaAnalyticsFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicCtaAnalyticsFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


