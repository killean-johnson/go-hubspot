/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiContactPropertyAnchor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiContactPropertyAnchor{}

// ApiContactPropertyAnchor struct for ApiContactPropertyAnchor
type ApiContactPropertyAnchor struct {
	// The type of event anchor this is, can be: \"CONTACT_PROPERTY_ANCHOR\" or \"STATIC_DATE_ANCHOR\"
	Type string `json:"type"`
	// A date property on the contact to use as the anchor point of this workflow.
	ContactProperty string `json:"contactProperty"`
}

type _ApiContactPropertyAnchor ApiContactPropertyAnchor

// NewApiContactPropertyAnchor instantiates a new ApiContactPropertyAnchor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiContactPropertyAnchor(type_ string, contactProperty string) *ApiContactPropertyAnchor {
	this := ApiContactPropertyAnchor{}
	this.Type = type_
	this.ContactProperty = contactProperty
	return &this
}

// NewApiContactPropertyAnchorWithDefaults instantiates a new ApiContactPropertyAnchor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiContactPropertyAnchorWithDefaults() *ApiContactPropertyAnchor {
	this := ApiContactPropertyAnchor{}
	var type_ string = "CONTACT_PROPERTY_ANCHOR"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *ApiContactPropertyAnchor) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApiContactPropertyAnchor) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApiContactPropertyAnchor) SetType(v string) {
	o.Type = v
}

// GetContactProperty returns the ContactProperty field value
func (o *ApiContactPropertyAnchor) GetContactProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContactProperty
}

// GetContactPropertyOk returns a tuple with the ContactProperty field value
// and a boolean to check if the value has been set.
func (o *ApiContactPropertyAnchor) GetContactPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContactProperty, true
}

// SetContactProperty sets field value
func (o *ApiContactPropertyAnchor) SetContactProperty(v string) {
	o.ContactProperty = v
}

func (o ApiContactPropertyAnchor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiContactPropertyAnchor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["contactProperty"] = o.ContactProperty
	return toSerialize, nil
}

func (o *ApiContactPropertyAnchor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"contactProperty",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiContactPropertyAnchor := _ApiContactPropertyAnchor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiContactPropertyAnchor)

	if err != nil {
		return err
	}

	*o = ApiContactPropertyAnchor(varApiContactPropertyAnchor)

	return err
}

type NullableApiContactPropertyAnchor struct {
	value *ApiContactPropertyAnchor
	isSet bool
}

func (v NullableApiContactPropertyAnchor) Get() *ApiContactPropertyAnchor {
	return v.value
}

func (v *NullableApiContactPropertyAnchor) Set(val *ApiContactPropertyAnchor) {
	v.value = val
	v.isSet = true
}

func (v NullableApiContactPropertyAnchor) IsSet() bool {
	return v.isSet
}

func (v *NullableApiContactPropertyAnchor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiContactPropertyAnchor(val *ApiContactPropertyAnchor) *NullableApiContactPropertyAnchor {
	return &NullableApiContactPropertyAnchor{value: val, isSet: true}
}

func (v NullableApiContactPropertyAnchor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiContactPropertyAnchor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


