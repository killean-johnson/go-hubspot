/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicPropertyAssociationInListFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicPropertyAssociationInListFilter{}

// PublicPropertyAssociationInListFilter struct for PublicPropertyAssociationInListFilter
type PublicPropertyAssociationInListFilter struct {
	ListId string `json:"listId"`
	CoalescingRefineBy PublicFormSubmissionFilterCoalescingRefineBy `json:"coalescingRefineBy"`
	PropertyWithObjectId string `json:"propertyWithObjectId"`
	FilterType string `json:"filterType"`
	ToObjectTypeId *string `json:"toObjectTypeId,omitempty"`
	Operator string `json:"operator"`
}

type _PublicPropertyAssociationInListFilter PublicPropertyAssociationInListFilter

// NewPublicPropertyAssociationInListFilter instantiates a new PublicPropertyAssociationInListFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicPropertyAssociationInListFilter(listId string, coalescingRefineBy PublicFormSubmissionFilterCoalescingRefineBy, propertyWithObjectId string, filterType string, operator string) *PublicPropertyAssociationInListFilter {
	this := PublicPropertyAssociationInListFilter{}
	this.ListId = listId
	this.CoalescingRefineBy = coalescingRefineBy
	this.PropertyWithObjectId = propertyWithObjectId
	this.FilterType = filterType
	this.Operator = operator
	return &this
}

// NewPublicPropertyAssociationInListFilterWithDefaults instantiates a new PublicPropertyAssociationInListFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicPropertyAssociationInListFilterWithDefaults() *PublicPropertyAssociationInListFilter {
	this := PublicPropertyAssociationInListFilter{}
	var filterType string = "PROPERTY_ASSOCIATION"
	this.FilterType = filterType
	return &this
}

// GetListId returns the ListId field value
func (o *PublicPropertyAssociationInListFilter) GetListId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListId
}

// GetListIdOk returns a tuple with the ListId field value
// and a boolean to check if the value has been set.
func (o *PublicPropertyAssociationInListFilter) GetListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListId, true
}

// SetListId sets field value
func (o *PublicPropertyAssociationInListFilter) SetListId(v string) {
	o.ListId = v
}

// GetCoalescingRefineBy returns the CoalescingRefineBy field value
func (o *PublicPropertyAssociationInListFilter) GetCoalescingRefineBy() PublicFormSubmissionFilterCoalescingRefineBy {
	if o == nil {
		var ret PublicFormSubmissionFilterCoalescingRefineBy
		return ret
	}

	return o.CoalescingRefineBy
}

// GetCoalescingRefineByOk returns a tuple with the CoalescingRefineBy field value
// and a boolean to check if the value has been set.
func (o *PublicPropertyAssociationInListFilter) GetCoalescingRefineByOk() (*PublicFormSubmissionFilterCoalescingRefineBy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CoalescingRefineBy, true
}

// SetCoalescingRefineBy sets field value
func (o *PublicPropertyAssociationInListFilter) SetCoalescingRefineBy(v PublicFormSubmissionFilterCoalescingRefineBy) {
	o.CoalescingRefineBy = v
}

// GetPropertyWithObjectId returns the PropertyWithObjectId field value
func (o *PublicPropertyAssociationInListFilter) GetPropertyWithObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PropertyWithObjectId
}

// GetPropertyWithObjectIdOk returns a tuple with the PropertyWithObjectId field value
// and a boolean to check if the value has been set.
func (o *PublicPropertyAssociationInListFilter) GetPropertyWithObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PropertyWithObjectId, true
}

// SetPropertyWithObjectId sets field value
func (o *PublicPropertyAssociationInListFilter) SetPropertyWithObjectId(v string) {
	o.PropertyWithObjectId = v
}

// GetFilterType returns the FilterType field value
func (o *PublicPropertyAssociationInListFilter) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *PublicPropertyAssociationInListFilter) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *PublicPropertyAssociationInListFilter) SetFilterType(v string) {
	o.FilterType = v
}

// GetToObjectTypeId returns the ToObjectTypeId field value if set, zero value otherwise.
func (o *PublicPropertyAssociationInListFilter) GetToObjectTypeId() string {
	if o == nil || IsNil(o.ToObjectTypeId) {
		var ret string
		return ret
	}
	return *o.ToObjectTypeId
}

// GetToObjectTypeIdOk returns a tuple with the ToObjectTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicPropertyAssociationInListFilter) GetToObjectTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ToObjectTypeId) {
		return nil, false
	}
	return o.ToObjectTypeId, true
}

// HasToObjectTypeId returns a boolean if a field has been set.
func (o *PublicPropertyAssociationInListFilter) HasToObjectTypeId() bool {
	if o != nil && !IsNil(o.ToObjectTypeId) {
		return true
	}

	return false
}

// SetToObjectTypeId gets a reference to the given string and assigns it to the ToObjectTypeId field.
func (o *PublicPropertyAssociationInListFilter) SetToObjectTypeId(v string) {
	o.ToObjectTypeId = &v
}

// GetOperator returns the Operator field value
func (o *PublicPropertyAssociationInListFilter) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *PublicPropertyAssociationInListFilter) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *PublicPropertyAssociationInListFilter) SetOperator(v string) {
	o.Operator = v
}

func (o PublicPropertyAssociationInListFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicPropertyAssociationInListFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["listId"] = o.ListId
	toSerialize["coalescingRefineBy"] = o.CoalescingRefineBy
	toSerialize["propertyWithObjectId"] = o.PropertyWithObjectId
	toSerialize["filterType"] = o.FilterType
	if !IsNil(o.ToObjectTypeId) {
		toSerialize["toObjectTypeId"] = o.ToObjectTypeId
	}
	toSerialize["operator"] = o.Operator
	return toSerialize, nil
}

func (o *PublicPropertyAssociationInListFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"listId",
		"coalescingRefineBy",
		"propertyWithObjectId",
		"filterType",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicPropertyAssociationInListFilter := _PublicPropertyAssociationInListFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicPropertyAssociationInListFilter)

	if err != nil {
		return err
	}

	*o = PublicPropertyAssociationInListFilter(varPublicPropertyAssociationInListFilter)

	return err
}

type NullablePublicPropertyAssociationInListFilter struct {
	value *PublicPropertyAssociationInListFilter
	isSet bool
}

func (v NullablePublicPropertyAssociationInListFilter) Get() *PublicPropertyAssociationInListFilter {
	return v.value
}

func (v *NullablePublicPropertyAssociationInListFilter) Set(val *PublicPropertyAssociationInListFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicPropertyAssociationInListFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicPropertyAssociationInListFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicPropertyAssociationInListFilter(val *PublicPropertyAssociationInListFilter) *NullablePublicPropertyAssociationInListFilter {
	return &NullablePublicPropertyAssociationInListFilter{value: val, isSet: true}
}

func (v NullablePublicPropertyAssociationInListFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicPropertyAssociationInListFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


