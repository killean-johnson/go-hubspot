/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ApiContactFlowAllOfEventAnchor - struct for ApiContactFlowAllOfEventAnchor
type ApiContactFlowAllOfEventAnchor struct {
	ApiContactPropertyAnchor *ApiContactPropertyAnchor
	ApiStaticDateAnchor *ApiStaticDateAnchor
}

// ApiContactPropertyAnchorAsApiContactFlowAllOfEventAnchor is a convenience function that returns ApiContactPropertyAnchor wrapped in ApiContactFlowAllOfEventAnchor
func ApiContactPropertyAnchorAsApiContactFlowAllOfEventAnchor(v *ApiContactPropertyAnchor) ApiContactFlowAllOfEventAnchor {
	return ApiContactFlowAllOfEventAnchor{
		ApiContactPropertyAnchor: v,
	}
}

// ApiStaticDateAnchorAsApiContactFlowAllOfEventAnchor is a convenience function that returns ApiStaticDateAnchor wrapped in ApiContactFlowAllOfEventAnchor
func ApiStaticDateAnchorAsApiContactFlowAllOfEventAnchor(v *ApiStaticDateAnchor) ApiContactFlowAllOfEventAnchor {
	return ApiContactFlowAllOfEventAnchor{
		ApiStaticDateAnchor: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiContactFlowAllOfEventAnchor) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiContactPropertyAnchor
	err = newStrictDecoder(data).Decode(&dst.ApiContactPropertyAnchor)
	if err == nil {
		jsonApiContactPropertyAnchor, _ := json.Marshal(dst.ApiContactPropertyAnchor)
		if string(jsonApiContactPropertyAnchor) == "{}" { // empty struct
			dst.ApiContactPropertyAnchor = nil
		} else {
			if err = validator.Validate(dst.ApiContactPropertyAnchor); err != nil {
				dst.ApiContactPropertyAnchor = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiContactPropertyAnchor = nil
	}

	// try to unmarshal data into ApiStaticDateAnchor
	err = newStrictDecoder(data).Decode(&dst.ApiStaticDateAnchor)
	if err == nil {
		jsonApiStaticDateAnchor, _ := json.Marshal(dst.ApiStaticDateAnchor)
		if string(jsonApiStaticDateAnchor) == "{}" { // empty struct
			dst.ApiStaticDateAnchor = nil
		} else {
			if err = validator.Validate(dst.ApiStaticDateAnchor); err != nil {
				dst.ApiStaticDateAnchor = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiStaticDateAnchor = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiContactPropertyAnchor = nil
		dst.ApiStaticDateAnchor = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApiContactFlowAllOfEventAnchor)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApiContactFlowAllOfEventAnchor)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiContactFlowAllOfEventAnchor) MarshalJSON() ([]byte, error) {
	if src.ApiContactPropertyAnchor != nil {
		return json.Marshal(&src.ApiContactPropertyAnchor)
	}

	if src.ApiStaticDateAnchor != nil {
		return json.Marshal(&src.ApiStaticDateAnchor)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiContactFlowAllOfEventAnchor) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApiContactPropertyAnchor != nil {
		return obj.ApiContactPropertyAnchor
	}

	if obj.ApiStaticDateAnchor != nil {
		return obj.ApiStaticDateAnchor
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ApiContactFlowAllOfEventAnchor) GetActualInstanceValue() (interface{}) {
	if obj.ApiContactPropertyAnchor != nil {
		return *obj.ApiContactPropertyAnchor
	}

	if obj.ApiStaticDateAnchor != nil {
		return *obj.ApiStaticDateAnchor
	}

	// all schemas are nil
	return nil
}

type NullableApiContactFlowAllOfEventAnchor struct {
	value *ApiContactFlowAllOfEventAnchor
	isSet bool
}

func (v NullableApiContactFlowAllOfEventAnchor) Get() *ApiContactFlowAllOfEventAnchor {
	return v.value
}

func (v *NullableApiContactFlowAllOfEventAnchor) Set(val *ApiContactFlowAllOfEventAnchor) {
	v.value = val
	v.isSet = true
}

func (v NullableApiContactFlowAllOfEventAnchor) IsSet() bool {
	return v.isSet
}

func (v *NullableApiContactFlowAllOfEventAnchor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiContactFlowAllOfEventAnchor(val *ApiContactFlowAllOfEventAnchor) *NullableApiContactFlowAllOfEventAnchor {
	return &NullableApiContactFlowAllOfEventAnchor{value: val, isSet: true}
}

func (v NullableApiContactFlowAllOfEventAnchor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiContactFlowAllOfEventAnchor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


