/*
Automation V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation_v4

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiAssociationDataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiAssociationDataSource{}

// ApiAssociationDataSource struct for ApiAssociationDataSource
type ApiAssociationDataSource struct {
	ObjectTypeId string `json:"objectTypeId"`
	Name string `json:"name"`
	AssociationTypeId int32 `json:"associationTypeId"`
	AssociationCategory string `json:"associationCategory"`
	SortBy *ApiSort `json:"sortBy,omitempty"`
	Type string `json:"type"`
}

type _ApiAssociationDataSource ApiAssociationDataSource

// NewApiAssociationDataSource instantiates a new ApiAssociationDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAssociationDataSource(objectTypeId string, name string, associationTypeId int32, associationCategory string, type_ string) *ApiAssociationDataSource {
	this := ApiAssociationDataSource{}
	this.ObjectTypeId = objectTypeId
	this.Name = name
	this.AssociationTypeId = associationTypeId
	this.AssociationCategory = associationCategory
	this.Type = type_
	return &this
}

// NewApiAssociationDataSourceWithDefaults instantiates a new ApiAssociationDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAssociationDataSourceWithDefaults() *ApiAssociationDataSource {
	this := ApiAssociationDataSource{}
	var type_ string = "ASSOCIATION"
	this.Type = type_
	return &this
}

// GetObjectTypeId returns the ObjectTypeId field value
func (o *ApiAssociationDataSource) GetObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *ApiAssociationDataSource) GetObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectTypeId, true
}

// SetObjectTypeId sets field value
func (o *ApiAssociationDataSource) SetObjectTypeId(v string) {
	o.ObjectTypeId = v
}

// GetName returns the Name field value
func (o *ApiAssociationDataSource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiAssociationDataSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiAssociationDataSource) SetName(v string) {
	o.Name = v
}

// GetAssociationTypeId returns the AssociationTypeId field value
func (o *ApiAssociationDataSource) GetAssociationTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AssociationTypeId
}

// GetAssociationTypeIdOk returns a tuple with the AssociationTypeId field value
// and a boolean to check if the value has been set.
func (o *ApiAssociationDataSource) GetAssociationTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssociationTypeId, true
}

// SetAssociationTypeId sets field value
func (o *ApiAssociationDataSource) SetAssociationTypeId(v int32) {
	o.AssociationTypeId = v
}

// GetAssociationCategory returns the AssociationCategory field value
func (o *ApiAssociationDataSource) GetAssociationCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssociationCategory
}

// GetAssociationCategoryOk returns a tuple with the AssociationCategory field value
// and a boolean to check if the value has been set.
func (o *ApiAssociationDataSource) GetAssociationCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssociationCategory, true
}

// SetAssociationCategory sets field value
func (o *ApiAssociationDataSource) SetAssociationCategory(v string) {
	o.AssociationCategory = v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *ApiAssociationDataSource) GetSortBy() ApiSort {
	if o == nil || IsNil(o.SortBy) {
		var ret ApiSort
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAssociationDataSource) GetSortByOk() (*ApiSort, bool) {
	if o == nil || IsNil(o.SortBy) {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *ApiAssociationDataSource) HasSortBy() bool {
	if o != nil && !IsNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given ApiSort and assigns it to the SortBy field.
func (o *ApiAssociationDataSource) SetSortBy(v ApiSort) {
	o.SortBy = &v
}

// GetType returns the Type field value
func (o *ApiAssociationDataSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApiAssociationDataSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApiAssociationDataSource) SetType(v string) {
	o.Type = v
}

func (o ApiAssociationDataSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiAssociationDataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["objectTypeId"] = o.ObjectTypeId
	toSerialize["name"] = o.Name
	toSerialize["associationTypeId"] = o.AssociationTypeId
	toSerialize["associationCategory"] = o.AssociationCategory
	if !IsNil(o.SortBy) {
		toSerialize["sortBy"] = o.SortBy
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ApiAssociationDataSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectTypeId",
		"name",
		"associationTypeId",
		"associationCategory",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiAssociationDataSource := _ApiAssociationDataSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiAssociationDataSource)

	if err != nil {
		return err
	}

	*o = ApiAssociationDataSource(varApiAssociationDataSource)

	return err
}

type NullableApiAssociationDataSource struct {
	value *ApiAssociationDataSource
	isSet bool
}

func (v NullableApiAssociationDataSource) Get() *ApiAssociationDataSource {
	return v.value
}

func (v *NullableApiAssociationDataSource) Set(val *ApiAssociationDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAssociationDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAssociationDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAssociationDataSource(val *ApiAssociationDataSource) *NullableApiAssociationDataSource {
	return &NullableApiAssociationDataSource{value: val, isSet: true}
}

func (v NullableApiAssociationDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAssociationDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


