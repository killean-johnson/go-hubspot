/*
Settings Tax Rates

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tax_rates

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublicTaxRateGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicTaxRateGroup{}

// PublicTaxRateGroup struct for PublicTaxRateGroup
type PublicTaxRateGroup struct {
	CreatedAt time.Time `json:"createdAt"`
	Name string `json:"name"`
	Active bool `json:"active"`
	Label string `json:"label"`
	Id string `json:"id"`
	PercentageRate float32 `json:"percentageRate"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type _PublicTaxRateGroup PublicTaxRateGroup

// NewPublicTaxRateGroup instantiates a new PublicTaxRateGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicTaxRateGroup(createdAt time.Time, name string, active bool, label string, id string, percentageRate float32, updatedAt time.Time) *PublicTaxRateGroup {
	this := PublicTaxRateGroup{}
	this.CreatedAt = createdAt
	this.Name = name
	this.Active = active
	this.Label = label
	this.Id = id
	this.PercentageRate = percentageRate
	this.UpdatedAt = updatedAt
	return &this
}

// NewPublicTaxRateGroupWithDefaults instantiates a new PublicTaxRateGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicTaxRateGroupWithDefaults() *PublicTaxRateGroup {
	this := PublicTaxRateGroup{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *PublicTaxRateGroup) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicTaxRateGroup) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PublicTaxRateGroup) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetName returns the Name field value
func (o *PublicTaxRateGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicTaxRateGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicTaxRateGroup) SetName(v string) {
	o.Name = v
}

// GetActive returns the Active field value
func (o *PublicTaxRateGroup) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *PublicTaxRateGroup) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *PublicTaxRateGroup) SetActive(v bool) {
	o.Active = v
}

// GetLabel returns the Label field value
func (o *PublicTaxRateGroup) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *PublicTaxRateGroup) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *PublicTaxRateGroup) SetLabel(v string) {
	o.Label = v
}

// GetId returns the Id field value
func (o *PublicTaxRateGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicTaxRateGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicTaxRateGroup) SetId(v string) {
	o.Id = v
}

// GetPercentageRate returns the PercentageRate field value
func (o *PublicTaxRateGroup) GetPercentageRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PercentageRate
}

// GetPercentageRateOk returns a tuple with the PercentageRate field value
// and a boolean to check if the value has been set.
func (o *PublicTaxRateGroup) GetPercentageRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PercentageRate, true
}

// SetPercentageRate sets field value
func (o *PublicTaxRateGroup) SetPercentageRate(v float32) {
	o.PercentageRate = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PublicTaxRateGroup) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicTaxRateGroup) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PublicTaxRateGroup) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o PublicTaxRateGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicTaxRateGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["name"] = o.Name
	toSerialize["active"] = o.Active
	toSerialize["label"] = o.Label
	toSerialize["id"] = o.Id
	toSerialize["percentageRate"] = o.PercentageRate
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *PublicTaxRateGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"name",
		"active",
		"label",
		"id",
		"percentageRate",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicTaxRateGroup := _PublicTaxRateGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicTaxRateGroup)

	if err != nil {
		return err
	}

	*o = PublicTaxRateGroup(varPublicTaxRateGroup)

	return err
}

type NullablePublicTaxRateGroup struct {
	value *PublicTaxRateGroup
	isSet bool
}

func (v NullablePublicTaxRateGroup) Get() *PublicTaxRateGroup {
	return v.value
}

func (v *NullablePublicTaxRateGroup) Set(val *PublicTaxRateGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicTaxRateGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicTaxRateGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicTaxRateGroup(val *PublicTaxRateGroup) *NullablePublicTaxRateGroup {
	return &NullablePublicTaxRateGroup{value: val, isSet: true}
}

func (v NullablePublicTaxRateGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicTaxRateGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


