/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MediaBridgeProviderRegistrationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaBridgeProviderRegistrationResponse{}

// MediaBridgeProviderRegistrationResponse struct for MediaBridgeProviderRegistrationResponse
type MediaBridgeProviderRegistrationResponse struct {
	AppId int32 `json:"appId"`
	Name string `json:"name"`
}

type _MediaBridgeProviderRegistrationResponse MediaBridgeProviderRegistrationResponse

// NewMediaBridgeProviderRegistrationResponse instantiates a new MediaBridgeProviderRegistrationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaBridgeProviderRegistrationResponse(appId int32, name string) *MediaBridgeProviderRegistrationResponse {
	this := MediaBridgeProviderRegistrationResponse{}
	this.AppId = appId
	this.Name = name
	return &this
}

// NewMediaBridgeProviderRegistrationResponseWithDefaults instantiates a new MediaBridgeProviderRegistrationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaBridgeProviderRegistrationResponseWithDefaults() *MediaBridgeProviderRegistrationResponse {
	this := MediaBridgeProviderRegistrationResponse{}
	return &this
}

// GetAppId returns the AppId field value
func (o *MediaBridgeProviderRegistrationResponse) GetAppId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *MediaBridgeProviderRegistrationResponse) GetAppIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *MediaBridgeProviderRegistrationResponse) SetAppId(v int32) {
	o.AppId = v
}

// GetName returns the Name field value
func (o *MediaBridgeProviderRegistrationResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MediaBridgeProviderRegistrationResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MediaBridgeProviderRegistrationResponse) SetName(v string) {
	o.Name = v
}

func (o MediaBridgeProviderRegistrationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaBridgeProviderRegistrationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appId"] = o.AppId
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *MediaBridgeProviderRegistrationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appId",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaBridgeProviderRegistrationResponse := _MediaBridgeProviderRegistrationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaBridgeProviderRegistrationResponse)

	if err != nil {
		return err
	}

	*o = MediaBridgeProviderRegistrationResponse(varMediaBridgeProviderRegistrationResponse)

	return err
}

type NullableMediaBridgeProviderRegistrationResponse struct {
	value *MediaBridgeProviderRegistrationResponse
	isSet bool
}

func (v NullableMediaBridgeProviderRegistrationResponse) Get() *MediaBridgeProviderRegistrationResponse {
	return v.value
}

func (v *NullableMediaBridgeProviderRegistrationResponse) Set(val *MediaBridgeProviderRegistrationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaBridgeProviderRegistrationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaBridgeProviderRegistrationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaBridgeProviderRegistrationResponse(val *MediaBridgeProviderRegistrationResponse) *NullableMediaBridgeProviderRegistrationResponse {
	return &NullableMediaBridgeProviderRegistrationResponse{value: val, isSet: true}
}

func (v NullableMediaBridgeProviderRegistrationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaBridgeProviderRegistrationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


