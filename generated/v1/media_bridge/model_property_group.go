/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PropertyGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyGroup{}

// PropertyGroup struct for PropertyGroup
type PropertyGroup struct {
	Archived bool `json:"archived"`
	Name string `json:"name"`
	DisplayOrder *int32 `json:"displayOrder,omitempty"`
	Label string `json:"label"`
}

type _PropertyGroup PropertyGroup

// NewPropertyGroup instantiates a new PropertyGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyGroup(archived bool, name string, label string) *PropertyGroup {
	this := PropertyGroup{}
	this.Archived = archived
	this.Name = name
	this.Label = label
	return &this
}

// NewPropertyGroupWithDefaults instantiates a new PropertyGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyGroupWithDefaults() *PropertyGroup {
	this := PropertyGroup{}
	return &this
}

// GetArchived returns the Archived field value
func (o *PropertyGroup) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *PropertyGroup) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *PropertyGroup) SetArchived(v bool) {
	o.Archived = v
}

// GetName returns the Name field value
func (o *PropertyGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PropertyGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PropertyGroup) SetName(v string) {
	o.Name = v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *PropertyGroup) GetDisplayOrder() int32 {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyGroup) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *PropertyGroup) HasDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *PropertyGroup) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetLabel returns the Label field value
func (o *PropertyGroup) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *PropertyGroup) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *PropertyGroup) SetLabel(v string) {
	o.Label = v
}

func (o PropertyGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["archived"] = o.Archived
	toSerialize["name"] = o.Name
	if !IsNil(o.DisplayOrder) {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	toSerialize["label"] = o.Label
	return toSerialize, nil
}

func (o *PropertyGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"archived",
		"name",
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPropertyGroup := _PropertyGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPropertyGroup)

	if err != nil {
		return err
	}

	*o = PropertyGroup(varPropertyGroup)

	return err
}

type NullablePropertyGroup struct {
	value *PropertyGroup
	isSet bool
}

func (v NullablePropertyGroup) Get() *PropertyGroup {
	return v.value
}

func (v *NullablePropertyGroup) Set(val *PropertyGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyGroup(val *PropertyGroup) *NullablePropertyGroup {
	return &NullablePropertyGroup{value: val, isSet: true}
}

func (v NullablePropertyGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


