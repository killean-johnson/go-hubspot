/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
)


// GroupsAPIService GroupsAPI service
type GroupsAPIService service

type ApiDeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest struct {
	ctx context.Context
	ApiService *GroupsAPIService
	objectType string
	groupName string
}

func (r ApiDeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameExecute(r)
}

/*
DeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName Method for DeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectType
 @param groupName
 @return ApiDeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest
*/
func (a *GroupsAPIService) DeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName(ctx context.Context, objectType string, groupName string) ApiDeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest {
	return ApiDeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest{
		ApiService: a,
		ctx: ctx,
		objectType: objectType,
		groupName: groupName,
	}
}

// Execute executes the request
func (a *GroupsAPIService) DeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameExecute(r ApiDeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsAPIService.DeleteMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/properties/{objectType}/groups/{groupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"objectType"+"}", url.PathEscape(parameterValueToString(r.objectType, "objectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"groupName"+"}", url.PathEscape(parameterValueToString(r.groupName, "groupName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest struct {
	ctx context.Context
	ApiService *GroupsAPIService
	objectType string
}

func (r ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest) Execute() (*CollectionResponsePropertyGroupNoPaging, *http.Response, error) {
	return r.ApiService.GetMediaBridgeV1AppIdPropertiesObjectTypeGroupsExecute(r)
}

/*
GetMediaBridgeV1AppIdPropertiesObjectTypeGroups Method for GetMediaBridgeV1AppIdPropertiesObjectTypeGroups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectType
 @return ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest
*/
func (a *GroupsAPIService) GetMediaBridgeV1AppIdPropertiesObjectTypeGroups(ctx context.Context, objectType string) ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest {
	return ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest{
		ApiService: a,
		ctx: ctx,
		objectType: objectType,
	}
}

// Execute executes the request
//  @return CollectionResponsePropertyGroupNoPaging
func (a *GroupsAPIService) GetMediaBridgeV1AppIdPropertiesObjectTypeGroupsExecute(r ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest) (*CollectionResponsePropertyGroupNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponsePropertyGroupNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsAPIService.GetMediaBridgeV1AppIdPropertiesObjectTypeGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/properties/{objectType}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"objectType"+"}", url.PathEscape(parameterValueToString(r.objectType, "objectType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest struct {
	ctx context.Context
	ApiService *GroupsAPIService
	objectType string
	groupName string
}

func (r ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest) Execute() (*PropertyGroup, *http.Response, error) {
	return r.ApiService.GetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameExecute(r)
}

/*
GetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName Method for GetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectType
 @param groupName
 @return ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest
*/
func (a *GroupsAPIService) GetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName(ctx context.Context, objectType string, groupName string) ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest {
	return ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest{
		ApiService: a,
		ctx: ctx,
		objectType: objectType,
		groupName: groupName,
	}
}

// Execute executes the request
//  @return PropertyGroup
func (a *GroupsAPIService) GetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameExecute(r ApiGetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest) (*PropertyGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PropertyGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsAPIService.GetMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/properties/{objectType}/groups/{groupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"objectType"+"}", url.PathEscape(parameterValueToString(r.objectType, "objectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"groupName"+"}", url.PathEscape(parameterValueToString(r.groupName, "groupName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest struct {
	ctx context.Context
	ApiService *GroupsAPIService
	objectType string
	groupName string
	propertyGroupUpdate *PropertyGroupUpdate
}

func (r ApiPatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest) PropertyGroupUpdate(propertyGroupUpdate PropertyGroupUpdate) ApiPatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest {
	r.propertyGroupUpdate = &propertyGroupUpdate
	return r
}

func (r ApiPatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest) Execute() (*PropertyGroup, *http.Response, error) {
	return r.ApiService.PatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameExecute(r)
}

/*
PatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName Method for PatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectType
 @param groupName
 @return ApiPatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest
*/
func (a *GroupsAPIService) PatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName(ctx context.Context, objectType string, groupName string) ApiPatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest {
	return ApiPatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest{
		ApiService: a,
		ctx: ctx,
		objectType: objectType,
		groupName: groupName,
	}
}

// Execute executes the request
//  @return PropertyGroup
func (a *GroupsAPIService) PatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameExecute(r ApiPatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupNameRequest) (*PropertyGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PropertyGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsAPIService.PatchMediaBridgeV1AppIdPropertiesObjectTypeGroupsGroupName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/properties/{objectType}/groups/{groupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"objectType"+"}", url.PathEscape(parameterValueToString(r.objectType, "objectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"groupName"+"}", url.PathEscape(parameterValueToString(r.groupName, "groupName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.propertyGroupUpdate == nil {
		return localVarReturnValue, nil, reportError("propertyGroupUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.propertyGroupUpdate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest struct {
	ctx context.Context
	ApiService *GroupsAPIService
	objectType string
	propertyGroupCreate *PropertyGroupCreate
}

func (r ApiPostMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest) PropertyGroupCreate(propertyGroupCreate PropertyGroupCreate) ApiPostMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest {
	r.propertyGroupCreate = &propertyGroupCreate
	return r
}

func (r ApiPostMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest) Execute() (*PropertyGroup, *http.Response, error) {
	return r.ApiService.PostMediaBridgeV1AppIdPropertiesObjectTypeGroupsExecute(r)
}

/*
PostMediaBridgeV1AppIdPropertiesObjectTypeGroups Method for PostMediaBridgeV1AppIdPropertiesObjectTypeGroups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectType
 @return ApiPostMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest
*/
func (a *GroupsAPIService) PostMediaBridgeV1AppIdPropertiesObjectTypeGroups(ctx context.Context, objectType string) ApiPostMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest {
	return ApiPostMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest{
		ApiService: a,
		ctx: ctx,
		objectType: objectType,
	}
}

// Execute executes the request
//  @return PropertyGroup
func (a *GroupsAPIService) PostMediaBridgeV1AppIdPropertiesObjectTypeGroupsExecute(r ApiPostMediaBridgeV1AppIdPropertiesObjectTypeGroupsRequest) (*PropertyGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PropertyGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsAPIService.PostMediaBridgeV1AppIdPropertiesObjectTypeGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/properties/{objectType}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"objectType"+"}", url.PathEscape(parameterValueToString(r.objectType, "objectType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.propertyGroupCreate == nil {
		return localVarReturnValue, nil, reportError("propertyGroupCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.propertyGroupCreate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
