/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Property1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Property1{}

// Property1 struct for Property1
type Property1 struct {
	CreatedUserId *string `json:"createdUserId,omitempty"`
	Hidden *bool `json:"hidden,omitempty"`
	ModificationMetadata *PropertyModificationMetadata `json:"modificationMetadata,omitempty"`
	DisplayOrder *int32 `json:"displayOrder,omitempty"`
	Description string `json:"description"`
	ShowCurrencySymbol *bool `json:"showCurrencySymbol,omitempty"`
	Label string `json:"label"`
	Type string `json:"type"`
	HubspotDefined *bool `json:"hubspotDefined,omitempty"`
	FormField *bool `json:"formField,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	GroupName string `json:"groupName"`
	ReferencedObjectType *string `json:"referencedObjectType,omitempty"`
	Name string `json:"name"`
	Options []Option1 `json:"options"`
	CalculationFormula *string `json:"calculationFormula,omitempty"`
	HasUniqueValue *bool `json:"hasUniqueValue,omitempty"`
	FieldType string `json:"fieldType"`
	UpdatedUserId *string `json:"updatedUserId,omitempty"`
	Calculated *bool `json:"calculated,omitempty"`
	ExternalOptions *bool `json:"externalOptions,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type _Property1 Property1

// NewProperty1 instantiates a new Property1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProperty1(description string, label string, type_ string, groupName string, name string, options []Option1, fieldType string) *Property1 {
	this := Property1{}
	this.Description = description
	this.Label = label
	this.Type = type_
	this.GroupName = groupName
	this.Name = name
	this.Options = options
	this.FieldType = fieldType
	return &this
}

// NewProperty1WithDefaults instantiates a new Property1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProperty1WithDefaults() *Property1 {
	this := Property1{}
	return &this
}

// GetCreatedUserId returns the CreatedUserId field value if set, zero value otherwise.
func (o *Property1) GetCreatedUserId() string {
	if o == nil || IsNil(o.CreatedUserId) {
		var ret string
		return ret
	}
	return *o.CreatedUserId
}

// GetCreatedUserIdOk returns a tuple with the CreatedUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetCreatedUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedUserId) {
		return nil, false
	}
	return o.CreatedUserId, true
}

// HasCreatedUserId returns a boolean if a field has been set.
func (o *Property1) HasCreatedUserId() bool {
	if o != nil && !IsNil(o.CreatedUserId) {
		return true
	}

	return false
}

// SetCreatedUserId gets a reference to the given string and assigns it to the CreatedUserId field.
func (o *Property1) SetCreatedUserId(v string) {
	o.CreatedUserId = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *Property1) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *Property1) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *Property1) SetHidden(v bool) {
	o.Hidden = &v
}

// GetModificationMetadata returns the ModificationMetadata field value if set, zero value otherwise.
func (o *Property1) GetModificationMetadata() PropertyModificationMetadata {
	if o == nil || IsNil(o.ModificationMetadata) {
		var ret PropertyModificationMetadata
		return ret
	}
	return *o.ModificationMetadata
}

// GetModificationMetadataOk returns a tuple with the ModificationMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetModificationMetadataOk() (*PropertyModificationMetadata, bool) {
	if o == nil || IsNil(o.ModificationMetadata) {
		return nil, false
	}
	return o.ModificationMetadata, true
}

// HasModificationMetadata returns a boolean if a field has been set.
func (o *Property1) HasModificationMetadata() bool {
	if o != nil && !IsNil(o.ModificationMetadata) {
		return true
	}

	return false
}

// SetModificationMetadata gets a reference to the given PropertyModificationMetadata and assigns it to the ModificationMetadata field.
func (o *Property1) SetModificationMetadata(v PropertyModificationMetadata) {
	o.ModificationMetadata = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *Property1) GetDisplayOrder() int32 {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *Property1) HasDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *Property1) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetDescription returns the Description field value
func (o *Property1) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Property1) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Property1) SetDescription(v string) {
	o.Description = v
}

// GetShowCurrencySymbol returns the ShowCurrencySymbol field value if set, zero value otherwise.
func (o *Property1) GetShowCurrencySymbol() bool {
	if o == nil || IsNil(o.ShowCurrencySymbol) {
		var ret bool
		return ret
	}
	return *o.ShowCurrencySymbol
}

// GetShowCurrencySymbolOk returns a tuple with the ShowCurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetShowCurrencySymbolOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowCurrencySymbol) {
		return nil, false
	}
	return o.ShowCurrencySymbol, true
}

// HasShowCurrencySymbol returns a boolean if a field has been set.
func (o *Property1) HasShowCurrencySymbol() bool {
	if o != nil && !IsNil(o.ShowCurrencySymbol) {
		return true
	}

	return false
}

// SetShowCurrencySymbol gets a reference to the given bool and assigns it to the ShowCurrencySymbol field.
func (o *Property1) SetShowCurrencySymbol(v bool) {
	o.ShowCurrencySymbol = &v
}

// GetLabel returns the Label field value
func (o *Property1) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *Property1) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *Property1) SetLabel(v string) {
	o.Label = v
}

// GetType returns the Type field value
func (o *Property1) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Property1) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Property1) SetType(v string) {
	o.Type = v
}

// GetHubspotDefined returns the HubspotDefined field value if set, zero value otherwise.
func (o *Property1) GetHubspotDefined() bool {
	if o == nil || IsNil(o.HubspotDefined) {
		var ret bool
		return ret
	}
	return *o.HubspotDefined
}

// GetHubspotDefinedOk returns a tuple with the HubspotDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetHubspotDefinedOk() (*bool, bool) {
	if o == nil || IsNil(o.HubspotDefined) {
		return nil, false
	}
	return o.HubspotDefined, true
}

// HasHubspotDefined returns a boolean if a field has been set.
func (o *Property1) HasHubspotDefined() bool {
	if o != nil && !IsNil(o.HubspotDefined) {
		return true
	}

	return false
}

// SetHubspotDefined gets a reference to the given bool and assigns it to the HubspotDefined field.
func (o *Property1) SetHubspotDefined(v bool) {
	o.HubspotDefined = &v
}

// GetFormField returns the FormField field value if set, zero value otherwise.
func (o *Property1) GetFormField() bool {
	if o == nil || IsNil(o.FormField) {
		var ret bool
		return ret
	}
	return *o.FormField
}

// GetFormFieldOk returns a tuple with the FormField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetFormFieldOk() (*bool, bool) {
	if o == nil || IsNil(o.FormField) {
		return nil, false
	}
	return o.FormField, true
}

// HasFormField returns a boolean if a field has been set.
func (o *Property1) HasFormField() bool {
	if o != nil && !IsNil(o.FormField) {
		return true
	}

	return false
}

// SetFormField gets a reference to the given bool and assigns it to the FormField field.
func (o *Property1) SetFormField(v bool) {
	o.FormField = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Property1) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Property1) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Property1) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *Property1) GetArchivedAt() time.Time {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret time.Time
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetArchivedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *Property1) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given time.Time and assigns it to the ArchivedAt field.
func (o *Property1) SetArchivedAt(v time.Time) {
	o.ArchivedAt = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *Property1) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *Property1) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *Property1) SetArchived(v bool) {
	o.Archived = &v
}

// GetGroupName returns the GroupName field value
func (o *Property1) GetGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value
// and a boolean to check if the value has been set.
func (o *Property1) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupName, true
}

// SetGroupName sets field value
func (o *Property1) SetGroupName(v string) {
	o.GroupName = v
}

// GetReferencedObjectType returns the ReferencedObjectType field value if set, zero value otherwise.
func (o *Property1) GetReferencedObjectType() string {
	if o == nil || IsNil(o.ReferencedObjectType) {
		var ret string
		return ret
	}
	return *o.ReferencedObjectType
}

// GetReferencedObjectTypeOk returns a tuple with the ReferencedObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetReferencedObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReferencedObjectType) {
		return nil, false
	}
	return o.ReferencedObjectType, true
}

// HasReferencedObjectType returns a boolean if a field has been set.
func (o *Property1) HasReferencedObjectType() bool {
	if o != nil && !IsNil(o.ReferencedObjectType) {
		return true
	}

	return false
}

// SetReferencedObjectType gets a reference to the given string and assigns it to the ReferencedObjectType field.
func (o *Property1) SetReferencedObjectType(v string) {
	o.ReferencedObjectType = &v
}

// GetName returns the Name field value
func (o *Property1) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Property1) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Property1) SetName(v string) {
	o.Name = v
}

// GetOptions returns the Options field value
func (o *Property1) GetOptions() []Option1 {
	if o == nil {
		var ret []Option1
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *Property1) GetOptionsOk() ([]Option1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *Property1) SetOptions(v []Option1) {
	o.Options = v
}

// GetCalculationFormula returns the CalculationFormula field value if set, zero value otherwise.
func (o *Property1) GetCalculationFormula() string {
	if o == nil || IsNil(o.CalculationFormula) {
		var ret string
		return ret
	}
	return *o.CalculationFormula
}

// GetCalculationFormulaOk returns a tuple with the CalculationFormula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetCalculationFormulaOk() (*string, bool) {
	if o == nil || IsNil(o.CalculationFormula) {
		return nil, false
	}
	return o.CalculationFormula, true
}

// HasCalculationFormula returns a boolean if a field has been set.
func (o *Property1) HasCalculationFormula() bool {
	if o != nil && !IsNil(o.CalculationFormula) {
		return true
	}

	return false
}

// SetCalculationFormula gets a reference to the given string and assigns it to the CalculationFormula field.
func (o *Property1) SetCalculationFormula(v string) {
	o.CalculationFormula = &v
}

// GetHasUniqueValue returns the HasUniqueValue field value if set, zero value otherwise.
func (o *Property1) GetHasUniqueValue() bool {
	if o == nil || IsNil(o.HasUniqueValue) {
		var ret bool
		return ret
	}
	return *o.HasUniqueValue
}

// GetHasUniqueValueOk returns a tuple with the HasUniqueValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetHasUniqueValueOk() (*bool, bool) {
	if o == nil || IsNil(o.HasUniqueValue) {
		return nil, false
	}
	return o.HasUniqueValue, true
}

// HasHasUniqueValue returns a boolean if a field has been set.
func (o *Property1) HasHasUniqueValue() bool {
	if o != nil && !IsNil(o.HasUniqueValue) {
		return true
	}

	return false
}

// SetHasUniqueValue gets a reference to the given bool and assigns it to the HasUniqueValue field.
func (o *Property1) SetHasUniqueValue(v bool) {
	o.HasUniqueValue = &v
}

// GetFieldType returns the FieldType field value
func (o *Property1) GetFieldType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value
// and a boolean to check if the value has been set.
func (o *Property1) GetFieldTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldType, true
}

// SetFieldType sets field value
func (o *Property1) SetFieldType(v string) {
	o.FieldType = v
}

// GetUpdatedUserId returns the UpdatedUserId field value if set, zero value otherwise.
func (o *Property1) GetUpdatedUserId() string {
	if o == nil || IsNil(o.UpdatedUserId) {
		var ret string
		return ret
	}
	return *o.UpdatedUserId
}

// GetUpdatedUserIdOk returns a tuple with the UpdatedUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetUpdatedUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedUserId) {
		return nil, false
	}
	return o.UpdatedUserId, true
}

// HasUpdatedUserId returns a boolean if a field has been set.
func (o *Property1) HasUpdatedUserId() bool {
	if o != nil && !IsNil(o.UpdatedUserId) {
		return true
	}

	return false
}

// SetUpdatedUserId gets a reference to the given string and assigns it to the UpdatedUserId field.
func (o *Property1) SetUpdatedUserId(v string) {
	o.UpdatedUserId = &v
}

// GetCalculated returns the Calculated field value if set, zero value otherwise.
func (o *Property1) GetCalculated() bool {
	if o == nil || IsNil(o.Calculated) {
		var ret bool
		return ret
	}
	return *o.Calculated
}

// GetCalculatedOk returns a tuple with the Calculated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetCalculatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Calculated) {
		return nil, false
	}
	return o.Calculated, true
}

// HasCalculated returns a boolean if a field has been set.
func (o *Property1) HasCalculated() bool {
	if o != nil && !IsNil(o.Calculated) {
		return true
	}

	return false
}

// SetCalculated gets a reference to the given bool and assigns it to the Calculated field.
func (o *Property1) SetCalculated(v bool) {
	o.Calculated = &v
}

// GetExternalOptions returns the ExternalOptions field value if set, zero value otherwise.
func (o *Property1) GetExternalOptions() bool {
	if o == nil || IsNil(o.ExternalOptions) {
		var ret bool
		return ret
	}
	return *o.ExternalOptions
}

// GetExternalOptionsOk returns a tuple with the ExternalOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetExternalOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalOptions) {
		return nil, false
	}
	return o.ExternalOptions, true
}

// HasExternalOptions returns a boolean if a field has been set.
func (o *Property1) HasExternalOptions() bool {
	if o != nil && !IsNil(o.ExternalOptions) {
		return true
	}

	return false
}

// SetExternalOptions gets a reference to the given bool and assigns it to the ExternalOptions field.
func (o *Property1) SetExternalOptions(v bool) {
	o.ExternalOptions = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Property1) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property1) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Property1) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Property1) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Property1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Property1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedUserId) {
		toSerialize["createdUserId"] = o.CreatedUserId
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.ModificationMetadata) {
		toSerialize["modificationMetadata"] = o.ModificationMetadata
	}
	if !IsNil(o.DisplayOrder) {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	toSerialize["description"] = o.Description
	if !IsNil(o.ShowCurrencySymbol) {
		toSerialize["showCurrencySymbol"] = o.ShowCurrencySymbol
	}
	toSerialize["label"] = o.Label
	toSerialize["type"] = o.Type
	if !IsNil(o.HubspotDefined) {
		toSerialize["hubspotDefined"] = o.HubspotDefined
	}
	if !IsNil(o.FormField) {
		toSerialize["formField"] = o.FormField
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.ArchivedAt) {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	toSerialize["groupName"] = o.GroupName
	if !IsNil(o.ReferencedObjectType) {
		toSerialize["referencedObjectType"] = o.ReferencedObjectType
	}
	toSerialize["name"] = o.Name
	toSerialize["options"] = o.Options
	if !IsNil(o.CalculationFormula) {
		toSerialize["calculationFormula"] = o.CalculationFormula
	}
	if !IsNil(o.HasUniqueValue) {
		toSerialize["hasUniqueValue"] = o.HasUniqueValue
	}
	toSerialize["fieldType"] = o.FieldType
	if !IsNil(o.UpdatedUserId) {
		toSerialize["updatedUserId"] = o.UpdatedUserId
	}
	if !IsNil(o.Calculated) {
		toSerialize["calculated"] = o.Calculated
	}
	if !IsNil(o.ExternalOptions) {
		toSerialize["externalOptions"] = o.ExternalOptions
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *Property1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"label",
		"type",
		"groupName",
		"name",
		"options",
		"fieldType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProperty1 := _Property1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProperty1)

	if err != nil {
		return err
	}

	*o = Property1(varProperty1)

	return err
}

type NullableProperty1 struct {
	value *Property1
	isSet bool
}

func (v NullableProperty1) Get() *Property1 {
	return v.value
}

func (v *NullableProperty1) Set(val *Property1) {
	v.value = val
	v.isSet = true
}

func (v NullableProperty1) IsSet() bool {
	return v.isSet
}

func (v *NullableProperty1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProperty1(val *Property1) *NullableProperty1 {
	return &NullableProperty1{value: val, isSet: true}
}

func (v NullableProperty1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProperty1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


