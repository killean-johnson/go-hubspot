/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PropertyDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyDefinition{}

// PropertyDefinition struct for PropertyDefinition
type PropertyDefinition struct {
	FulcrumPortalId *int32 `json:"fulcrumPortalId,omitempty"`
	ObjectTypeId string `json:"objectTypeId"`
	JanusGroup *string `json:"janusGroup,omitempty"`
	FulcrumTimestamp *int64 `json:"fulcrumTimestamp,omitempty"`
	Property Property `json:"property"`
	CalculationFormula *string `json:"calculationFormula,omitempty"`
	PropertyRequirements *DefaultRequirements `json:"propertyRequirements,omitempty"`
	DefinitionSource *PropertyDefinitionSource `json:"definitionSource,omitempty"`
	ExternalOptionsMetaData *ExternalOptionsMetaData `json:"externalOptionsMetaData,omitempty"`
	Permission *FieldLevelPermission `json:"permission,omitempty"`
	CalculationExpression *OrInputsInner `json:"calculationExpression,omitempty"`
	RollupExpression *RollupExpression `json:"rollupExpression,omitempty"`
}

type _PropertyDefinition PropertyDefinition

// NewPropertyDefinition instantiates a new PropertyDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyDefinition(objectTypeId string, property Property) *PropertyDefinition {
	this := PropertyDefinition{}
	this.ObjectTypeId = objectTypeId
	this.Property = property
	return &this
}

// NewPropertyDefinitionWithDefaults instantiates a new PropertyDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyDefinitionWithDefaults() *PropertyDefinition {
	this := PropertyDefinition{}
	return &this
}

// GetFulcrumPortalId returns the FulcrumPortalId field value if set, zero value otherwise.
func (o *PropertyDefinition) GetFulcrumPortalId() int32 {
	if o == nil || IsNil(o.FulcrumPortalId) {
		var ret int32
		return ret
	}
	return *o.FulcrumPortalId
}

// GetFulcrumPortalIdOk returns a tuple with the FulcrumPortalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetFulcrumPortalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FulcrumPortalId) {
		return nil, false
	}
	return o.FulcrumPortalId, true
}

// HasFulcrumPortalId returns a boolean if a field has been set.
func (o *PropertyDefinition) HasFulcrumPortalId() bool {
	if o != nil && !IsNil(o.FulcrumPortalId) {
		return true
	}

	return false
}

// SetFulcrumPortalId gets a reference to the given int32 and assigns it to the FulcrumPortalId field.
func (o *PropertyDefinition) SetFulcrumPortalId(v int32) {
	o.FulcrumPortalId = &v
}

// GetObjectTypeId returns the ObjectTypeId field value
func (o *PropertyDefinition) GetObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectTypeId, true
}

// SetObjectTypeId sets field value
func (o *PropertyDefinition) SetObjectTypeId(v string) {
	o.ObjectTypeId = v
}

// GetJanusGroup returns the JanusGroup field value if set, zero value otherwise.
func (o *PropertyDefinition) GetJanusGroup() string {
	if o == nil || IsNil(o.JanusGroup) {
		var ret string
		return ret
	}
	return *o.JanusGroup
}

// GetJanusGroupOk returns a tuple with the JanusGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetJanusGroupOk() (*string, bool) {
	if o == nil || IsNil(o.JanusGroup) {
		return nil, false
	}
	return o.JanusGroup, true
}

// HasJanusGroup returns a boolean if a field has been set.
func (o *PropertyDefinition) HasJanusGroup() bool {
	if o != nil && !IsNil(o.JanusGroup) {
		return true
	}

	return false
}

// SetJanusGroup gets a reference to the given string and assigns it to the JanusGroup field.
func (o *PropertyDefinition) SetJanusGroup(v string) {
	o.JanusGroup = &v
}

// GetFulcrumTimestamp returns the FulcrumTimestamp field value if set, zero value otherwise.
func (o *PropertyDefinition) GetFulcrumTimestamp() int64 {
	if o == nil || IsNil(o.FulcrumTimestamp) {
		var ret int64
		return ret
	}
	return *o.FulcrumTimestamp
}

// GetFulcrumTimestampOk returns a tuple with the FulcrumTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetFulcrumTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.FulcrumTimestamp) {
		return nil, false
	}
	return o.FulcrumTimestamp, true
}

// HasFulcrumTimestamp returns a boolean if a field has been set.
func (o *PropertyDefinition) HasFulcrumTimestamp() bool {
	if o != nil && !IsNil(o.FulcrumTimestamp) {
		return true
	}

	return false
}

// SetFulcrumTimestamp gets a reference to the given int64 and assigns it to the FulcrumTimestamp field.
func (o *PropertyDefinition) SetFulcrumTimestamp(v int64) {
	o.FulcrumTimestamp = &v
}

// GetProperty returns the Property field value
func (o *PropertyDefinition) GetProperty() Property {
	if o == nil {
		var ret Property
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetPropertyOk() (*Property, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *PropertyDefinition) SetProperty(v Property) {
	o.Property = v
}

// GetCalculationFormula returns the CalculationFormula field value if set, zero value otherwise.
func (o *PropertyDefinition) GetCalculationFormula() string {
	if o == nil || IsNil(o.CalculationFormula) {
		var ret string
		return ret
	}
	return *o.CalculationFormula
}

// GetCalculationFormulaOk returns a tuple with the CalculationFormula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetCalculationFormulaOk() (*string, bool) {
	if o == nil || IsNil(o.CalculationFormula) {
		return nil, false
	}
	return o.CalculationFormula, true
}

// HasCalculationFormula returns a boolean if a field has been set.
func (o *PropertyDefinition) HasCalculationFormula() bool {
	if o != nil && !IsNil(o.CalculationFormula) {
		return true
	}

	return false
}

// SetCalculationFormula gets a reference to the given string and assigns it to the CalculationFormula field.
func (o *PropertyDefinition) SetCalculationFormula(v string) {
	o.CalculationFormula = &v
}

// GetPropertyRequirements returns the PropertyRequirements field value if set, zero value otherwise.
func (o *PropertyDefinition) GetPropertyRequirements() DefaultRequirements {
	if o == nil || IsNil(o.PropertyRequirements) {
		var ret DefaultRequirements
		return ret
	}
	return *o.PropertyRequirements
}

// GetPropertyRequirementsOk returns a tuple with the PropertyRequirements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetPropertyRequirementsOk() (*DefaultRequirements, bool) {
	if o == nil || IsNil(o.PropertyRequirements) {
		return nil, false
	}
	return o.PropertyRequirements, true
}

// HasPropertyRequirements returns a boolean if a field has been set.
func (o *PropertyDefinition) HasPropertyRequirements() bool {
	if o != nil && !IsNil(o.PropertyRequirements) {
		return true
	}

	return false
}

// SetPropertyRequirements gets a reference to the given DefaultRequirements and assigns it to the PropertyRequirements field.
func (o *PropertyDefinition) SetPropertyRequirements(v DefaultRequirements) {
	o.PropertyRequirements = &v
}

// GetDefinitionSource returns the DefinitionSource field value if set, zero value otherwise.
func (o *PropertyDefinition) GetDefinitionSource() PropertyDefinitionSource {
	if o == nil || IsNil(o.DefinitionSource) {
		var ret PropertyDefinitionSource
		return ret
	}
	return *o.DefinitionSource
}

// GetDefinitionSourceOk returns a tuple with the DefinitionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetDefinitionSourceOk() (*PropertyDefinitionSource, bool) {
	if o == nil || IsNil(o.DefinitionSource) {
		return nil, false
	}
	return o.DefinitionSource, true
}

// HasDefinitionSource returns a boolean if a field has been set.
func (o *PropertyDefinition) HasDefinitionSource() bool {
	if o != nil && !IsNil(o.DefinitionSource) {
		return true
	}

	return false
}

// SetDefinitionSource gets a reference to the given PropertyDefinitionSource and assigns it to the DefinitionSource field.
func (o *PropertyDefinition) SetDefinitionSource(v PropertyDefinitionSource) {
	o.DefinitionSource = &v
}

// GetExternalOptionsMetaData returns the ExternalOptionsMetaData field value if set, zero value otherwise.
func (o *PropertyDefinition) GetExternalOptionsMetaData() ExternalOptionsMetaData {
	if o == nil || IsNil(o.ExternalOptionsMetaData) {
		var ret ExternalOptionsMetaData
		return ret
	}
	return *o.ExternalOptionsMetaData
}

// GetExternalOptionsMetaDataOk returns a tuple with the ExternalOptionsMetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetExternalOptionsMetaDataOk() (*ExternalOptionsMetaData, bool) {
	if o == nil || IsNil(o.ExternalOptionsMetaData) {
		return nil, false
	}
	return o.ExternalOptionsMetaData, true
}

// HasExternalOptionsMetaData returns a boolean if a field has been set.
func (o *PropertyDefinition) HasExternalOptionsMetaData() bool {
	if o != nil && !IsNil(o.ExternalOptionsMetaData) {
		return true
	}

	return false
}

// SetExternalOptionsMetaData gets a reference to the given ExternalOptionsMetaData and assigns it to the ExternalOptionsMetaData field.
func (o *PropertyDefinition) SetExternalOptionsMetaData(v ExternalOptionsMetaData) {
	o.ExternalOptionsMetaData = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *PropertyDefinition) GetPermission() FieldLevelPermission {
	if o == nil || IsNil(o.Permission) {
		var ret FieldLevelPermission
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetPermissionOk() (*FieldLevelPermission, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *PropertyDefinition) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given FieldLevelPermission and assigns it to the Permission field.
func (o *PropertyDefinition) SetPermission(v FieldLevelPermission) {
	o.Permission = &v
}

// GetCalculationExpression returns the CalculationExpression field value if set, zero value otherwise.
func (o *PropertyDefinition) GetCalculationExpression() OrInputsInner {
	if o == nil || IsNil(o.CalculationExpression) {
		var ret OrInputsInner
		return ret
	}
	return *o.CalculationExpression
}

// GetCalculationExpressionOk returns a tuple with the CalculationExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetCalculationExpressionOk() (*OrInputsInner, bool) {
	if o == nil || IsNil(o.CalculationExpression) {
		return nil, false
	}
	return o.CalculationExpression, true
}

// HasCalculationExpression returns a boolean if a field has been set.
func (o *PropertyDefinition) HasCalculationExpression() bool {
	if o != nil && !IsNil(o.CalculationExpression) {
		return true
	}

	return false
}

// SetCalculationExpression gets a reference to the given OrInputsInner and assigns it to the CalculationExpression field.
func (o *PropertyDefinition) SetCalculationExpression(v OrInputsInner) {
	o.CalculationExpression = &v
}

// GetRollupExpression returns the RollupExpression field value if set, zero value otherwise.
func (o *PropertyDefinition) GetRollupExpression() RollupExpression {
	if o == nil || IsNil(o.RollupExpression) {
		var ret RollupExpression
		return ret
	}
	return *o.RollupExpression
}

// GetRollupExpressionOk returns a tuple with the RollupExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetRollupExpressionOk() (*RollupExpression, bool) {
	if o == nil || IsNil(o.RollupExpression) {
		return nil, false
	}
	return o.RollupExpression, true
}

// HasRollupExpression returns a boolean if a field has been set.
func (o *PropertyDefinition) HasRollupExpression() bool {
	if o != nil && !IsNil(o.RollupExpression) {
		return true
	}

	return false
}

// SetRollupExpression gets a reference to the given RollupExpression and assigns it to the RollupExpression field.
func (o *PropertyDefinition) SetRollupExpression(v RollupExpression) {
	o.RollupExpression = &v
}

func (o PropertyDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FulcrumPortalId) {
		toSerialize["fulcrumPortalId"] = o.FulcrumPortalId
	}
	toSerialize["objectTypeId"] = o.ObjectTypeId
	if !IsNil(o.JanusGroup) {
		toSerialize["janusGroup"] = o.JanusGroup
	}
	if !IsNil(o.FulcrumTimestamp) {
		toSerialize["fulcrumTimestamp"] = o.FulcrumTimestamp
	}
	toSerialize["property"] = o.Property
	if !IsNil(o.CalculationFormula) {
		toSerialize["calculationFormula"] = o.CalculationFormula
	}
	if !IsNil(o.PropertyRequirements) {
		toSerialize["propertyRequirements"] = o.PropertyRequirements
	}
	if !IsNil(o.DefinitionSource) {
		toSerialize["definitionSource"] = o.DefinitionSource
	}
	if !IsNil(o.ExternalOptionsMetaData) {
		toSerialize["externalOptionsMetaData"] = o.ExternalOptionsMetaData
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.CalculationExpression) {
		toSerialize["calculationExpression"] = o.CalculationExpression
	}
	if !IsNil(o.RollupExpression) {
		toSerialize["rollupExpression"] = o.RollupExpression
	}
	return toSerialize, nil
}

func (o *PropertyDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectTypeId",
		"property",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPropertyDefinition := _PropertyDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPropertyDefinition)

	if err != nil {
		return err
	}

	*o = PropertyDefinition(varPropertyDefinition)

	return err
}

type NullablePropertyDefinition struct {
	value *PropertyDefinition
	isSet bool
}

func (v NullablePropertyDefinition) Get() *PropertyDefinition {
	return v.value
}

func (v *NullablePropertyDefinition) Set(val *PropertyDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyDefinition(val *PropertyDefinition) *NullablePropertyDefinition {
	return &NullablePropertyDefinition{value: val, isSet: true}
}

func (v NullablePropertyDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


