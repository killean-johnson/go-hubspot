/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ObjectSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectSchema{}

// ObjectSchema struct for ObjectSchema
type ObjectSchema struct {
	Associations []AssociationDefinition `json:"associations"`
	SecondaryDisplayProperties []string `json:"secondaryDisplayProperties"`
	ObjectTypeId string `json:"objectTypeId"`
	Description *string `json:"description,omitempty"`
	FullyQualifiedName string `json:"fullyQualifiedName"`
	Labels ObjectTypeDefinitionLabels `json:"labels"`
	Archived bool `json:"archived"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	RequiredProperties []string `json:"requiredProperties"`
	SearchableProperties []string `json:"searchableProperties"`
	PrimaryDisplayProperty *string `json:"primaryDisplayProperty,omitempty"`
	Name string `json:"name"`
	Id string `json:"id"`
	Properties []Property1 `json:"properties"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type _ObjectSchema ObjectSchema

// NewObjectSchema instantiates a new ObjectSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectSchema(associations []AssociationDefinition, secondaryDisplayProperties []string, objectTypeId string, fullyQualifiedName string, labels ObjectTypeDefinitionLabels, archived bool, requiredProperties []string, searchableProperties []string, name string, id string, properties []Property1) *ObjectSchema {
	this := ObjectSchema{}
	this.Associations = associations
	this.SecondaryDisplayProperties = secondaryDisplayProperties
	this.ObjectTypeId = objectTypeId
	this.FullyQualifiedName = fullyQualifiedName
	this.Labels = labels
	this.Archived = archived
	this.RequiredProperties = requiredProperties
	this.SearchableProperties = searchableProperties
	this.Name = name
	this.Id = id
	this.Properties = properties
	return &this
}

// NewObjectSchemaWithDefaults instantiates a new ObjectSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectSchemaWithDefaults() *ObjectSchema {
	this := ObjectSchema{}
	return &this
}

// GetAssociations returns the Associations field value
func (o *ObjectSchema) GetAssociations() []AssociationDefinition {
	if o == nil {
		var ret []AssociationDefinition
		return ret
	}

	return o.Associations
}

// GetAssociationsOk returns a tuple with the Associations field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetAssociationsOk() ([]AssociationDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Associations, true
}

// SetAssociations sets field value
func (o *ObjectSchema) SetAssociations(v []AssociationDefinition) {
	o.Associations = v
}

// GetSecondaryDisplayProperties returns the SecondaryDisplayProperties field value
func (o *ObjectSchema) GetSecondaryDisplayProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SecondaryDisplayProperties
}

// GetSecondaryDisplayPropertiesOk returns a tuple with the SecondaryDisplayProperties field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetSecondaryDisplayPropertiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecondaryDisplayProperties, true
}

// SetSecondaryDisplayProperties sets field value
func (o *ObjectSchema) SetSecondaryDisplayProperties(v []string) {
	o.SecondaryDisplayProperties = v
}

// GetObjectTypeId returns the ObjectTypeId field value
func (o *ObjectSchema) GetObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectTypeId, true
}

// SetObjectTypeId sets field value
func (o *ObjectSchema) SetObjectTypeId(v string) {
	o.ObjectTypeId = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ObjectSchema) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ObjectSchema) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ObjectSchema) SetDescription(v string) {
	o.Description = &v
}

// GetFullyQualifiedName returns the FullyQualifiedName field value
func (o *ObjectSchema) GetFullyQualifiedName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullyQualifiedName
}

// GetFullyQualifiedNameOk returns a tuple with the FullyQualifiedName field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetFullyQualifiedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullyQualifiedName, true
}

// SetFullyQualifiedName sets field value
func (o *ObjectSchema) SetFullyQualifiedName(v string) {
	o.FullyQualifiedName = v
}

// GetLabels returns the Labels field value
func (o *ObjectSchema) GetLabels() ObjectTypeDefinitionLabels {
	if o == nil {
		var ret ObjectTypeDefinitionLabels
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetLabelsOk() (*ObjectTypeDefinitionLabels, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *ObjectSchema) SetLabels(v ObjectTypeDefinitionLabels) {
	o.Labels = v
}

// GetArchived returns the Archived field value
func (o *ObjectSchema) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *ObjectSchema) SetArchived(v bool) {
	o.Archived = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ObjectSchema) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ObjectSchema) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ObjectSchema) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetRequiredProperties returns the RequiredProperties field value
func (o *ObjectSchema) GetRequiredProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RequiredProperties
}

// GetRequiredPropertiesOk returns a tuple with the RequiredProperties field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetRequiredPropertiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredProperties, true
}

// SetRequiredProperties sets field value
func (o *ObjectSchema) SetRequiredProperties(v []string) {
	o.RequiredProperties = v
}

// GetSearchableProperties returns the SearchableProperties field value
func (o *ObjectSchema) GetSearchableProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SearchableProperties
}

// GetSearchablePropertiesOk returns a tuple with the SearchableProperties field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetSearchablePropertiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchableProperties, true
}

// SetSearchableProperties sets field value
func (o *ObjectSchema) SetSearchableProperties(v []string) {
	o.SearchableProperties = v
}

// GetPrimaryDisplayProperty returns the PrimaryDisplayProperty field value if set, zero value otherwise.
func (o *ObjectSchema) GetPrimaryDisplayProperty() string {
	if o == nil || IsNil(o.PrimaryDisplayProperty) {
		var ret string
		return ret
	}
	return *o.PrimaryDisplayProperty
}

// GetPrimaryDisplayPropertyOk returns a tuple with the PrimaryDisplayProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetPrimaryDisplayPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryDisplayProperty) {
		return nil, false
	}
	return o.PrimaryDisplayProperty, true
}

// HasPrimaryDisplayProperty returns a boolean if a field has been set.
func (o *ObjectSchema) HasPrimaryDisplayProperty() bool {
	if o != nil && !IsNil(o.PrimaryDisplayProperty) {
		return true
	}

	return false
}

// SetPrimaryDisplayProperty gets a reference to the given string and assigns it to the PrimaryDisplayProperty field.
func (o *ObjectSchema) SetPrimaryDisplayProperty(v string) {
	o.PrimaryDisplayProperty = &v
}

// GetName returns the Name field value
func (o *ObjectSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ObjectSchema) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *ObjectSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ObjectSchema) SetId(v string) {
	o.Id = v
}

// GetProperties returns the Properties field value
func (o *ObjectSchema) GetProperties() []Property1 {
	if o == nil {
		var ret []Property1
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetPropertiesOk() ([]Property1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *ObjectSchema) SetProperties(v []Property1) {
	o.Properties = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ObjectSchema) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ObjectSchema) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ObjectSchema) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ObjectSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["associations"] = o.Associations
	toSerialize["secondaryDisplayProperties"] = o.SecondaryDisplayProperties
	toSerialize["objectTypeId"] = o.ObjectTypeId
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["fullyQualifiedName"] = o.FullyQualifiedName
	toSerialize["labels"] = o.Labels
	toSerialize["archived"] = o.Archived
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	toSerialize["requiredProperties"] = o.RequiredProperties
	toSerialize["searchableProperties"] = o.SearchableProperties
	if !IsNil(o.PrimaryDisplayProperty) {
		toSerialize["primaryDisplayProperty"] = o.PrimaryDisplayProperty
	}
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	toSerialize["properties"] = o.Properties
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *ObjectSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"associations",
		"secondaryDisplayProperties",
		"objectTypeId",
		"fullyQualifiedName",
		"labels",
		"archived",
		"requiredProperties",
		"searchableProperties",
		"name",
		"id",
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectSchema := _ObjectSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectSchema)

	if err != nil {
		return err
	}

	*o = ObjectSchema(varObjectSchema)

	return err
}

type NullableObjectSchema struct {
	value *ObjectSchema
	isSet bool
}

func (v NullableObjectSchema) Get() *ObjectSchema {
	return v.value
}

func (v *NullableObjectSchema) Set(val *ObjectSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectSchema(val *ObjectSchema) *NullableObjectSchema {
	return &NullableObjectSchema{value: val, isSet: true}
}

func (v NullableObjectSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


