/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EventVisibilityResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventVisibilityResponse{}

// EventVisibilityResponse struct for EventVisibilityResponse
type EventVisibilityResponse struct {
	CreatedAt time.Time `json:"createdAt"`
	VisibilitySettings []EventVisibilityChange `json:"visibilitySettings"`
}

type _EventVisibilityResponse EventVisibilityResponse

// NewEventVisibilityResponse instantiates a new EventVisibilityResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventVisibilityResponse(createdAt time.Time, visibilitySettings []EventVisibilityChange) *EventVisibilityResponse {
	this := EventVisibilityResponse{}
	this.CreatedAt = createdAt
	this.VisibilitySettings = visibilitySettings
	return &this
}

// NewEventVisibilityResponseWithDefaults instantiates a new EventVisibilityResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventVisibilityResponseWithDefaults() *EventVisibilityResponse {
	this := EventVisibilityResponse{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *EventVisibilityResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EventVisibilityResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EventVisibilityResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetVisibilitySettings returns the VisibilitySettings field value
func (o *EventVisibilityResponse) GetVisibilitySettings() []EventVisibilityChange {
	if o == nil {
		var ret []EventVisibilityChange
		return ret
	}

	return o.VisibilitySettings
}

// GetVisibilitySettingsOk returns a tuple with the VisibilitySettings field value
// and a boolean to check if the value has been set.
func (o *EventVisibilityResponse) GetVisibilitySettingsOk() ([]EventVisibilityChange, bool) {
	if o == nil {
		return nil, false
	}
	return o.VisibilitySettings, true
}

// SetVisibilitySettings sets field value
func (o *EventVisibilityResponse) SetVisibilitySettings(v []EventVisibilityChange) {
	o.VisibilitySettings = v
}

func (o EventVisibilityResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventVisibilityResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["visibilitySettings"] = o.VisibilitySettings
	return toSerialize, nil
}

func (o *EventVisibilityResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"visibilitySettings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventVisibilityResponse := _EventVisibilityResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventVisibilityResponse)

	if err != nil {
		return err
	}

	*o = EventVisibilityResponse(varEventVisibilityResponse)

	return err
}

type NullableEventVisibilityResponse struct {
	value *EventVisibilityResponse
	isSet bool
}

func (v NullableEventVisibilityResponse) Get() *EventVisibilityResponse {
	return v.value
}

func (v *NullableEventVisibilityResponse) Set(val *EventVisibilityResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEventVisibilityResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEventVisibilityResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventVisibilityResponse(val *EventVisibilityResponse) *NullableEventVisibilityResponse {
	return &NullableEventVisibilityResponse{value: val, isSet: true}
}

func (v NullableEventVisibilityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventVisibilityResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


