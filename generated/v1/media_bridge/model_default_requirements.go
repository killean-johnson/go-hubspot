/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DefaultRequirements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultRequirements{}

// DefaultRequirements struct for DefaultRequirements
type DefaultRequirements struct {
	Gates []string `json:"gates"`
	Settings []string `json:"settings"`
	ScopeNames []string `json:"scopeNames"`
	Operator string `json:"operator"`
}

type _DefaultRequirements DefaultRequirements

// NewDefaultRequirements instantiates a new DefaultRequirements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultRequirements(gates []string, settings []string, scopeNames []string, operator string) *DefaultRequirements {
	this := DefaultRequirements{}
	this.Gates = gates
	this.Settings = settings
	this.ScopeNames = scopeNames
	this.Operator = operator
	return &this
}

// NewDefaultRequirementsWithDefaults instantiates a new DefaultRequirements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultRequirementsWithDefaults() *DefaultRequirements {
	this := DefaultRequirements{}
	return &this
}

// GetGates returns the Gates field value
func (o *DefaultRequirements) GetGates() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Gates
}

// GetGatesOk returns a tuple with the Gates field value
// and a boolean to check if the value has been set.
func (o *DefaultRequirements) GetGatesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gates, true
}

// SetGates sets field value
func (o *DefaultRequirements) SetGates(v []string) {
	o.Gates = v
}

// GetSettings returns the Settings field value
func (o *DefaultRequirements) GetSettings() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *DefaultRequirements) GetSettingsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Settings, true
}

// SetSettings sets field value
func (o *DefaultRequirements) SetSettings(v []string) {
	o.Settings = v
}

// GetScopeNames returns the ScopeNames field value
func (o *DefaultRequirements) GetScopeNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ScopeNames
}

// GetScopeNamesOk returns a tuple with the ScopeNames field value
// and a boolean to check if the value has been set.
func (o *DefaultRequirements) GetScopeNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScopeNames, true
}

// SetScopeNames sets field value
func (o *DefaultRequirements) SetScopeNames(v []string) {
	o.ScopeNames = v
}

// GetOperator returns the Operator field value
func (o *DefaultRequirements) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *DefaultRequirements) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *DefaultRequirements) SetOperator(v string) {
	o.Operator = v
}

func (o DefaultRequirements) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultRequirements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gates"] = o.Gates
	toSerialize["settings"] = o.Settings
	toSerialize["scopeNames"] = o.ScopeNames
	toSerialize["operator"] = o.Operator
	return toSerialize, nil
}

func (o *DefaultRequirements) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gates",
		"settings",
		"scopeNames",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDefaultRequirements := _DefaultRequirements{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDefaultRequirements)

	if err != nil {
		return err
	}

	*o = DefaultRequirements(varDefaultRequirements)

	return err
}

type NullableDefaultRequirements struct {
	value *DefaultRequirements
	isSet bool
}

func (v NullableDefaultRequirements) Get() *DefaultRequirements {
	return v.value
}

func (v *NullableDefaultRequirements) Set(val *DefaultRequirements) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultRequirements) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultRequirements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultRequirements(val *DefaultRequirements) *NullableDefaultRequirements {
	return &NullableDefaultRequirements{value: val, isSet: true}
}

func (v NullableDefaultRequirements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultRequirements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


