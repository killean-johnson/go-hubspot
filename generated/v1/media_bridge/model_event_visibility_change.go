/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventVisibilityChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventVisibilityChange{}

// EventVisibilityChange struct for EventVisibilityChange
type EventVisibilityChange struct {
	ShowInWorkflows *bool `json:"showInWorkflows,omitempty"`
	ShowInReporting *bool `json:"showInReporting,omitempty"`
	EventType string `json:"eventType"`
	ShowInTimeline *bool `json:"showInTimeline,omitempty"`
	UpdatedAt int64 `json:"updatedAt"`
}

type _EventVisibilityChange EventVisibilityChange

// NewEventVisibilityChange instantiates a new EventVisibilityChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventVisibilityChange(eventType string, updatedAt int64) *EventVisibilityChange {
	this := EventVisibilityChange{}
	this.EventType = eventType
	this.UpdatedAt = updatedAt
	return &this
}

// NewEventVisibilityChangeWithDefaults instantiates a new EventVisibilityChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventVisibilityChangeWithDefaults() *EventVisibilityChange {
	this := EventVisibilityChange{}
	return &this
}

// GetShowInWorkflows returns the ShowInWorkflows field value if set, zero value otherwise.
func (o *EventVisibilityChange) GetShowInWorkflows() bool {
	if o == nil || IsNil(o.ShowInWorkflows) {
		var ret bool
		return ret
	}
	return *o.ShowInWorkflows
}

// GetShowInWorkflowsOk returns a tuple with the ShowInWorkflows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisibilityChange) GetShowInWorkflowsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowInWorkflows) {
		return nil, false
	}
	return o.ShowInWorkflows, true
}

// HasShowInWorkflows returns a boolean if a field has been set.
func (o *EventVisibilityChange) HasShowInWorkflows() bool {
	if o != nil && !IsNil(o.ShowInWorkflows) {
		return true
	}

	return false
}

// SetShowInWorkflows gets a reference to the given bool and assigns it to the ShowInWorkflows field.
func (o *EventVisibilityChange) SetShowInWorkflows(v bool) {
	o.ShowInWorkflows = &v
}

// GetShowInReporting returns the ShowInReporting field value if set, zero value otherwise.
func (o *EventVisibilityChange) GetShowInReporting() bool {
	if o == nil || IsNil(o.ShowInReporting) {
		var ret bool
		return ret
	}
	return *o.ShowInReporting
}

// GetShowInReportingOk returns a tuple with the ShowInReporting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisibilityChange) GetShowInReportingOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowInReporting) {
		return nil, false
	}
	return o.ShowInReporting, true
}

// HasShowInReporting returns a boolean if a field has been set.
func (o *EventVisibilityChange) HasShowInReporting() bool {
	if o != nil && !IsNil(o.ShowInReporting) {
		return true
	}

	return false
}

// SetShowInReporting gets a reference to the given bool and assigns it to the ShowInReporting field.
func (o *EventVisibilityChange) SetShowInReporting(v bool) {
	o.ShowInReporting = &v
}

// GetEventType returns the EventType field value
func (o *EventVisibilityChange) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *EventVisibilityChange) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *EventVisibilityChange) SetEventType(v string) {
	o.EventType = v
}

// GetShowInTimeline returns the ShowInTimeline field value if set, zero value otherwise.
func (o *EventVisibilityChange) GetShowInTimeline() bool {
	if o == nil || IsNil(o.ShowInTimeline) {
		var ret bool
		return ret
	}
	return *o.ShowInTimeline
}

// GetShowInTimelineOk returns a tuple with the ShowInTimeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisibilityChange) GetShowInTimelineOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowInTimeline) {
		return nil, false
	}
	return o.ShowInTimeline, true
}

// HasShowInTimeline returns a boolean if a field has been set.
func (o *EventVisibilityChange) HasShowInTimeline() bool {
	if o != nil && !IsNil(o.ShowInTimeline) {
		return true
	}

	return false
}

// SetShowInTimeline gets a reference to the given bool and assigns it to the ShowInTimeline field.
func (o *EventVisibilityChange) SetShowInTimeline(v bool) {
	o.ShowInTimeline = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *EventVisibilityChange) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *EventVisibilityChange) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *EventVisibilityChange) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

func (o EventVisibilityChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventVisibilityChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShowInWorkflows) {
		toSerialize["showInWorkflows"] = o.ShowInWorkflows
	}
	if !IsNil(o.ShowInReporting) {
		toSerialize["showInReporting"] = o.ShowInReporting
	}
	toSerialize["eventType"] = o.EventType
	if !IsNil(o.ShowInTimeline) {
		toSerialize["showInTimeline"] = o.ShowInTimeline
	}
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *EventVisibilityChange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventType",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventVisibilityChange := _EventVisibilityChange{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventVisibilityChange)

	if err != nil {
		return err
	}

	*o = EventVisibilityChange(varEventVisibilityChange)

	return err
}

type NullableEventVisibilityChange struct {
	value *EventVisibilityChange
	isSet bool
}

func (v NullableEventVisibilityChange) Get() *EventVisibilityChange {
	return v.value
}

func (v *NullableEventVisibilityChange) Set(val *EventVisibilityChange) {
	v.value = val
	v.isSet = true
}

func (v NullableEventVisibilityChange) IsSet() bool {
	return v.isSet
}

func (v *NullableEventVisibilityChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventVisibilityChange(val *EventVisibilityChange) *NullableEventVisibilityChange {
	return &NullableEventVisibilityChange{value: val, isSet: true}
}

func (v NullableEventVisibilityChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventVisibilityChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


