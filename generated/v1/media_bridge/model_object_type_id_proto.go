/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectTypeIdProto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectTypeIdProto{}

// ObjectTypeIdProto struct for ObjectTypeIdProto
type ObjectTypeIdProto struct {
	InnerId int32 `json:"innerId"`
	MetaTypeId int32 `json:"metaTypeId"`
}

type _ObjectTypeIdProto ObjectTypeIdProto

// NewObjectTypeIdProto instantiates a new ObjectTypeIdProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectTypeIdProto(innerId int32, metaTypeId int32) *ObjectTypeIdProto {
	this := ObjectTypeIdProto{}
	this.InnerId = innerId
	this.MetaTypeId = metaTypeId
	return &this
}

// NewObjectTypeIdProtoWithDefaults instantiates a new ObjectTypeIdProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectTypeIdProtoWithDefaults() *ObjectTypeIdProto {
	this := ObjectTypeIdProto{}
	return &this
}

// GetInnerId returns the InnerId field value
func (o *ObjectTypeIdProto) GetInnerId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InnerId
}

// GetInnerIdOk returns a tuple with the InnerId field value
// and a boolean to check if the value has been set.
func (o *ObjectTypeIdProto) GetInnerIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InnerId, true
}

// SetInnerId sets field value
func (o *ObjectTypeIdProto) SetInnerId(v int32) {
	o.InnerId = v
}

// GetMetaTypeId returns the MetaTypeId field value
func (o *ObjectTypeIdProto) GetMetaTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MetaTypeId
}

// GetMetaTypeIdOk returns a tuple with the MetaTypeId field value
// and a boolean to check if the value has been set.
func (o *ObjectTypeIdProto) GetMetaTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaTypeId, true
}

// SetMetaTypeId sets field value
func (o *ObjectTypeIdProto) SetMetaTypeId(v int32) {
	o.MetaTypeId = v
}

func (o ObjectTypeIdProto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectTypeIdProto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["innerId"] = o.InnerId
	toSerialize["metaTypeId"] = o.MetaTypeId
	return toSerialize, nil
}

func (o *ObjectTypeIdProto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"innerId",
		"metaTypeId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectTypeIdProto := _ObjectTypeIdProto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectTypeIdProto)

	if err != nil {
		return err
	}

	*o = ObjectTypeIdProto(varObjectTypeIdProto)

	return err
}

type NullableObjectTypeIdProto struct {
	value *ObjectTypeIdProto
	isSet bool
}

func (v NullableObjectTypeIdProto) Get() *ObjectTypeIdProto {
	return v.value
}

func (v *NullableObjectTypeIdProto) Set(val *ObjectTypeIdProto) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectTypeIdProto) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectTypeIdProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectTypeIdProto(val *ObjectTypeIdProto) *NullableObjectTypeIdProto {
	return &NullableObjectTypeIdProto{value: val, isSet: true}
}

func (v NullableObjectTypeIdProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectTypeIdProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


