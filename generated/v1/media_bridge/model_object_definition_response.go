/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectDefinitionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectDefinitionResponse{}

// ObjectDefinitionResponse struct for ObjectDefinitionResponse
type ObjectDefinitionResponse struct {
	Schema *InboundDbObjectType `json:"schema,omitempty"`
	ObjectTypeId string `json:"objectTypeId"`
	ObjectTypeName string `json:"objectTypeName"`
	Properties []PropertyDefinition `json:"properties"`
	PropertyGroups []GroupView `json:"propertyGroups"`
}

type _ObjectDefinitionResponse ObjectDefinitionResponse

// NewObjectDefinitionResponse instantiates a new ObjectDefinitionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectDefinitionResponse(objectTypeId string, objectTypeName string, properties []PropertyDefinition, propertyGroups []GroupView) *ObjectDefinitionResponse {
	this := ObjectDefinitionResponse{}
	this.ObjectTypeId = objectTypeId
	this.ObjectTypeName = objectTypeName
	this.Properties = properties
	this.PropertyGroups = propertyGroups
	return &this
}

// NewObjectDefinitionResponseWithDefaults instantiates a new ObjectDefinitionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectDefinitionResponseWithDefaults() *ObjectDefinitionResponse {
	this := ObjectDefinitionResponse{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *ObjectDefinitionResponse) GetSchema() InboundDbObjectType {
	if o == nil || IsNil(o.Schema) {
		var ret InboundDbObjectType
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectDefinitionResponse) GetSchemaOk() (*InboundDbObjectType, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *ObjectDefinitionResponse) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given InboundDbObjectType and assigns it to the Schema field.
func (o *ObjectDefinitionResponse) SetSchema(v InboundDbObjectType) {
	o.Schema = &v
}

// GetObjectTypeId returns the ObjectTypeId field value
func (o *ObjectDefinitionResponse) GetObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *ObjectDefinitionResponse) GetObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectTypeId, true
}

// SetObjectTypeId sets field value
func (o *ObjectDefinitionResponse) SetObjectTypeId(v string) {
	o.ObjectTypeId = v
}

// GetObjectTypeName returns the ObjectTypeName field value
func (o *ObjectDefinitionResponse) GetObjectTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectTypeName
}

// GetObjectTypeNameOk returns a tuple with the ObjectTypeName field value
// and a boolean to check if the value has been set.
func (o *ObjectDefinitionResponse) GetObjectTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectTypeName, true
}

// SetObjectTypeName sets field value
func (o *ObjectDefinitionResponse) SetObjectTypeName(v string) {
	o.ObjectTypeName = v
}

// GetProperties returns the Properties field value
func (o *ObjectDefinitionResponse) GetProperties() []PropertyDefinition {
	if o == nil {
		var ret []PropertyDefinition
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *ObjectDefinitionResponse) GetPropertiesOk() ([]PropertyDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *ObjectDefinitionResponse) SetProperties(v []PropertyDefinition) {
	o.Properties = v
}

// GetPropertyGroups returns the PropertyGroups field value
func (o *ObjectDefinitionResponse) GetPropertyGroups() []GroupView {
	if o == nil {
		var ret []GroupView
		return ret
	}

	return o.PropertyGroups
}

// GetPropertyGroupsOk returns a tuple with the PropertyGroups field value
// and a boolean to check if the value has been set.
func (o *ObjectDefinitionResponse) GetPropertyGroupsOk() ([]GroupView, bool) {
	if o == nil {
		return nil, false
	}
	return o.PropertyGroups, true
}

// SetPropertyGroups sets field value
func (o *ObjectDefinitionResponse) SetPropertyGroups(v []GroupView) {
	o.PropertyGroups = v
}

func (o ObjectDefinitionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectDefinitionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	toSerialize["objectTypeId"] = o.ObjectTypeId
	toSerialize["objectTypeName"] = o.ObjectTypeName
	toSerialize["properties"] = o.Properties
	toSerialize["propertyGroups"] = o.PropertyGroups
	return toSerialize, nil
}

func (o *ObjectDefinitionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectTypeId",
		"objectTypeName",
		"properties",
		"propertyGroups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectDefinitionResponse := _ObjectDefinitionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectDefinitionResponse)

	if err != nil {
		return err
	}

	*o = ObjectDefinitionResponse(varObjectDefinitionResponse)

	return err
}

type NullableObjectDefinitionResponse struct {
	value *ObjectDefinitionResponse
	isSet bool
}

func (v NullableObjectDefinitionResponse) Get() *ObjectDefinitionResponse {
	return v.value
}

func (v *NullableObjectDefinitionResponse) Set(val *ObjectDefinitionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectDefinitionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectDefinitionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectDefinitionResponse(val *ObjectDefinitionResponse) *NullableObjectDefinitionResponse {
	return &NullableObjectDefinitionResponse{value: val, isSet: true}
}

func (v NullableObjectDefinitionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectDefinitionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


