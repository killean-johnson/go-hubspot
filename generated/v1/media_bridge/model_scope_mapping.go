/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScopeMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeMapping{}

// ScopeMapping struct for ScopeMapping
type ScopeMapping struct {
	AccessLevel string `json:"accessLevel"`
	RequestAction string `json:"requestAction"`
	ScopeName string `json:"scopeName"`
}

type _ScopeMapping ScopeMapping

// NewScopeMapping instantiates a new ScopeMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeMapping(accessLevel string, requestAction string, scopeName string) *ScopeMapping {
	this := ScopeMapping{}
	this.AccessLevel = accessLevel
	this.RequestAction = requestAction
	this.ScopeName = scopeName
	return &this
}

// NewScopeMappingWithDefaults instantiates a new ScopeMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeMappingWithDefaults() *ScopeMapping {
	this := ScopeMapping{}
	return &this
}

// GetAccessLevel returns the AccessLevel field value
func (o *ScopeMapping) GetAccessLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value
// and a boolean to check if the value has been set.
func (o *ScopeMapping) GetAccessLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessLevel, true
}

// SetAccessLevel sets field value
func (o *ScopeMapping) SetAccessLevel(v string) {
	o.AccessLevel = v
}

// GetRequestAction returns the RequestAction field value
func (o *ScopeMapping) GetRequestAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestAction
}

// GetRequestActionOk returns a tuple with the RequestAction field value
// and a boolean to check if the value has been set.
func (o *ScopeMapping) GetRequestActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestAction, true
}

// SetRequestAction sets field value
func (o *ScopeMapping) SetRequestAction(v string) {
	o.RequestAction = v
}

// GetScopeName returns the ScopeName field value
func (o *ScopeMapping) GetScopeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopeName
}

// GetScopeNameOk returns a tuple with the ScopeName field value
// and a boolean to check if the value has been set.
func (o *ScopeMapping) GetScopeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeName, true
}

// SetScopeName sets field value
func (o *ScopeMapping) SetScopeName(v string) {
	o.ScopeName = v
}

func (o ScopeMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessLevel"] = o.AccessLevel
	toSerialize["requestAction"] = o.RequestAction
	toSerialize["scopeName"] = o.ScopeName
	return toSerialize, nil
}

func (o *ScopeMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accessLevel",
		"requestAction",
		"scopeName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScopeMapping := _ScopeMapping{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScopeMapping)

	if err != nil {
		return err
	}

	*o = ScopeMapping(varScopeMapping)

	return err
}

type NullableScopeMapping struct {
	value *ScopeMapping
	isSet bool
}

func (v NullableScopeMapping) Get() *ScopeMapping {
	return v.value
}

func (v *NullableScopeMapping) Set(val *ScopeMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeMapping(val *ScopeMapping) *NullableScopeMapping {
	return &NullableScopeMapping{value: val, isSet: true}
}

func (v NullableScopeMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


