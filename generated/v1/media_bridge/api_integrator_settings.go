/*
CMS Media Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package media_bridge

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// IntegratorSettingsAPIService IntegratorSettingsAPI service
type IntegratorSettingsAPIService service

type ApiDeleteMediaBridgeV1AppIdSettingsOembedDomainsRequest struct {
	ctx context.Context
	ApiService *IntegratorSettingsAPIService
	id *int64
	domainPortalId *int32
}

func (r ApiDeleteMediaBridgeV1AppIdSettingsOembedDomainsRequest) Id(id int64) ApiDeleteMediaBridgeV1AppIdSettingsOembedDomainsRequest {
	r.id = &id
	return r
}

func (r ApiDeleteMediaBridgeV1AppIdSettingsOembedDomainsRequest) DomainPortalId(domainPortalId int32) ApiDeleteMediaBridgeV1AppIdSettingsOembedDomainsRequest {
	r.domainPortalId = &domainPortalId
	return r
}

func (r ApiDeleteMediaBridgeV1AppIdSettingsOembedDomainsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMediaBridgeV1AppIdSettingsOembedDomainsExecute(r)
}

/*
DeleteMediaBridgeV1AppIdSettingsOembedDomains Method for DeleteMediaBridgeV1AppIdSettingsOembedDomains

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteMediaBridgeV1AppIdSettingsOembedDomainsRequest
*/
func (a *IntegratorSettingsAPIService) DeleteMediaBridgeV1AppIdSettingsOembedDomains(ctx context.Context) ApiDeleteMediaBridgeV1AppIdSettingsOembedDomainsRequest {
	return ApiDeleteMediaBridgeV1AppIdSettingsOembedDomainsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IntegratorSettingsAPIService) DeleteMediaBridgeV1AppIdSettingsOembedDomainsExecute(r ApiDeleteMediaBridgeV1AppIdSettingsOembedDomainsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorSettingsAPIService.DeleteMediaBridgeV1AppIdSettingsOembedDomains")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/settings/oembed-domains"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.domainPortalId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domainPortalId", r.domainPortalId, "form", "")
	} else {
		var defaultValue int32 = -1
		r.domainPortalId = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMediaBridgeV1AppIdSettingsEventVisibilityRequest struct {
	ctx context.Context
	ApiService *IntegratorSettingsAPIService
}

func (r ApiGetMediaBridgeV1AppIdSettingsEventVisibilityRequest) Execute() (*EventVisibilityResponse, *http.Response, error) {
	return r.ApiService.GetMediaBridgeV1AppIdSettingsEventVisibilityExecute(r)
}

/*
GetMediaBridgeV1AppIdSettingsEventVisibility Method for GetMediaBridgeV1AppIdSettingsEventVisibility

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMediaBridgeV1AppIdSettingsEventVisibilityRequest
*/
func (a *IntegratorSettingsAPIService) GetMediaBridgeV1AppIdSettingsEventVisibility(ctx context.Context) ApiGetMediaBridgeV1AppIdSettingsEventVisibilityRequest {
	return ApiGetMediaBridgeV1AppIdSettingsEventVisibilityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EventVisibilityResponse
func (a *IntegratorSettingsAPIService) GetMediaBridgeV1AppIdSettingsEventVisibilityExecute(r ApiGetMediaBridgeV1AppIdSettingsEventVisibilityRequest) (*EventVisibilityResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EventVisibilityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorSettingsAPIService.GetMediaBridgeV1AppIdSettingsEventVisibility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/settings/event-visibility"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaTypeRequest struct {
	ctx context.Context
	ApiService *IntegratorSettingsAPIService
	mediaType string
	includeFullDefinition *bool
}

func (r ApiGetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaTypeRequest) IncludeFullDefinition(includeFullDefinition bool) ApiGetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaTypeRequest {
	r.includeFullDefinition = &includeFullDefinition
	return r
}

func (r ApiGetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaTypeRequest) Execute() (*ObjectDefinitionResponse, *http.Response, error) {
	return r.ApiService.GetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaTypeExecute(r)
}

/*
GetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaType Method for GetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mediaType
 @return ApiGetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaTypeRequest
*/
func (a *IntegratorSettingsAPIService) GetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaType(ctx context.Context, mediaType string) ApiGetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaTypeRequest {
	return ApiGetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaTypeRequest{
		ApiService: a,
		ctx: ctx,
		mediaType: mediaType,
	}
}

// Execute executes the request
//  @return ObjectDefinitionResponse
func (a *IntegratorSettingsAPIService) GetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaTypeExecute(r ApiGetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaTypeRequest) (*ObjectDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorSettingsAPIService.GetMediaBridgeV1AppIdSettingsObjectDefinitionsMediaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/settings/object-definitions/{mediaType}"
	localVarPath = strings.Replace(localVarPath, "{"+"mediaType"+"}", url.PathEscape(parameterValueToString(r.mediaType, "mediaType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeFullDefinition != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFullDefinition", r.includeFullDefinition, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMediaBridgeV1AppIdSettingsOembedDomainsRequest struct {
	ctx context.Context
	ApiService *IntegratorSettingsAPIService
	domainPortalId *int32
}

func (r ApiGetMediaBridgeV1AppIdSettingsOembedDomainsRequest) DomainPortalId(domainPortalId int32) ApiGetMediaBridgeV1AppIdSettingsOembedDomainsRequest {
	r.domainPortalId = &domainPortalId
	return r
}

func (r ApiGetMediaBridgeV1AppIdSettingsOembedDomainsRequest) Execute() (*OEmbedDomainsCollectionResponse, *http.Response, error) {
	return r.ApiService.GetMediaBridgeV1AppIdSettingsOembedDomainsExecute(r)
}

/*
GetMediaBridgeV1AppIdSettingsOembedDomains Method for GetMediaBridgeV1AppIdSettingsOembedDomains

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMediaBridgeV1AppIdSettingsOembedDomainsRequest
*/
func (a *IntegratorSettingsAPIService) GetMediaBridgeV1AppIdSettingsOembedDomains(ctx context.Context) ApiGetMediaBridgeV1AppIdSettingsOembedDomainsRequest {
	return ApiGetMediaBridgeV1AppIdSettingsOembedDomainsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OEmbedDomainsCollectionResponse
func (a *IntegratorSettingsAPIService) GetMediaBridgeV1AppIdSettingsOembedDomainsExecute(r ApiGetMediaBridgeV1AppIdSettingsOembedDomainsRequest) (*OEmbedDomainsCollectionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OEmbedDomainsCollectionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorSettingsAPIService.GetMediaBridgeV1AppIdSettingsOembedDomains")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/settings/oembed-domains"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.domainPortalId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domainPortalId", r.domainPortalId, "form", "")
	} else {
		var defaultValue int32 = -1
		r.domainPortalId = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest struct {
	ctx context.Context
	ApiService *IntegratorSettingsAPIService
	oEmbedDomainId string
}

func (r ApiGetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest) Execute() (*IntegratorOEmbedDomainModel, *http.Response, error) {
	return r.ApiService.GetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdExecute(r)
}

/*
GetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainId Method for GetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param oEmbedDomainId
 @return ApiGetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest
*/
func (a *IntegratorSettingsAPIService) GetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainId(ctx context.Context, oEmbedDomainId string) ApiGetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest {
	return ApiGetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest{
		ApiService: a,
		ctx: ctx,
		oEmbedDomainId: oEmbedDomainId,
	}
}

// Execute executes the request
//  @return IntegratorOEmbedDomainModel
func (a *IntegratorSettingsAPIService) GetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdExecute(r ApiGetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest) (*IntegratorOEmbedDomainModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntegratorOEmbedDomainModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorSettingsAPIService.GetMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/settings/oembed-domains/{oEmbedDomainId}"
	localVarPath = strings.Replace(localVarPath, "{"+"oEmbedDomainId"+"}", url.PathEscape(parameterValueToString(r.oEmbedDomainId, "oEmbedDomainId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMediaBridgeV1AppIdSettingsEventVisibilityRequest struct {
	ctx context.Context
	ApiService *IntegratorSettingsAPIService
	eventVisibilityChange *EventVisibilityChange
}

func (r ApiPatchMediaBridgeV1AppIdSettingsEventVisibilityRequest) EventVisibilityChange(eventVisibilityChange EventVisibilityChange) ApiPatchMediaBridgeV1AppIdSettingsEventVisibilityRequest {
	r.eventVisibilityChange = &eventVisibilityChange
	return r
}

func (r ApiPatchMediaBridgeV1AppIdSettingsEventVisibilityRequest) Execute() (*EventVisibilityChange, *http.Response, error) {
	return r.ApiService.PatchMediaBridgeV1AppIdSettingsEventVisibilityExecute(r)
}

/*
PatchMediaBridgeV1AppIdSettingsEventVisibility Method for PatchMediaBridgeV1AppIdSettingsEventVisibility

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPatchMediaBridgeV1AppIdSettingsEventVisibilityRequest
*/
func (a *IntegratorSettingsAPIService) PatchMediaBridgeV1AppIdSettingsEventVisibility(ctx context.Context) ApiPatchMediaBridgeV1AppIdSettingsEventVisibilityRequest {
	return ApiPatchMediaBridgeV1AppIdSettingsEventVisibilityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EventVisibilityChange
func (a *IntegratorSettingsAPIService) PatchMediaBridgeV1AppIdSettingsEventVisibilityExecute(r ApiPatchMediaBridgeV1AppIdSettingsEventVisibilityRequest) (*EventVisibilityChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EventVisibilityChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorSettingsAPIService.PatchMediaBridgeV1AppIdSettingsEventVisibility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/settings/event-visibility"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventVisibilityChange == nil {
		return localVarReturnValue, nil, reportError("eventVisibilityChange is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventVisibilityChange
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest struct {
	ctx context.Context
	ApiService *IntegratorSettingsAPIService
	oEmbedDomainId string
	integratorOEmbedDomainRequest *IntegratorOEmbedDomainRequest
}

func (r ApiPatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest) IntegratorOEmbedDomainRequest(integratorOEmbedDomainRequest IntegratorOEmbedDomainRequest) ApiPatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest {
	r.integratorOEmbedDomainRequest = &integratorOEmbedDomainRequest
	return r
}

func (r ApiPatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest) Execute() (*IntegratorOEmbedDomainModel, *http.Response, error) {
	return r.ApiService.PatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdExecute(r)
}

/*
PatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainId Method for PatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param oEmbedDomainId
 @return ApiPatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest
*/
func (a *IntegratorSettingsAPIService) PatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainId(ctx context.Context, oEmbedDomainId string) ApiPatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest {
	return ApiPatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest{
		ApiService: a,
		ctx: ctx,
		oEmbedDomainId: oEmbedDomainId,
	}
}

// Execute executes the request
//  @return IntegratorOEmbedDomainModel
func (a *IntegratorSettingsAPIService) PatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdExecute(r ApiPatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainIdRequest) (*IntegratorOEmbedDomainModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntegratorOEmbedDomainModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorSettingsAPIService.PatchMediaBridgeV1AppIdSettingsOembedDomainsOEmbedDomainId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/settings/oembed-domains/{oEmbedDomainId}"
	localVarPath = strings.Replace(localVarPath, "{"+"oEmbedDomainId"+"}", url.PathEscape(parameterValueToString(r.oEmbedDomainId, "oEmbedDomainId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.integratorOEmbedDomainRequest == nil {
		return localVarReturnValue, nil, reportError("integratorOEmbedDomainRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.integratorOEmbedDomainRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMediaBridgeV1AppIdSettingsObjectDefinitionsRequest struct {
	ctx context.Context
	ApiService *IntegratorSettingsAPIService
	integratorObjectCreationRequest *IntegratorObjectCreationRequest
}

func (r ApiPostMediaBridgeV1AppIdSettingsObjectDefinitionsRequest) IntegratorObjectCreationRequest(integratorObjectCreationRequest IntegratorObjectCreationRequest) ApiPostMediaBridgeV1AppIdSettingsObjectDefinitionsRequest {
	r.integratorObjectCreationRequest = &integratorObjectCreationRequest
	return r
}

func (r ApiPostMediaBridgeV1AppIdSettingsObjectDefinitionsRequest) Execute() (*map[string]IntegratorObjectCreationResponse, *http.Response, error) {
	return r.ApiService.PostMediaBridgeV1AppIdSettingsObjectDefinitionsExecute(r)
}

/*
PostMediaBridgeV1AppIdSettingsObjectDefinitions Method for PostMediaBridgeV1AppIdSettingsObjectDefinitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMediaBridgeV1AppIdSettingsObjectDefinitionsRequest
*/
func (a *IntegratorSettingsAPIService) PostMediaBridgeV1AppIdSettingsObjectDefinitions(ctx context.Context) ApiPostMediaBridgeV1AppIdSettingsObjectDefinitionsRequest {
	return ApiPostMediaBridgeV1AppIdSettingsObjectDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]IntegratorObjectCreationResponse
func (a *IntegratorSettingsAPIService) PostMediaBridgeV1AppIdSettingsObjectDefinitionsExecute(r ApiPostMediaBridgeV1AppIdSettingsObjectDefinitionsRequest) (*map[string]IntegratorObjectCreationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *map[string]IntegratorObjectCreationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorSettingsAPIService.PostMediaBridgeV1AppIdSettingsObjectDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/settings/object-definitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.integratorObjectCreationRequest == nil {
		return localVarReturnValue, nil, reportError("integratorObjectCreationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.integratorObjectCreationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMediaBridgeV1AppIdSettingsOembedDomainsRequest struct {
	ctx context.Context
	ApiService *IntegratorSettingsAPIService
	integratorOEmbedDomainRequest *IntegratorOEmbedDomainRequest
}

func (r ApiPostMediaBridgeV1AppIdSettingsOembedDomainsRequest) IntegratorOEmbedDomainRequest(integratorOEmbedDomainRequest IntegratorOEmbedDomainRequest) ApiPostMediaBridgeV1AppIdSettingsOembedDomainsRequest {
	r.integratorOEmbedDomainRequest = &integratorOEmbedDomainRequest
	return r
}

func (r ApiPostMediaBridgeV1AppIdSettingsOembedDomainsRequest) Execute() (*IntegratorOEmbedDomainModel, *http.Response, error) {
	return r.ApiService.PostMediaBridgeV1AppIdSettingsOembedDomainsExecute(r)
}

/*
PostMediaBridgeV1AppIdSettingsOembedDomains Method for PostMediaBridgeV1AppIdSettingsOembedDomains

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMediaBridgeV1AppIdSettingsOembedDomainsRequest
*/
func (a *IntegratorSettingsAPIService) PostMediaBridgeV1AppIdSettingsOembedDomains(ctx context.Context) ApiPostMediaBridgeV1AppIdSettingsOembedDomainsRequest {
	return ApiPostMediaBridgeV1AppIdSettingsOembedDomainsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IntegratorOEmbedDomainModel
func (a *IntegratorSettingsAPIService) PostMediaBridgeV1AppIdSettingsOembedDomainsExecute(r ApiPostMediaBridgeV1AppIdSettingsOembedDomainsRequest) (*IntegratorOEmbedDomainModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntegratorOEmbedDomainModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorSettingsAPIService.PostMediaBridgeV1AppIdSettingsOembedDomains")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/settings/oembed-domains"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.integratorOEmbedDomainRequest == nil {
		return localVarReturnValue, nil, reportError("integratorOEmbedDomainRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.integratorOEmbedDomainRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMediaBridgeV1AppIdSettingsRegisterRequest struct {
	ctx context.Context
	ApiService *IntegratorSettingsAPIService
	mediaBridgeProviderPartial *MediaBridgeProviderPartial
}

func (r ApiPostMediaBridgeV1AppIdSettingsRegisterRequest) MediaBridgeProviderPartial(mediaBridgeProviderPartial MediaBridgeProviderPartial) ApiPostMediaBridgeV1AppIdSettingsRegisterRequest {
	r.mediaBridgeProviderPartial = &mediaBridgeProviderPartial
	return r
}

func (r ApiPostMediaBridgeV1AppIdSettingsRegisterRequest) Execute() (*MediaBridgeProviderRegistrationResponse, *http.Response, error) {
	return r.ApiService.PostMediaBridgeV1AppIdSettingsRegisterExecute(r)
}

/*
PostMediaBridgeV1AppIdSettingsRegister Method for PostMediaBridgeV1AppIdSettingsRegister

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMediaBridgeV1AppIdSettingsRegisterRequest

Deprecated
*/
func (a *IntegratorSettingsAPIService) PostMediaBridgeV1AppIdSettingsRegister(ctx context.Context) ApiPostMediaBridgeV1AppIdSettingsRegisterRequest {
	return ApiPostMediaBridgeV1AppIdSettingsRegisterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MediaBridgeProviderRegistrationResponse
// Deprecated
func (a *IntegratorSettingsAPIService) PostMediaBridgeV1AppIdSettingsRegisterExecute(r ApiPostMediaBridgeV1AppIdSettingsRegisterRequest) (*MediaBridgeProviderRegistrationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MediaBridgeProviderRegistrationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorSettingsAPIService.PostMediaBridgeV1AppIdSettingsRegister")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/settings/register"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaBridgeProviderPartial == nil {
		return localVarReturnValue, nil, reportError("mediaBridgeProviderPartial is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mediaBridgeProviderPartial
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMediaBridgeV1AppIdSettingsRequest struct {
	ctx context.Context
	ApiService *IntegratorSettingsAPIService
	mediaBridgeProviderPartial *MediaBridgeProviderPartial
}

func (r ApiPutMediaBridgeV1AppIdSettingsRequest) MediaBridgeProviderPartial(mediaBridgeProviderPartial MediaBridgeProviderPartial) ApiPutMediaBridgeV1AppIdSettingsRequest {
	r.mediaBridgeProviderPartial = &mediaBridgeProviderPartial
	return r
}

func (r ApiPutMediaBridgeV1AppIdSettingsRequest) Execute() (*MediaBridgeProviderRegistrationResponse, *http.Response, error) {
	return r.ApiService.PutMediaBridgeV1AppIdSettingsExecute(r)
}

/*
PutMediaBridgeV1AppIdSettings Method for PutMediaBridgeV1AppIdSettings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPutMediaBridgeV1AppIdSettingsRequest
*/
func (a *IntegratorSettingsAPIService) PutMediaBridgeV1AppIdSettings(ctx context.Context) ApiPutMediaBridgeV1AppIdSettingsRequest {
	return ApiPutMediaBridgeV1AppIdSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MediaBridgeProviderRegistrationResponse
func (a *IntegratorSettingsAPIService) PutMediaBridgeV1AppIdSettingsExecute(r ApiPutMediaBridgeV1AppIdSettingsRequest) (*MediaBridgeProviderRegistrationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MediaBridgeProviderRegistrationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorSettingsAPIService.PutMediaBridgeV1AppIdSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/media-bridge/v1/{appId}/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaBridgeProviderPartial == nil {
		return localVarReturnValue, nil, reportError("mediaBridgeProviderPartial is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mediaBridgeProviderPartial
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
