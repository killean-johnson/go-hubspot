/*
CRM Public App Feature Flags V3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_app_feature_flags_v3

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
)


// AppFlagsAPIService AppFlagsAPI service
type AppFlagsAPIService service

type ApiDeleteFeatureFlagsV3AppIdFlagsFlagNameRequest struct {
	ctx context.Context
	ApiService *AppFlagsAPIService
	flagName string
	appId int32
}

func (r ApiDeleteFeatureFlagsV3AppIdFlagsFlagNameRequest) Execute() (*FlagResponse, *http.Response, error) {
	return r.ApiService.DeleteFeatureFlagsV3AppIdFlagsFlagNameExecute(r)
}

/*
DeleteFeatureFlagsV3AppIdFlagsFlagName Delete an app's feature flag

Delete a feature flag in an app.  For example, delete the `hs-release-app-cards` flag after all accounts have been migrated.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param flagName The name of the flag, either `hs-release-app-cards` or `hs-hide-crm-cards`.
 @param appId The ID of the app.
 @return ApiDeleteFeatureFlagsV3AppIdFlagsFlagNameRequest
*/
func (a *AppFlagsAPIService) DeleteFeatureFlagsV3AppIdFlagsFlagName(ctx context.Context, flagName string, appId int32) ApiDeleteFeatureFlagsV3AppIdFlagsFlagNameRequest {
	return ApiDeleteFeatureFlagsV3AppIdFlagsFlagNameRequest{
		ApiService: a,
		ctx: ctx,
		flagName: flagName,
		appId: appId,
	}
}

// Execute executes the request
//  @return FlagResponse
func (a *AppFlagsAPIService) DeleteFeatureFlagsV3AppIdFlagsFlagNameExecute(r ApiDeleteFeatureFlagsV3AppIdFlagsFlagNameRequest) (*FlagResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FlagResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppFlagsAPIService.DeleteFeatureFlagsV3AppIdFlagsFlagName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/feature-flags/v3/{appId}/flags/{flagName}"
	localVarPath = strings.Replace(localVarPath, "{"+"flagName"+"}", url.PathEscape(parameterValueToString(r.flagName, "flagName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFeatureFlagsV3AppIdFlagsFlagNameRequest struct {
	ctx context.Context
	ApiService *AppFlagsAPIService
	flagName string
	appId int32
}

func (r ApiGetFeatureFlagsV3AppIdFlagsFlagNameRequest) Execute() (*FlagResponse, *http.Response, error) {
	return r.ApiService.GetFeatureFlagsV3AppIdFlagsFlagNameExecute(r)
}

/*
GetFeatureFlagsV3AppIdFlagsFlagName Retrieve an app's feature flags

Retrieve the current status of the app's feature flags. No request body is included.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param flagName The name of the flag, either `hs-release-app-cards` or `hs-hide-crm-cards`.
 @param appId The ID of the app.
 @return ApiGetFeatureFlagsV3AppIdFlagsFlagNameRequest
*/
func (a *AppFlagsAPIService) GetFeatureFlagsV3AppIdFlagsFlagName(ctx context.Context, flagName string, appId int32) ApiGetFeatureFlagsV3AppIdFlagsFlagNameRequest {
	return ApiGetFeatureFlagsV3AppIdFlagsFlagNameRequest{
		ApiService: a,
		ctx: ctx,
		flagName: flagName,
		appId: appId,
	}
}

// Execute executes the request
//  @return FlagResponse
func (a *AppFlagsAPIService) GetFeatureFlagsV3AppIdFlagsFlagNameExecute(r ApiGetFeatureFlagsV3AppIdFlagsFlagNameRequest) (*FlagResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FlagResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppFlagsAPIService.GetFeatureFlagsV3AppIdFlagsFlagName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/feature-flags/v3/{appId}/flags/{flagName}"
	localVarPath = strings.Replace(localVarPath, "{"+"flagName"+"}", url.PathEscape(parameterValueToString(r.flagName, "flagName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsRequest struct {
	ctx context.Context
	ApiService *AppFlagsAPIService
	flagName string
	appId int32
	startPortalId *int32
	limit *int32
}

// The initial account ID for listing, enabling pagination.
func (r ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsRequest) StartPortalId(startPortalId int32) ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsRequest {
	r.startPortalId = &startPortalId
	return r
}

// The maximum number of results to return in a single request.
func (r ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsRequest) Limit(limit int32) ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsRequest {
	r.limit = &limit
	return r
}

func (r ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsRequest) Execute() (*PortalFlagStateBatchResponse, *http.Response, error) {
	return r.ApiService.GetFeatureFlagsV3AppIdFlagsFlagNamePortalsExecute(r)
}

/*
GetFeatureFlagsV3AppIdFlagsFlagNamePortals Retrieve accounts with a set flag state

Retrieve a list of HubSpot accounts with an account-level flag setting for the specified app. No request body is included.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param flagName The name of the flag, either `hs-release-app-cards` or `hs-hide-crm-cards`.
 @param appId The ID of the app.
 @return ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsRequest
*/
func (a *AppFlagsAPIService) GetFeatureFlagsV3AppIdFlagsFlagNamePortals(ctx context.Context, flagName string, appId int32) ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsRequest {
	return ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsRequest{
		ApiService: a,
		ctx: ctx,
		flagName: flagName,
		appId: appId,
	}
}

// Execute executes the request
//  @return PortalFlagStateBatchResponse
func (a *AppFlagsAPIService) GetFeatureFlagsV3AppIdFlagsFlagNamePortalsExecute(r ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsRequest) (*PortalFlagStateBatchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalFlagStateBatchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppFlagsAPIService.GetFeatureFlagsV3AppIdFlagsFlagNamePortals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/feature-flags/v3/{appId}/flags/{flagName}/portals"
	localVarPath = strings.Replace(localVarPath, "{"+"flagName"+"}", url.PathEscape(parameterValueToString(r.flagName, "flagName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startPortalId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startPortalId", r.startPortalId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFeatureFlagsV3AppIdFlagsFlagNameRequest struct {
	ctx context.Context
	ApiService *AppFlagsAPIService
	flagName string
	appId int32
	flagPutRequest *FlagPutRequest
}

func (r ApiPutFeatureFlagsV3AppIdFlagsFlagNameRequest) FlagPutRequest(flagPutRequest FlagPutRequest) ApiPutFeatureFlagsV3AppIdFlagsFlagNameRequest {
	r.flagPutRequest = &flagPutRequest
	return r
}

func (r ApiPutFeatureFlagsV3AppIdFlagsFlagNameRequest) Execute() (*FlagResponse, *http.Response, error) {
	return r.ApiService.PutFeatureFlagsV3AppIdFlagsFlagNameExecute(r)
}

/*
PutFeatureFlagsV3AppIdFlagsFlagName Set an app's feature flag

Set a feature flag for an app. For example, update the `hs-hide-crm-cards` flag's `defaultState` to `ON` to hide classic CRM cards from new installs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param flagName The name of the flag, either `hs-release-app-cards` or `hs-hide-crm-cards`.
 @param appId The ID of the app.
 @return ApiPutFeatureFlagsV3AppIdFlagsFlagNameRequest
*/
func (a *AppFlagsAPIService) PutFeatureFlagsV3AppIdFlagsFlagName(ctx context.Context, flagName string, appId int32) ApiPutFeatureFlagsV3AppIdFlagsFlagNameRequest {
	return ApiPutFeatureFlagsV3AppIdFlagsFlagNameRequest{
		ApiService: a,
		ctx: ctx,
		flagName: flagName,
		appId: appId,
	}
}

// Execute executes the request
//  @return FlagResponse
func (a *AppFlagsAPIService) PutFeatureFlagsV3AppIdFlagsFlagNameExecute(r ApiPutFeatureFlagsV3AppIdFlagsFlagNameRequest) (*FlagResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FlagResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppFlagsAPIService.PutFeatureFlagsV3AppIdFlagsFlagName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/feature-flags/v3/{appId}/flags/{flagName}"
	localVarPath = strings.Replace(localVarPath, "{"+"flagName"+"}", url.PathEscape(parameterValueToString(r.flagName, "flagName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flagPutRequest == nil {
		return localVarReturnValue, nil, reportError("flagPutRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flagPutRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
