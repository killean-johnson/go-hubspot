/*
CRM Public App Feature Flags V3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_app_feature_flags_v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlagResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlagResponse{}

// FlagResponse struct for FlagResponse
type FlagResponse struct {
	OverrideState *string `json:"overrideState,omitempty"`
	DefaultState string `json:"defaultState"`
	AppId int32 `json:"appId"`
	FlagName string `json:"flagName"`
}

type _FlagResponse FlagResponse

// NewFlagResponse instantiates a new FlagResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlagResponse(defaultState string, appId int32, flagName string) *FlagResponse {
	this := FlagResponse{}
	this.DefaultState = defaultState
	this.AppId = appId
	this.FlagName = flagName
	return &this
}

// NewFlagResponseWithDefaults instantiates a new FlagResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlagResponseWithDefaults() *FlagResponse {
	this := FlagResponse{}
	return &this
}

// GetOverrideState returns the OverrideState field value if set, zero value otherwise.
func (o *FlagResponse) GetOverrideState() string {
	if o == nil || IsNil(o.OverrideState) {
		var ret string
		return ret
	}
	return *o.OverrideState
}

// GetOverrideStateOk returns a tuple with the OverrideState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlagResponse) GetOverrideStateOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideState) {
		return nil, false
	}
	return o.OverrideState, true
}

// HasOverrideState returns a boolean if a field has been set.
func (o *FlagResponse) HasOverrideState() bool {
	if o != nil && !IsNil(o.OverrideState) {
		return true
	}

	return false
}

// SetOverrideState gets a reference to the given string and assigns it to the OverrideState field.
func (o *FlagResponse) SetOverrideState(v string) {
	o.OverrideState = &v
}

// GetDefaultState returns the DefaultState field value
func (o *FlagResponse) GetDefaultState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultState
}

// GetDefaultStateOk returns a tuple with the DefaultState field value
// and a boolean to check if the value has been set.
func (o *FlagResponse) GetDefaultStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultState, true
}

// SetDefaultState sets field value
func (o *FlagResponse) SetDefaultState(v string) {
	o.DefaultState = v
}

// GetAppId returns the AppId field value
func (o *FlagResponse) GetAppId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *FlagResponse) GetAppIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *FlagResponse) SetAppId(v int32) {
	o.AppId = v
}

// GetFlagName returns the FlagName field value
func (o *FlagResponse) GetFlagName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlagName
}

// GetFlagNameOk returns a tuple with the FlagName field value
// and a boolean to check if the value has been set.
func (o *FlagResponse) GetFlagNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlagName, true
}

// SetFlagName sets field value
func (o *FlagResponse) SetFlagName(v string) {
	o.FlagName = v
}

func (o FlagResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlagResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OverrideState) {
		toSerialize["overrideState"] = o.OverrideState
	}
	toSerialize["defaultState"] = o.DefaultState
	toSerialize["appId"] = o.AppId
	toSerialize["flagName"] = o.FlagName
	return toSerialize, nil
}

func (o *FlagResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"defaultState",
		"appId",
		"flagName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlagResponse := _FlagResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlagResponse)

	if err != nil {
		return err
	}

	*o = FlagResponse(varFlagResponse)

	return err
}

type NullableFlagResponse struct {
	value *FlagResponse
	isSet bool
}

func (v NullableFlagResponse) Get() *FlagResponse {
	return v.value
}

func (v *NullableFlagResponse) Set(val *FlagResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFlagResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFlagResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlagResponse(val *FlagResponse) *NullableFlagResponse {
	return &NullableFlagResponse{value: val, isSet: true}
}

func (v NullableFlagResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlagResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


