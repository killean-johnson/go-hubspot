/*
CRM Public App Feature Flags V3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_app_feature_flags_v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PortalFlagStateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortalFlagStateResponse{}

// PortalFlagStateResponse struct for PortalFlagStateResponse
type PortalFlagStateResponse struct {
	AppId int32 `json:"appId"`
	PortalId int32 `json:"portalId"`
	FlagName string `json:"flagName"`
	FlagState string `json:"flagState"`
}

type _PortalFlagStateResponse PortalFlagStateResponse

// NewPortalFlagStateResponse instantiates a new PortalFlagStateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortalFlagStateResponse(appId int32, portalId int32, flagName string, flagState string) *PortalFlagStateResponse {
	this := PortalFlagStateResponse{}
	this.AppId = appId
	this.PortalId = portalId
	this.FlagName = flagName
	this.FlagState = flagState
	return &this
}

// NewPortalFlagStateResponseWithDefaults instantiates a new PortalFlagStateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortalFlagStateResponseWithDefaults() *PortalFlagStateResponse {
	this := PortalFlagStateResponse{}
	return &this
}

// GetAppId returns the AppId field value
func (o *PortalFlagStateResponse) GetAppId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *PortalFlagStateResponse) GetAppIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *PortalFlagStateResponse) SetAppId(v int32) {
	o.AppId = v
}

// GetPortalId returns the PortalId field value
func (o *PortalFlagStateResponse) GetPortalId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PortalId
}

// GetPortalIdOk returns a tuple with the PortalId field value
// and a boolean to check if the value has been set.
func (o *PortalFlagStateResponse) GetPortalIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortalId, true
}

// SetPortalId sets field value
func (o *PortalFlagStateResponse) SetPortalId(v int32) {
	o.PortalId = v
}

// GetFlagName returns the FlagName field value
func (o *PortalFlagStateResponse) GetFlagName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlagName
}

// GetFlagNameOk returns a tuple with the FlagName field value
// and a boolean to check if the value has been set.
func (o *PortalFlagStateResponse) GetFlagNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlagName, true
}

// SetFlagName sets field value
func (o *PortalFlagStateResponse) SetFlagName(v string) {
	o.FlagName = v
}

// GetFlagState returns the FlagState field value
func (o *PortalFlagStateResponse) GetFlagState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlagState
}

// GetFlagStateOk returns a tuple with the FlagState field value
// and a boolean to check if the value has been set.
func (o *PortalFlagStateResponse) GetFlagStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlagState, true
}

// SetFlagState sets field value
func (o *PortalFlagStateResponse) SetFlagState(v string) {
	o.FlagState = v
}

func (o PortalFlagStateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortalFlagStateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appId"] = o.AppId
	toSerialize["portalId"] = o.PortalId
	toSerialize["flagName"] = o.FlagName
	toSerialize["flagState"] = o.FlagState
	return toSerialize, nil
}

func (o *PortalFlagStateResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appId",
		"portalId",
		"flagName",
		"flagState",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPortalFlagStateResponse := _PortalFlagStateResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPortalFlagStateResponse)

	if err != nil {
		return err
	}

	*o = PortalFlagStateResponse(varPortalFlagStateResponse)

	return err
}

type NullablePortalFlagStateResponse struct {
	value *PortalFlagStateResponse
	isSet bool
}

func (v NullablePortalFlagStateResponse) Get() *PortalFlagStateResponse {
	return v.value
}

func (v *NullablePortalFlagStateResponse) Set(val *PortalFlagStateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePortalFlagStateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePortalFlagStateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortalFlagStateResponse(val *PortalFlagStateResponse) *NullablePortalFlagStateResponse {
	return &NullablePortalFlagStateResponse{value: val, isSet: true}
}

func (v NullablePortalFlagStateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortalFlagStateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


