/*
CRM Public App Feature Flags V3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_app_feature_flags_v3

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
)


// PortalFlagStatesAPIService PortalFlagStatesAPI service
type PortalFlagStatesAPIService service

type ApiDeleteFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest struct {
	ctx context.Context
	ApiService *PortalFlagStatesAPIService
	flagName string
	portalId int32
	appId int32
}

func (r ApiDeleteFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest) Execute() (*PortalFlagStateResponse, *http.Response, error) {
	return r.ApiService.DeleteFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdExecute(r)
}

/*
DeleteFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalId Delete an account flag state

Delete an account-level flag state for a specific HubSpot account. No request body is included.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param flagName The name of the flag, either `hs-release-app-cards` or `hs-hide-crm-cards`.
 @param portalId The ID of the account that installed the app.
 @param appId The ID of the app.
 @return ApiDeleteFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest
*/
func (a *PortalFlagStatesAPIService) DeleteFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalId(ctx context.Context, flagName string, portalId int32, appId int32) ApiDeleteFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest {
	return ApiDeleteFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest{
		ApiService: a,
		ctx: ctx,
		flagName: flagName,
		portalId: portalId,
		appId: appId,
	}
}

// Execute executes the request
//  @return PortalFlagStateResponse
func (a *PortalFlagStatesAPIService) DeleteFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdExecute(r ApiDeleteFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest) (*PortalFlagStateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalFlagStateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalFlagStatesAPIService.DeleteFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/feature-flags/v3/{appId}/flags/{flagName}/portals/{portalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"flagName"+"}", url.PathEscape(parameterValueToString(r.flagName, "flagName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"portalId"+"}", url.PathEscape(parameterValueToString(r.portalId, "portalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest struct {
	ctx context.Context
	ApiService *PortalFlagStatesAPIService
	flagName string
	portalId int32
	appId int32
}

func (r ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest) Execute() (*PortalFlagStateResponse, *http.Response, error) {
	return r.ApiService.GetFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdExecute(r)
}

/*
GetFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalId Retrieve account flag state

Retrieve the account-level flag state of a specific HubSpot account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param flagName The name of the flag, either `hs-release-app-cards` or `hs-hide-crm-cards`.
 @param portalId The ID of the account that installed the app.
 @param appId The ID of the app.
 @return ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest
*/
func (a *PortalFlagStatesAPIService) GetFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalId(ctx context.Context, flagName string, portalId int32, appId int32) ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest {
	return ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest{
		ApiService: a,
		ctx: ctx,
		flagName: flagName,
		portalId: portalId,
		appId: appId,
	}
}

// Execute executes the request
//  @return PortalFlagStateResponse
func (a *PortalFlagStatesAPIService) GetFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdExecute(r ApiGetFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest) (*PortalFlagStateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalFlagStateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalFlagStatesAPIService.GetFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/feature-flags/v3/{appId}/flags/{flagName}/portals/{portalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"flagName"+"}", url.PathEscape(parameterValueToString(r.flagName, "flagName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"portalId"+"}", url.PathEscape(parameterValueToString(r.portalId, "portalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDeleteRequest struct {
	ctx context.Context
	ApiService *PortalFlagStatesAPIService
	flagName string
	appId int32
	portalFlagStateBatchDeleteRequest *PortalFlagStateBatchDeleteRequest
}

func (r ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDeleteRequest) PortalFlagStateBatchDeleteRequest(portalFlagStateBatchDeleteRequest PortalFlagStateBatchDeleteRequest) ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDeleteRequest {
	r.portalFlagStateBatchDeleteRequest = &portalFlagStateBatchDeleteRequest
	return r
}

func (r ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDeleteRequest) Execute() (*PortalFlagStateBatchResponse, *http.Response, error) {
	return r.ApiService.PostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDeleteExecute(r)
}

/*
PostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDelete Batch delete account flag state

Delete an account-level flag state for multiple HubSpot accounts at once. Use this endpoint to manage flag exposure for groups of HubSpot accounts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param flagName The name of the flag, either `hs-release-app-cards` or `hs-hide-crm-cards`.
 @param appId The ID of the app.
 @return ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDeleteRequest
*/
func (a *PortalFlagStatesAPIService) PostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDelete(ctx context.Context, flagName string, appId int32) ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDeleteRequest {
	return ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDeleteRequest{
		ApiService: a,
		ctx: ctx,
		flagName: flagName,
		appId: appId,
	}
}

// Execute executes the request
//  @return PortalFlagStateBatchResponse
func (a *PortalFlagStatesAPIService) PostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDeleteExecute(r ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDeleteRequest) (*PortalFlagStateBatchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalFlagStateBatchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalFlagStatesAPIService.PostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/feature-flags/v3/{appId}/flags/{flagName}/portals/batch/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"flagName"+"}", url.PathEscape(parameterValueToString(r.flagName, "flagName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.portalFlagStateBatchDeleteRequest == nil {
		return localVarReturnValue, nil, reportError("portalFlagStateBatchDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.portalFlagStateBatchDeleteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsertRequest struct {
	ctx context.Context
	ApiService *PortalFlagStatesAPIService
	flagName string
	appId int32
	portalFlagStateBatchPutRequest *PortalFlagStateBatchPutRequest
}

func (r ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsertRequest) PortalFlagStateBatchPutRequest(portalFlagStateBatchPutRequest PortalFlagStateBatchPutRequest) ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsertRequest {
	r.portalFlagStateBatchPutRequest = &portalFlagStateBatchPutRequest
	return r
}

func (r ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsertRequest) Execute() (*PortalFlagStateBatchResponse, *http.Response, error) {
	return r.ApiService.PostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsertExecute(r)
}

/*
PostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsert Batch set account flag state

Set the portal flag state for multiple HubSpot accounts at once. Use this endpoint to manage flag exposure for groups of HubSpot accounts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param flagName The name of the flag, either `hs-release-app-cards` or `hs-hide-crm-cards`.
 @param appId The ID of the app.
 @return ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsertRequest
*/
func (a *PortalFlagStatesAPIService) PostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsert(ctx context.Context, flagName string, appId int32) ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsertRequest {
	return ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsertRequest{
		ApiService: a,
		ctx: ctx,
		flagName: flagName,
		appId: appId,
	}
}

// Execute executes the request
//  @return PortalFlagStateBatchResponse
func (a *PortalFlagStatesAPIService) PostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsertExecute(r ApiPostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsertRequest) (*PortalFlagStateBatchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalFlagStateBatchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalFlagStatesAPIService.PostFeatureFlagsV3AppIdFlagsFlagNamePortalsBatchUpsert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/feature-flags/v3/{appId}/flags/{flagName}/portals/batch/upsert"
	localVarPath = strings.Replace(localVarPath, "{"+"flagName"+"}", url.PathEscape(parameterValueToString(r.flagName, "flagName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.portalFlagStateBatchPutRequest == nil {
		return localVarReturnValue, nil, reportError("portalFlagStateBatchPutRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.portalFlagStateBatchPutRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest struct {
	ctx context.Context
	ApiService *PortalFlagStatesAPIService
	flagName string
	portalId int32
	appId int32
	portalFlagStatePutRequest *PortalFlagStatePutRequest
}

func (r ApiPutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest) PortalFlagStatePutRequest(portalFlagStatePutRequest PortalFlagStatePutRequest) ApiPutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest {
	r.portalFlagStatePutRequest = &portalFlagStatePutRequest
	return r
}

func (r ApiPutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest) Execute() (*PortalFlagStateResponse, *http.Response, error) {
	return r.ApiService.PutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdExecute(r)
}

/*
PutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalId Set an account flag state

Specify an account-level flag state for a specific HubSpot account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param flagName The name of the flag, either `hs-release-app-cards` or `hs-hide-crm-cards`.
 @param portalId The ID of the account that installed the app.
 @param appId The ID of the app.
 @return ApiPutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest
*/
func (a *PortalFlagStatesAPIService) PutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalId(ctx context.Context, flagName string, portalId int32, appId int32) ApiPutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest {
	return ApiPutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest{
		ApiService: a,
		ctx: ctx,
		flagName: flagName,
		portalId: portalId,
		appId: appId,
	}
}

// Execute executes the request
//  @return PortalFlagStateResponse
func (a *PortalFlagStatesAPIService) PutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdExecute(r ApiPutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalIdRequest) (*PortalFlagStateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalFlagStateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalFlagStatesAPIService.PutFeatureFlagsV3AppIdFlagsFlagNamePortalsPortalId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/feature-flags/v3/{appId}/flags/{flagName}/portals/{portalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"flagName"+"}", url.PathEscape(parameterValueToString(r.flagName, "flagName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"portalId"+"}", url.PathEscape(parameterValueToString(r.portalId, "portalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.portalFlagStatePutRequest == nil {
		return localVarReturnValue, nil, reportError("portalFlagStatePutRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.portalFlagStatePutRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
