/*
CRM Property Validations

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package property_validations

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
)


// PublicPropertyValidationsAPIService PublicPropertyValidationsAPI service
type PublicPropertyValidationsAPIService service

type ApiGetCrmV3PropertyValidationsObjectTypeIdRequest struct {
	ctx context.Context
	ApiService *PublicPropertyValidationsAPIService
	objectTypeId string
}

func (r ApiGetCrmV3PropertyValidationsObjectTypeIdRequest) Execute() (*CollectionResponsePublicPropertyValidationRuleMapNoPaging, *http.Response, error) {
	return r.ApiService.GetCrmV3PropertyValidationsObjectTypeIdExecute(r)
}

/*
GetCrmV3PropertyValidationsObjectTypeId Read all property validation rules for an object

Read all properties with validation rules for a given object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectTypeId 
 @return ApiGetCrmV3PropertyValidationsObjectTypeIdRequest
*/
func (a *PublicPropertyValidationsAPIService) GetCrmV3PropertyValidationsObjectTypeId(ctx context.Context, objectTypeId string) ApiGetCrmV3PropertyValidationsObjectTypeIdRequest {
	return ApiGetCrmV3PropertyValidationsObjectTypeIdRequest{
		ApiService: a,
		ctx: ctx,
		objectTypeId: objectTypeId,
	}
}

// Execute executes the request
//  @return CollectionResponsePublicPropertyValidationRuleMapNoPaging
func (a *PublicPropertyValidationsAPIService) GetCrmV3PropertyValidationsObjectTypeIdExecute(r ApiGetCrmV3PropertyValidationsObjectTypeIdRequest) (*CollectionResponsePublicPropertyValidationRuleMapNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponsePublicPropertyValidationRuleMapNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicPropertyValidationsAPIService.GetCrmV3PropertyValidationsObjectTypeId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/property-validations/{objectTypeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"objectTypeId"+"}", url.PathEscape(parameterValueToString(r.objectTypeId, "objectTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCrmV3PropertyValidationsObjectTypeIdPropertyNameRequest struct {
	ctx context.Context
	ApiService *PublicPropertyValidationsAPIService
	objectTypeId string
	propertyName string
}

func (r ApiGetCrmV3PropertyValidationsObjectTypeIdPropertyNameRequest) Execute() (*CollectionResponsePublicPropertyValidationRuleNoPaging, *http.Response, error) {
	return r.ApiService.GetCrmV3PropertyValidationsObjectTypeIdPropertyNameExecute(r)
}

/*
GetCrmV3PropertyValidationsObjectTypeIdPropertyName Read validation rules for a property

Read a property's validation rules identified by {propertyName}.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectTypeId 
 @param propertyName 
 @return ApiGetCrmV3PropertyValidationsObjectTypeIdPropertyNameRequest
*/
func (a *PublicPropertyValidationsAPIService) GetCrmV3PropertyValidationsObjectTypeIdPropertyName(ctx context.Context, objectTypeId string, propertyName string) ApiGetCrmV3PropertyValidationsObjectTypeIdPropertyNameRequest {
	return ApiGetCrmV3PropertyValidationsObjectTypeIdPropertyNameRequest{
		ApiService: a,
		ctx: ctx,
		objectTypeId: objectTypeId,
		propertyName: propertyName,
	}
}

// Execute executes the request
//  @return CollectionResponsePublicPropertyValidationRuleNoPaging
func (a *PublicPropertyValidationsAPIService) GetCrmV3PropertyValidationsObjectTypeIdPropertyNameExecute(r ApiGetCrmV3PropertyValidationsObjectTypeIdPropertyNameRequest) (*CollectionResponsePublicPropertyValidationRuleNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponsePublicPropertyValidationRuleNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicPropertyValidationsAPIService.GetCrmV3PropertyValidationsObjectTypeIdPropertyName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/property-validations/{objectTypeId}/{propertyName}"
	localVarPath = strings.Replace(localVarPath, "{"+"objectTypeId"+"}", url.PathEscape(parameterValueToString(r.objectTypeId, "objectTypeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"propertyName"+"}", url.PathEscape(parameterValueToString(r.propertyName, "propertyName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
