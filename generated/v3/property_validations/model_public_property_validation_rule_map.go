/*
CRM Property Validations

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package property_validations

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicPropertyValidationRuleMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicPropertyValidationRuleMap{}

// PublicPropertyValidationRuleMap struct for PublicPropertyValidationRuleMap
type PublicPropertyValidationRuleMap struct {
	PropertyName string `json:"propertyName"`
	PropertyValidationRules []PublicPropertyValidationRule `json:"propertyValidationRules"`
}

type _PublicPropertyValidationRuleMap PublicPropertyValidationRuleMap

// NewPublicPropertyValidationRuleMap instantiates a new PublicPropertyValidationRuleMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicPropertyValidationRuleMap(propertyName string, propertyValidationRules []PublicPropertyValidationRule) *PublicPropertyValidationRuleMap {
	this := PublicPropertyValidationRuleMap{}
	this.PropertyName = propertyName
	this.PropertyValidationRules = propertyValidationRules
	return &this
}

// NewPublicPropertyValidationRuleMapWithDefaults instantiates a new PublicPropertyValidationRuleMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicPropertyValidationRuleMapWithDefaults() *PublicPropertyValidationRuleMap {
	this := PublicPropertyValidationRuleMap{}
	return &this
}

// GetPropertyName returns the PropertyName field value
func (o *PublicPropertyValidationRuleMap) GetPropertyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PropertyName
}

// GetPropertyNameOk returns a tuple with the PropertyName field value
// and a boolean to check if the value has been set.
func (o *PublicPropertyValidationRuleMap) GetPropertyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PropertyName, true
}

// SetPropertyName sets field value
func (o *PublicPropertyValidationRuleMap) SetPropertyName(v string) {
	o.PropertyName = v
}

// GetPropertyValidationRules returns the PropertyValidationRules field value
func (o *PublicPropertyValidationRuleMap) GetPropertyValidationRules() []PublicPropertyValidationRule {
	if o == nil {
		var ret []PublicPropertyValidationRule
		return ret
	}

	return o.PropertyValidationRules
}

// GetPropertyValidationRulesOk returns a tuple with the PropertyValidationRules field value
// and a boolean to check if the value has been set.
func (o *PublicPropertyValidationRuleMap) GetPropertyValidationRulesOk() ([]PublicPropertyValidationRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.PropertyValidationRules, true
}

// SetPropertyValidationRules sets field value
func (o *PublicPropertyValidationRuleMap) SetPropertyValidationRules(v []PublicPropertyValidationRule) {
	o.PropertyValidationRules = v
}

func (o PublicPropertyValidationRuleMap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicPropertyValidationRuleMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["propertyName"] = o.PropertyName
	toSerialize["propertyValidationRules"] = o.PropertyValidationRules
	return toSerialize, nil
}

func (o *PublicPropertyValidationRuleMap) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"propertyName",
		"propertyValidationRules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicPropertyValidationRuleMap := _PublicPropertyValidationRuleMap{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicPropertyValidationRuleMap)

	if err != nil {
		return err
	}

	*o = PublicPropertyValidationRuleMap(varPublicPropertyValidationRuleMap)

	return err
}

type NullablePublicPropertyValidationRuleMap struct {
	value *PublicPropertyValidationRuleMap
	isSet bool
}

func (v NullablePublicPropertyValidationRuleMap) Get() *PublicPropertyValidationRuleMap {
	return v.value
}

func (v *NullablePublicPropertyValidationRuleMap) Set(val *PublicPropertyValidationRuleMap) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicPropertyValidationRuleMap) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicPropertyValidationRuleMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicPropertyValidationRuleMap(val *PublicPropertyValidationRuleMap) *NullablePublicPropertyValidationRuleMap {
	return &NullablePublicPropertyValidationRuleMap{value: val, isSet: true}
}

func (v NullablePublicPropertyValidationRuleMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicPropertyValidationRuleMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


