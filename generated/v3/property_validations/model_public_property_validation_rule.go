/*
CRM Property Validations

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package property_validations

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicPropertyValidationRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicPropertyValidationRule{}

// PublicPropertyValidationRule struct for PublicPropertyValidationRule
type PublicPropertyValidationRule struct {
	RuleType string `json:"ruleType"`
	RuleArguments []string `json:"ruleArguments"`
}

type _PublicPropertyValidationRule PublicPropertyValidationRule

// NewPublicPropertyValidationRule instantiates a new PublicPropertyValidationRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicPropertyValidationRule(ruleType string, ruleArguments []string) *PublicPropertyValidationRule {
	this := PublicPropertyValidationRule{}
	this.RuleType = ruleType
	this.RuleArguments = ruleArguments
	return &this
}

// NewPublicPropertyValidationRuleWithDefaults instantiates a new PublicPropertyValidationRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicPropertyValidationRuleWithDefaults() *PublicPropertyValidationRule {
	this := PublicPropertyValidationRule{}
	return &this
}

// GetRuleType returns the RuleType field value
func (o *PublicPropertyValidationRule) GetRuleType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleType
}

// GetRuleTypeOk returns a tuple with the RuleType field value
// and a boolean to check if the value has been set.
func (o *PublicPropertyValidationRule) GetRuleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleType, true
}

// SetRuleType sets field value
func (o *PublicPropertyValidationRule) SetRuleType(v string) {
	o.RuleType = v
}

// GetRuleArguments returns the RuleArguments field value
func (o *PublicPropertyValidationRule) GetRuleArguments() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RuleArguments
}

// GetRuleArgumentsOk returns a tuple with the RuleArguments field value
// and a boolean to check if the value has been set.
func (o *PublicPropertyValidationRule) GetRuleArgumentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RuleArguments, true
}

// SetRuleArguments sets field value
func (o *PublicPropertyValidationRule) SetRuleArguments(v []string) {
	o.RuleArguments = v
}

func (o PublicPropertyValidationRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicPropertyValidationRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ruleType"] = o.RuleType
	toSerialize["ruleArguments"] = o.RuleArguments
	return toSerialize, nil
}

func (o *PublicPropertyValidationRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ruleType",
		"ruleArguments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicPropertyValidationRule := _PublicPropertyValidationRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicPropertyValidationRule)

	if err != nil {
		return err
	}

	*o = PublicPropertyValidationRule(varPublicPropertyValidationRule)

	return err
}

type NullablePublicPropertyValidationRule struct {
	value *PublicPropertyValidationRule
	isSet bool
}

func (v NullablePublicPropertyValidationRule) Get() *PublicPropertyValidationRule {
	return v.value
}

func (v *NullablePublicPropertyValidationRule) Set(val *PublicPropertyValidationRule) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicPropertyValidationRule) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicPropertyValidationRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicPropertyValidationRule(val *PublicPropertyValidationRule) *NullablePublicPropertyValidationRule {
	return &NullablePublicPropertyValidationRule{value: val, isSet: true}
}

func (v NullablePublicPropertyValidationRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicPropertyValidationRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


