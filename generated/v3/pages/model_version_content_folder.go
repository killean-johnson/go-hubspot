/*
Pages

Use these endpoints for interacting with Landing Pages and Site Pages

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pages

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the VersionContentFolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionContentFolder{}

// VersionContentFolder Model definition for a content folder version. Contains metadata describing the version of the folder. It can be used to view edit history of a folder.
type VersionContentFolder struct {
	// ID of this folder version.
	Id string `json:"id"`
	User VersionUser `json:"user"`
	Object ContentFolder `json:"object"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type _VersionContentFolder VersionContentFolder

// NewVersionContentFolder instantiates a new VersionContentFolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionContentFolder(id string, user VersionUser, object ContentFolder, updatedAt time.Time) *VersionContentFolder {
	this := VersionContentFolder{}
	this.Id = id
	this.User = user
	this.Object = object
	this.UpdatedAt = updatedAt
	return &this
}

// NewVersionContentFolderWithDefaults instantiates a new VersionContentFolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionContentFolderWithDefaults() *VersionContentFolder {
	this := VersionContentFolder{}
	return &this
}

// GetId returns the Id field value
func (o *VersionContentFolder) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VersionContentFolder) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VersionContentFolder) SetId(v string) {
	o.Id = v
}

// GetUser returns the User field value
func (o *VersionContentFolder) GetUser() VersionUser {
	if o == nil {
		var ret VersionUser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *VersionContentFolder) GetUserOk() (*VersionUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *VersionContentFolder) SetUser(v VersionUser) {
	o.User = v
}

// GetObject returns the Object field value
func (o *VersionContentFolder) GetObject() ContentFolder {
	if o == nil {
		var ret ContentFolder
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *VersionContentFolder) GetObjectOk() (*ContentFolder, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *VersionContentFolder) SetObject(v ContentFolder) {
	o.Object = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *VersionContentFolder) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *VersionContentFolder) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *VersionContentFolder) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o VersionContentFolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionContentFolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["user"] = o.User
	toSerialize["object"] = o.Object
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *VersionContentFolder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"user",
		"object",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersionContentFolder := _VersionContentFolder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVersionContentFolder)

	if err != nil {
		return err
	}

	*o = VersionContentFolder(varVersionContentFolder)

	return err
}

type NullableVersionContentFolder struct {
	value *VersionContentFolder
	isSet bool
}

func (v NullableVersionContentFolder) Get() *VersionContentFolder {
	return v.value
}

func (v *NullableVersionContentFolder) Set(val *VersionContentFolder) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionContentFolder) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionContentFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionContentFolder(val *VersionContentFolder) *NullableVersionContentFolder {
	return &NullableVersionContentFolder{value: val, isSet: true}
}

func (v NullableVersionContentFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionContentFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


