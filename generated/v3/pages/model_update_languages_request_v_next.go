/*
Pages

Use these endpoints for interacting with Landing Pages and Site Pages

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pages

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateLanguagesRequestVNext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLanguagesRequestVNext{}

// UpdateLanguagesRequestVNext Request object for updating languages within a multi-language group.
type UpdateLanguagesRequestVNext struct {
	// Map of object IDs to associated languages of object in the multi-language group.
	Languages map[string]string `json:"languages"`
	// ID of the primary object in the multi-language group.
	PrimaryId string `json:"primaryId"`
}

type _UpdateLanguagesRequestVNext UpdateLanguagesRequestVNext

// NewUpdateLanguagesRequestVNext instantiates a new UpdateLanguagesRequestVNext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLanguagesRequestVNext(languages map[string]string, primaryId string) *UpdateLanguagesRequestVNext {
	this := UpdateLanguagesRequestVNext{}
	this.Languages = languages
	this.PrimaryId = primaryId
	return &this
}

// NewUpdateLanguagesRequestVNextWithDefaults instantiates a new UpdateLanguagesRequestVNext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLanguagesRequestVNextWithDefaults() *UpdateLanguagesRequestVNext {
	this := UpdateLanguagesRequestVNext{}
	return &this
}

// GetLanguages returns the Languages field value
func (o *UpdateLanguagesRequestVNext) GetLanguages() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value
// and a boolean to check if the value has been set.
func (o *UpdateLanguagesRequestVNext) GetLanguagesOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Languages, true
}

// SetLanguages sets field value
func (o *UpdateLanguagesRequestVNext) SetLanguages(v map[string]string) {
	o.Languages = v
}

// GetPrimaryId returns the PrimaryId field value
func (o *UpdateLanguagesRequestVNext) GetPrimaryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrimaryId
}

// GetPrimaryIdOk returns a tuple with the PrimaryId field value
// and a boolean to check if the value has been set.
func (o *UpdateLanguagesRequestVNext) GetPrimaryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryId, true
}

// SetPrimaryId sets field value
func (o *UpdateLanguagesRequestVNext) SetPrimaryId(v string) {
	o.PrimaryId = v
}

func (o UpdateLanguagesRequestVNext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLanguagesRequestVNext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["languages"] = o.Languages
	toSerialize["primaryId"] = o.PrimaryId
	return toSerialize, nil
}

func (o *UpdateLanguagesRequestVNext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"languages",
		"primaryId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateLanguagesRequestVNext := _UpdateLanguagesRequestVNext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateLanguagesRequestVNext)

	if err != nil {
		return err
	}

	*o = UpdateLanguagesRequestVNext(varUpdateLanguagesRequestVNext)

	return err
}

type NullableUpdateLanguagesRequestVNext struct {
	value *UpdateLanguagesRequestVNext
	isSet bool
}

func (v NullableUpdateLanguagesRequestVNext) Get() *UpdateLanguagesRequestVNext {
	return v.value
}

func (v *NullableUpdateLanguagesRequestVNext) Set(val *UpdateLanguagesRequestVNext) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLanguagesRequestVNext) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLanguagesRequestVNext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLanguagesRequestVNext(val *UpdateLanguagesRequestVNext) *NullableUpdateLanguagesRequestVNext {
	return &NullableUpdateLanguagesRequestVNext{value: val, isSet: true}
}

func (v NullableUpdateLanguagesRequestVNext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLanguagesRequestVNext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


