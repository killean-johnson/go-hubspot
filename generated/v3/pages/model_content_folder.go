/*
Pages

Use these endpoints for interacting with Landing Pages and Site Pages

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pages

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ContentFolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentFolder{}

// ContentFolder Model definition for a content folder.
type ContentFolder struct {
	// The timestamp (ISO8601 format) when this content folder was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The ID of the content folder this folder is nested under
	ParentFolderId int64 `json:"parentFolderId"`
	Created time.Time `json:"created"`
	// The name of the folder which will show up in the app dashboard
	Name string `json:"name"`
	// The unique ID of the content folder.
	Id string `json:"id"`
	// The type of object this folder applies to. Should always be LANDING_PAGE.
	Category int32 `json:"category"`
	Updated time.Time `json:"updated"`
}

type _ContentFolder ContentFolder

// NewContentFolder instantiates a new ContentFolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentFolder(deletedAt time.Time, parentFolderId int64, created time.Time, name string, id string, category int32, updated time.Time) *ContentFolder {
	this := ContentFolder{}
	this.DeletedAt = deletedAt
	this.ParentFolderId = parentFolderId
	this.Created = created
	this.Name = name
	this.Id = id
	this.Category = category
	this.Updated = updated
	return &this
}

// NewContentFolderWithDefaults instantiates a new ContentFolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentFolderWithDefaults() *ContentFolder {
	this := ContentFolder{}
	return &this
}

// GetDeletedAt returns the DeletedAt field value
func (o *ContentFolder) GetDeletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value
// and a boolean to check if the value has been set.
func (o *ContentFolder) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeletedAt, true
}

// SetDeletedAt sets field value
func (o *ContentFolder) SetDeletedAt(v time.Time) {
	o.DeletedAt = v
}

// GetParentFolderId returns the ParentFolderId field value
func (o *ContentFolder) GetParentFolderId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value
// and a boolean to check if the value has been set.
func (o *ContentFolder) GetParentFolderIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentFolderId, true
}

// SetParentFolderId sets field value
func (o *ContentFolder) SetParentFolderId(v int64) {
	o.ParentFolderId = v
}

// GetCreated returns the Created field value
func (o *ContentFolder) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ContentFolder) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ContentFolder) SetCreated(v time.Time) {
	o.Created = v
}

// GetName returns the Name field value
func (o *ContentFolder) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContentFolder) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContentFolder) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *ContentFolder) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ContentFolder) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ContentFolder) SetId(v string) {
	o.Id = v
}

// GetCategory returns the Category field value
func (o *ContentFolder) GetCategory() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *ContentFolder) GetCategoryOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *ContentFolder) SetCategory(v int32) {
	o.Category = v
}

// GetUpdated returns the Updated field value
func (o *ContentFolder) GetUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *ContentFolder) GetUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *ContentFolder) SetUpdated(v time.Time) {
	o.Updated = v
}

func (o ContentFolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentFolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deletedAt"] = o.DeletedAt
	toSerialize["parentFolderId"] = o.ParentFolderId
	toSerialize["created"] = o.Created
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	toSerialize["category"] = o.Category
	toSerialize["updated"] = o.Updated
	return toSerialize, nil
}

func (o *ContentFolder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deletedAt",
		"parentFolderId",
		"created",
		"name",
		"id",
		"category",
		"updated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentFolder := _ContentFolder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentFolder)

	if err != nil {
		return err
	}

	*o = ContentFolder(varContentFolder)

	return err
}

type NullableContentFolder struct {
	value *ContentFolder
	isSet bool
}

func (v NullableContentFolder) Get() *ContentFolder {
	return v.value
}

func (v *NullableContentFolder) Set(val *ContentFolder) {
	v.value = val
	v.isSet = true
}

func (v NullableContentFolder) IsSet() bool {
	return v.isSet
}

func (v *NullableContentFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentFolder(val *ContentFolder) *NullableContentFolder {
	return &NullableContentFolder{value: val, isSet: true}
}

func (v NullableContentFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


