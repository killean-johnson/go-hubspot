/*
Pages

Use these endpoints for interacting with Landing Pages and Site Pages

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pages

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AbTestRerunRequestVNext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbTestRerunRequestVNext{}

// AbTestRerunRequestVNext Request body object for rerunning A/B tests.
type AbTestRerunRequestVNext struct {
	// ID of the object to reactivate as a test variation.
	VariationId string `json:"variationId"`
	// ID of the test to rerun.
	AbTestId string `json:"abTestId"`
}

type _AbTestRerunRequestVNext AbTestRerunRequestVNext

// NewAbTestRerunRequestVNext instantiates a new AbTestRerunRequestVNext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbTestRerunRequestVNext(variationId string, abTestId string) *AbTestRerunRequestVNext {
	this := AbTestRerunRequestVNext{}
	this.VariationId = variationId
	this.AbTestId = abTestId
	return &this
}

// NewAbTestRerunRequestVNextWithDefaults instantiates a new AbTestRerunRequestVNext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbTestRerunRequestVNextWithDefaults() *AbTestRerunRequestVNext {
	this := AbTestRerunRequestVNext{}
	return &this
}

// GetVariationId returns the VariationId field value
func (o *AbTestRerunRequestVNext) GetVariationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VariationId
}

// GetVariationIdOk returns a tuple with the VariationId field value
// and a boolean to check if the value has been set.
func (o *AbTestRerunRequestVNext) GetVariationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VariationId, true
}

// SetVariationId sets field value
func (o *AbTestRerunRequestVNext) SetVariationId(v string) {
	o.VariationId = v
}

// GetAbTestId returns the AbTestId field value
func (o *AbTestRerunRequestVNext) GetAbTestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AbTestId
}

// GetAbTestIdOk returns a tuple with the AbTestId field value
// and a boolean to check if the value has been set.
func (o *AbTestRerunRequestVNext) GetAbTestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbTestId, true
}

// SetAbTestId sets field value
func (o *AbTestRerunRequestVNext) SetAbTestId(v string) {
	o.AbTestId = v
}

func (o AbTestRerunRequestVNext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbTestRerunRequestVNext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["variationId"] = o.VariationId
	toSerialize["abTestId"] = o.AbTestId
	return toSerialize, nil
}

func (o *AbTestRerunRequestVNext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"variationId",
		"abTestId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAbTestRerunRequestVNext := _AbTestRerunRequestVNext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAbTestRerunRequestVNext)

	if err != nil {
		return err
	}

	*o = AbTestRerunRequestVNext(varAbTestRerunRequestVNext)

	return err
}

type NullableAbTestRerunRequestVNext struct {
	value *AbTestRerunRequestVNext
	isSet bool
}

func (v NullableAbTestRerunRequestVNext) Get() *AbTestRerunRequestVNext {
	return v.value
}

func (v *NullableAbTestRerunRequestVNext) Set(val *AbTestRerunRequestVNext) {
	v.value = val
	v.isSet = true
}

func (v NullableAbTestRerunRequestVNext) IsSet() bool {
	return v.isSet
}

func (v *NullableAbTestRerunRequestVNext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbTestRerunRequestVNext(val *AbTestRerunRequestVNext) *NullableAbTestRerunRequestVNext {
	return &NullableAbTestRerunRequestVNext{value: val, isSet: true}
}

func (v NullableAbTestRerunRequestVNext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbTestRerunRequestVNext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


