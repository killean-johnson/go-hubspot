/*
Pages

Use these endpoints for interacting with Landing Pages and Site Pages

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pages

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Angle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Angle{}

// Angle struct for Angle
type Angle struct {
	// 
	Units string `json:"units"`
	// 
	Value float32 `json:"value"`
}

type _Angle Angle

// NewAngle instantiates a new Angle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAngle(units string, value float32) *Angle {
	this := Angle{}
	this.Units = units
	this.Value = value
	return &this
}

// NewAngleWithDefaults instantiates a new Angle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAngleWithDefaults() *Angle {
	this := Angle{}
	return &this
}

// GetUnits returns the Units field value
func (o *Angle) GetUnits() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *Angle) GetUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Units, true
}

// SetUnits sets field value
func (o *Angle) SetUnits(v string) {
	o.Units = v
}

// GetValue returns the Value field value
func (o *Angle) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Angle) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Angle) SetValue(v float32) {
	o.Value = v
}

func (o Angle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Angle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["units"] = o.Units
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *Angle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"units",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAngle := _Angle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAngle)

	if err != nil {
		return err
	}

	*o = Angle(varAngle)

	return err
}

type NullableAngle struct {
	value *Angle
	isSet bool
}

func (v NullableAngle) Get() *Angle {
	return v.value
}

func (v *NullableAngle) Set(val *Angle) {
	v.value = val
	v.isSet = true
}

func (v NullableAngle) IsSet() bool {
	return v.isSet
}

func (v *NullableAngle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAngle(val *Angle) *NullableAngle {
	return &NullableAngle{value: val, isSet: true}
}

func (v NullableAngle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAngle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


