/*
Marketing Emails V3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_emails_v3

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
	"time"
	"reflect"
)


// MarketingEmailsAPIService MarketingEmailsAPI service
type MarketingEmailsAPIService service

type ApiDeleteMarketingV3EmailsEmailIdRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	archived *bool
}

// Whether to return only results that have been archived.
func (r ApiDeleteMarketingV3EmailsEmailIdRequest) Archived(archived bool) ApiDeleteMarketingV3EmailsEmailIdRequest {
	r.archived = &archived
	return r
}

func (r ApiDeleteMarketingV3EmailsEmailIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingV3EmailsEmailIdExecute(r)
}

/*
DeleteMarketingV3EmailsEmailId Delete a marketing email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The ID of the marketing email to delete.
 @return ApiDeleteMarketingV3EmailsEmailIdRequest
*/
func (a *MarketingEmailsAPIService) DeleteMarketingV3EmailsEmailId(ctx context.Context, emailId string) ApiDeleteMarketingV3EmailsEmailIdRequest {
	return ApiDeleteMarketingV3EmailsEmailIdRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
func (a *MarketingEmailsAPIService) DeleteMarketingV3EmailsEmailIdExecute(r ApiDeleteMarketingV3EmailsEmailIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.DeleteMarketingV3EmailsEmailId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	createdAt *time.Time
	createdAfter *time.Time
	createdBefore *time.Time
	updatedAt *time.Time
	updatedAfter *time.Time
	updatedBefore *time.Time
	sort *[]string
	after *string
	limit *int32
	includeStats *bool
	type_ *string
	isPublished *bool
	includedProperties *[]string
	archived *bool
}

// Only return emails created at exactly the specified time.
func (r ApiGetMarketingV3EmailsRequest) CreatedAt(createdAt time.Time) ApiGetMarketingV3EmailsRequest {
	r.createdAt = &createdAt
	return r
}

// Only return emails created after the specified time.
func (r ApiGetMarketingV3EmailsRequest) CreatedAfter(createdAfter time.Time) ApiGetMarketingV3EmailsRequest {
	r.createdAfter = &createdAfter
	return r
}

// Only return emails created before the specified time.
func (r ApiGetMarketingV3EmailsRequest) CreatedBefore(createdBefore time.Time) ApiGetMarketingV3EmailsRequest {
	r.createdBefore = &createdBefore
	return r
}

// Only return emails last updated at exactly the specified time.
func (r ApiGetMarketingV3EmailsRequest) UpdatedAt(updatedAt time.Time) ApiGetMarketingV3EmailsRequest {
	r.updatedAt = &updatedAt
	return r
}

// Only return emails last updated after the specified time.
func (r ApiGetMarketingV3EmailsRequest) UpdatedAfter(updatedAfter time.Time) ApiGetMarketingV3EmailsRequest {
	r.updatedAfter = &updatedAfter
	return r
}

// Only return emails last updated before the specified time.
func (r ApiGetMarketingV3EmailsRequest) UpdatedBefore(updatedBefore time.Time) ApiGetMarketingV3EmailsRequest {
	r.updatedBefore = &updatedBefore
	return r
}

// Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default.
func (r ApiGetMarketingV3EmailsRequest) Sort(sort []string) ApiGetMarketingV3EmailsRequest {
	r.sort = &sort
	return r
}

// The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetMarketingV3EmailsRequest) After(after string) ApiGetMarketingV3EmailsRequest {
	r.after = &after
	return r
}

// The maximum number of results to return. Default is 100.
func (r ApiGetMarketingV3EmailsRequest) Limit(limit int32) ApiGetMarketingV3EmailsRequest {
	r.limit = &limit
	return r
}

// Include statistics with emails.
func (r ApiGetMarketingV3EmailsRequest) IncludeStats(includeStats bool) ApiGetMarketingV3EmailsRequest {
	r.includeStats = &includeStats
	return r
}

// Email types to be filtered by. Multiple types can be included. All emails will be returned if not present.
func (r ApiGetMarketingV3EmailsRequest) Type_(type_ string) ApiGetMarketingV3EmailsRequest {
	r.type_ = &type_
	return r
}

// Filter by published/draft emails. All emails will be returned if not present.
func (r ApiGetMarketingV3EmailsRequest) IsPublished(isPublished bool) ApiGetMarketingV3EmailsRequest {
	r.isPublished = &isPublished
	return r
}

func (r ApiGetMarketingV3EmailsRequest) IncludedProperties(includedProperties []string) ApiGetMarketingV3EmailsRequest {
	r.includedProperties = &includedProperties
	return r
}

// Specifies whether to return archived emails. Defaults to &#x60;false&#x60;.
func (r ApiGetMarketingV3EmailsRequest) Archived(archived bool) ApiGetMarketingV3EmailsRequest {
	r.archived = &archived
	return r
}

func (r ApiGetMarketingV3EmailsRequest) Execute() (*CollectionResponseWithTotalPublicEmailForwardPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsExecute(r)
}

/*
GetMarketingV3Emails Get all marketing emails for a HubSpot account.

The results can be filtered, allowing you to find a specific set of emails. See the table below for a full list of filtering options.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingV3EmailsRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3Emails(ctx context.Context) ApiGetMarketingV3EmailsRequest {
	return ApiGetMarketingV3EmailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseWithTotalPublicEmailForwardPaging
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsExecute(r ApiGetMarketingV3EmailsRequest) (*CollectionResponseWithTotalPublicEmailForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseWithTotalPublicEmailForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3Emails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.createdAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdAt", r.createdAt, "form", "")
	}
	if r.createdAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdAfter", r.createdAfter, "form", "")
	}
	if r.createdBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdBefore", r.createdBefore, "form", "")
	}
	if r.updatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedAt", r.updatedAt, "form", "")
	}
	if r.updatedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedAfter", r.updatedAfter, "form", "")
	}
	if r.updatedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedBefore", r.updatedBefore, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.includeStats != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeStats", r.includeStats, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.isPublished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isPublished", r.isPublished, "form", "")
	}
	if r.includedProperties != nil {
		t := *r.includedProperties
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "includedProperties", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "includedProperties", t, "form", "multi")
		}
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsEmailIdRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	includeStats *bool
	includedProperties *[]string
	archived *bool
}

// Include statistics with email
func (r ApiGetMarketingV3EmailsEmailIdRequest) IncludeStats(includeStats bool) ApiGetMarketingV3EmailsEmailIdRequest {
	r.includeStats = &includeStats
	return r
}

func (r ApiGetMarketingV3EmailsEmailIdRequest) IncludedProperties(includedProperties []string) ApiGetMarketingV3EmailsEmailIdRequest {
	r.includedProperties = &includedProperties
	return r
}

// Whether to return only results that have been archived.
func (r ApiGetMarketingV3EmailsEmailIdRequest) Archived(archived bool) ApiGetMarketingV3EmailsEmailIdRequest {
	r.archived = &archived
	return r
}

func (r ApiGetMarketingV3EmailsEmailIdRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsEmailIdExecute(r)
}

/*
GetMarketingV3EmailsEmailId Get the details of a specified marketing email.

Get the details for a marketing email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @return ApiGetMarketingV3EmailsEmailIdRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailId(ctx context.Context, emailId string) ApiGetMarketingV3EmailsEmailIdRequest {
	return ApiGetMarketingV3EmailsEmailIdRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdExecute(r ApiGetMarketingV3EmailsEmailIdRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3EmailsEmailId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeStats != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeStats", r.includeStats, "form", "")
	}
	if r.includedProperties != nil {
		t := *r.includedProperties
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "includedProperties", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "includedProperties", t, "form", "multi")
		}
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsEmailIdAbTestGetVariationRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
}

func (r ApiGetMarketingV3EmailsEmailIdAbTestGetVariationRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsEmailIdAbTestGetVariationExecute(r)
}

/*
GetMarketingV3EmailsEmailIdAbTestGetVariation Get the variation of a an A/B marketing email

This endpoint lets you obtain the variation of an A/B marketing email. If the email is variation A (master) it will return variation B (variant) and vice versa.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The ID of an A/B marketing email.
 @return ApiGetMarketingV3EmailsEmailIdAbTestGetVariationRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdAbTestGetVariation(ctx context.Context, emailId string) ApiGetMarketingV3EmailsEmailIdAbTestGetVariationRequest {
	return ApiGetMarketingV3EmailsEmailIdAbTestGetVariationRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdAbTestGetVariationExecute(r ApiGetMarketingV3EmailsEmailIdAbTestGetVariationRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3EmailsEmailIdAbTestGetVariation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/ab-test/get-variation"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsEmailIdDraftRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
}

func (r ApiGetMarketingV3EmailsEmailIdDraftRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsEmailIdDraftExecute(r)
}

/*
GetMarketingV3EmailsEmailIdDraft Get draft version of a marketing email

Get the draft version of an email (if it exists). If no draft version exists, the published email is returned.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @return ApiGetMarketingV3EmailsEmailIdDraftRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdDraft(ctx context.Context, emailId string) ApiGetMarketingV3EmailsEmailIdDraftRequest {
	return ApiGetMarketingV3EmailsEmailIdDraftRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdDraftExecute(r ApiGetMarketingV3EmailsEmailIdDraftRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3EmailsEmailIdDraft")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/draft"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsEmailIdRevisionsRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	after *string
	before *string
	limit *int32
}

// The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetMarketingV3EmailsEmailIdRevisionsRequest) After(after string) ApiGetMarketingV3EmailsEmailIdRevisionsRequest {
	r.after = &after
	return r
}

// The cursor token value to get the previous set of results. You can get this from the &#x60;paging.prev.before&#x60; JSON property of a paged response containing more results.
func (r ApiGetMarketingV3EmailsEmailIdRevisionsRequest) Before(before string) ApiGetMarketingV3EmailsEmailIdRevisionsRequest {
	r.before = &before
	return r
}

// The maximum number of results to return. Default is 100.
func (r ApiGetMarketingV3EmailsEmailIdRevisionsRequest) Limit(limit int32) ApiGetMarketingV3EmailsEmailIdRevisionsRequest {
	r.limit = &limit
	return r
}

func (r ApiGetMarketingV3EmailsEmailIdRevisionsRequest) Execute() (*CollectionResponseWithTotalVersionPublicEmail, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsEmailIdRevisionsExecute(r)
}

/*
GetMarketingV3EmailsEmailIdRevisions Get revisions of a marketing email

Get a list of all versions of a marketing email, with each entry including the full state of that particular version. The current revision has the ID -1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @return ApiGetMarketingV3EmailsEmailIdRevisionsRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdRevisions(ctx context.Context, emailId string) ApiGetMarketingV3EmailsEmailIdRevisionsRequest {
	return ApiGetMarketingV3EmailsEmailIdRevisionsRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return CollectionResponseWithTotalVersionPublicEmail
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdRevisionsExecute(r ApiGetMarketingV3EmailsEmailIdRevisionsRequest) (*CollectionResponseWithTotalVersionPublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseWithTotalVersionPublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3EmailsEmailIdRevisions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/revisions"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	revisionId string
}

func (r ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdRequest) Execute() (*VersionPublicEmail, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsEmailIdRevisionsRevisionIdExecute(r)
}

/*
GetMarketingV3EmailsEmailIdRevisionsRevisionId Get a revision of a marketing email.

Get a specific revision of a marketing email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @param revisionId The ID of a revision.
 @return ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdRevisionsRevisionId(ctx context.Context, emailId string, revisionId string) ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdRequest {
	return ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
		revisionId: revisionId,
	}
}

// Execute executes the request
//  @return VersionPublicEmail
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdRevisionsRevisionIdExecute(r ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdRequest) (*VersionPublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VersionPublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3EmailsEmailIdRevisionsRevisionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/revisions/{revisionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"revisionId"+"}", url.PathEscape(parameterValueToString(r.revisionId, "revisionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingV3EmailsEmailIdRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	emailUpdateRequest *EmailUpdateRequest
	archived *bool
}

// A marketing email object with properties that should overwrite the corresponding properties of the marketing email.
func (r ApiPatchMarketingV3EmailsEmailIdRequest) EmailUpdateRequest(emailUpdateRequest EmailUpdateRequest) ApiPatchMarketingV3EmailsEmailIdRequest {
	r.emailUpdateRequest = &emailUpdateRequest
	return r
}

// Whether to return only results that have been archived.
func (r ApiPatchMarketingV3EmailsEmailIdRequest) Archived(archived bool) ApiPatchMarketingV3EmailsEmailIdRequest {
	r.archived = &archived
	return r
}

func (r ApiPatchMarketingV3EmailsEmailIdRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.PatchMarketingV3EmailsEmailIdExecute(r)
}

/*
PatchMarketingV3EmailsEmailId Update a marketing email.

Change properties of a marketing email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The ID of the marketing email that should get updated
 @return ApiPatchMarketingV3EmailsEmailIdRequest
*/
func (a *MarketingEmailsAPIService) PatchMarketingV3EmailsEmailId(ctx context.Context, emailId string) ApiPatchMarketingV3EmailsEmailIdRequest {
	return ApiPatchMarketingV3EmailsEmailIdRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) PatchMarketingV3EmailsEmailIdExecute(r ApiPatchMarketingV3EmailsEmailIdRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PatchMarketingV3EmailsEmailId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("emailUpdateRequest is required and must be specified")
	}

	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.emailUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingV3EmailsEmailIdDraftRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	emailUpdateRequest *EmailUpdateRequest
}

// A marketing email object with properties that should overwrite the corresponding properties in the email&#39;s current draft.
func (r ApiPatchMarketingV3EmailsEmailIdDraftRequest) EmailUpdateRequest(emailUpdateRequest EmailUpdateRequest) ApiPatchMarketingV3EmailsEmailIdDraftRequest {
	r.emailUpdateRequest = &emailUpdateRequest
	return r
}

func (r ApiPatchMarketingV3EmailsEmailIdDraftRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.PatchMarketingV3EmailsEmailIdDraftExecute(r)
}

/*
PatchMarketingV3EmailsEmailIdDraft Create or update draft version

Create or update the draft version of a marketing email. If no draft exists, the system creates a draft from the current “live” email then applies the request body to that draft. The draft version only lives on the buffer—the email is not cloned.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @return ApiPatchMarketingV3EmailsEmailIdDraftRequest
*/
func (a *MarketingEmailsAPIService) PatchMarketingV3EmailsEmailIdDraft(ctx context.Context, emailId string) ApiPatchMarketingV3EmailsEmailIdDraftRequest {
	return ApiPatchMarketingV3EmailsEmailIdDraftRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) PatchMarketingV3EmailsEmailIdDraftExecute(r ApiPatchMarketingV3EmailsEmailIdDraftRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PatchMarketingV3EmailsEmailIdDraft")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/draft"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("emailUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.emailUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailCreateRequest *EmailCreateRequest
}

func (r ApiPostMarketingV3EmailsRequest) EmailCreateRequest(emailCreateRequest EmailCreateRequest) ApiPostMarketingV3EmailsRequest {
	r.emailCreateRequest = &emailCreateRequest
	return r
}

func (r ApiPostMarketingV3EmailsRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsExecute(r)
}

/*
PostMarketingV3Emails Create a new marketing email.

Use this endpoint to create a new marketing email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3EmailsRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3Emails(ctx context.Context) ApiPostMarketingV3EmailsRequest {
	return ApiPostMarketingV3EmailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsExecute(r ApiPostMarketingV3EmailsRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3Emails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailCreateRequest == nil {
		return localVarReturnValue, nil, reportError("emailCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.emailCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsEmailIdDraftResetRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
}

func (r ApiPostMarketingV3EmailsEmailIdDraftResetRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsEmailIdDraftResetExecute(r)
}

/*
PostMarketingV3EmailsEmailIdDraftReset Reset Draft

Resets the draft back to a copy of the live object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @return ApiPostMarketingV3EmailsEmailIdDraftResetRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdDraftReset(ctx context.Context, emailId string) ApiPostMarketingV3EmailsEmailIdDraftResetRequest {
	return ApiPostMarketingV3EmailsEmailIdDraftResetRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdDraftResetExecute(r ApiPostMarketingV3EmailsEmailIdDraftResetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3EmailsEmailIdDraftReset")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/draft/reset"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	revisionId string
}

func (r ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreExecute(r)
}

/*
PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestore Restore a revision of a marketing email

Restores a previous revision of a marketing email. The current revision becomes old, and the restored revision is given a new version number.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @param revisionId The ID of a revision.
 @return ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestore(ctx context.Context, emailId string, revisionId string) ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRequest {
	return ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
		revisionId: revisionId,
	}
}

// Execute executes the request
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreExecute(r ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestore")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/revisions/{revisionId}/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"revisionId"+"}", url.PathEscape(parameterValueToString(r.revisionId, "revisionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	revisionId int64
}

func (r ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftExecute(r)
}

/*
PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraft Restore a revision of a marketing email to DRAFT state

Restores a previous revision of a marketing email to DRAFT state. If there is currently something in the draft for that object, it is overwritten. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @param revisionId The ID of a revision.
 @return ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraft(ctx context.Context, emailId string, revisionId int64) ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRequest {
	return ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
		revisionId: revisionId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftExecute(r ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraft")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/revisions/{revisionId}/restore-to-draft"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"revisionId"+"}", url.PathEscape(parameterValueToString(r.revisionId, "revisionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
