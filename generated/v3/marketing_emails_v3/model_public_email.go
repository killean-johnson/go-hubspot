/*
Marketing Emails V3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_emails_v3

import (
	"encoding/json"
	"time"
)

// checks if the PublicEmail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicEmail{}

// PublicEmail A marketing email
type PublicEmail struct {
	// The ID of the feedback survey linked to the email.
	FeedbackSurveyId *string `json:"feedbackSurveyId,omitempty"`
	// The subject of the email.
	Subject *string `json:"subject,omitempty"`
	// The date and time the email is scheduled for, in ISO8601 representation. This is only used in local time or scheduled emails.
	PublishDate *time.Time `json:"publishDate,omitempty"`
	// Returns whether the email is a transactional email or not. This is read only.
	IsTransactional *bool `json:"isTransactional,omitempty"`
	Language *string `json:"language,omitempty"`
	// The email type, this is derived from other properties on the email such as subcategory.
	Type *string `json:"type,omitempty"`
	Content *PublicEmailContent `json:"content,omitempty"`
	BusinessUnitId *string `json:"businessUnitId,omitempty"`
	Webversion *PublicWebversionDetails `json:"webversion,omitempty"`
	// Determines if the email is archived or not.
	Archived *bool `json:"archived,omitempty"`
	// The date and time of the email's creation, in ISO8601 representation.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Stats *EmailStatisticsData `json:"stats,omitempty"`
	From *PublicEmailFromDetails `json:"from,omitempty"`
	// The email ID.
	Id *string `json:"id,omitempty"`
	// The email state.
	State *string `json:"state,omitempty"`
	// The id of the user who created the email.
	CreatedById *string `json:"createdById,omitempty"`
	// The date and time of the last update to the email, in ISO8601 representation.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	RssData *PublicRssEmailDetails `json:"rssData,omitempty"`
	// The date and time the email was published at, in ISO8601 representation.
	PublishedAt *time.Time `json:"publishedAt,omitempty"`
	PublishedById *string `json:"publishedById,omitempty"`
	// Returns the published status of the email. This is read only.
	IsPublished *bool `json:"isPublished,omitempty"`
	Testing *PublicEmailTestingDetails `json:"testing,omitempty"`
	// The id of the user who last updated the email.
	UpdatedById *string `json:"updatedById,omitempty"`
	FolderId *int64 `json:"folderId,omitempty"`
	SubscriptionDetails *PublicEmailSubscriptionDetails `json:"subscriptionDetails,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// The name of the email, as displayed on the email dashboard.
	Name *string `json:"name,omitempty"`
	// The active domain of the email.
	ActiveDomain *string `json:"activeDomain,omitempty"`
	// The ID of the campaign this email is associated to.
	Campaign *string `json:"campaign,omitempty"`
	To *PublicEmailToDetails `json:"to,omitempty"`
	// The email subcategory.
	Subcategory *string `json:"subcategory,omitempty"`
	// Determines whether the email will be sent immediately on publish.
	SendOnPublish *bool `json:"sendOnPublish,omitempty"`
}

// NewPublicEmail instantiates a new PublicEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicEmail() *PublicEmail {
	this := PublicEmail{}
	return &this
}

// NewPublicEmailWithDefaults instantiates a new PublicEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicEmailWithDefaults() *PublicEmail {
	this := PublicEmail{}
	return &this
}

// GetFeedbackSurveyId returns the FeedbackSurveyId field value if set, zero value otherwise.
func (o *PublicEmail) GetFeedbackSurveyId() string {
	if o == nil || IsNil(o.FeedbackSurveyId) {
		var ret string
		return ret
	}
	return *o.FeedbackSurveyId
}

// GetFeedbackSurveyIdOk returns a tuple with the FeedbackSurveyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetFeedbackSurveyIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeedbackSurveyId) {
		return nil, false
	}
	return o.FeedbackSurveyId, true
}

// HasFeedbackSurveyId returns a boolean if a field has been set.
func (o *PublicEmail) HasFeedbackSurveyId() bool {
	if o != nil && !IsNil(o.FeedbackSurveyId) {
		return true
	}

	return false
}

// SetFeedbackSurveyId gets a reference to the given string and assigns it to the FeedbackSurveyId field.
func (o *PublicEmail) SetFeedbackSurveyId(v string) {
	o.FeedbackSurveyId = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *PublicEmail) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *PublicEmail) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *PublicEmail) SetSubject(v string) {
	o.Subject = &v
}

// GetPublishDate returns the PublishDate field value if set, zero value otherwise.
func (o *PublicEmail) GetPublishDate() time.Time {
	if o == nil || IsNil(o.PublishDate) {
		var ret time.Time
		return ret
	}
	return *o.PublishDate
}

// GetPublishDateOk returns a tuple with the PublishDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetPublishDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishDate) {
		return nil, false
	}
	return o.PublishDate, true
}

// HasPublishDate returns a boolean if a field has been set.
func (o *PublicEmail) HasPublishDate() bool {
	if o != nil && !IsNil(o.PublishDate) {
		return true
	}

	return false
}

// SetPublishDate gets a reference to the given time.Time and assigns it to the PublishDate field.
func (o *PublicEmail) SetPublishDate(v time.Time) {
	o.PublishDate = &v
}

// GetIsTransactional returns the IsTransactional field value if set, zero value otherwise.
func (o *PublicEmail) GetIsTransactional() bool {
	if o == nil || IsNil(o.IsTransactional) {
		var ret bool
		return ret
	}
	return *o.IsTransactional
}

// GetIsTransactionalOk returns a tuple with the IsTransactional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetIsTransactionalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTransactional) {
		return nil, false
	}
	return o.IsTransactional, true
}

// HasIsTransactional returns a boolean if a field has been set.
func (o *PublicEmail) HasIsTransactional() bool {
	if o != nil && !IsNil(o.IsTransactional) {
		return true
	}

	return false
}

// SetIsTransactional gets a reference to the given bool and assigns it to the IsTransactional field.
func (o *PublicEmail) SetIsTransactional(v bool) {
	o.IsTransactional = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *PublicEmail) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *PublicEmail) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *PublicEmail) SetLanguage(v string) {
	o.Language = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PublicEmail) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PublicEmail) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PublicEmail) SetType(v string) {
	o.Type = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *PublicEmail) GetContent() PublicEmailContent {
	if o == nil || IsNil(o.Content) {
		var ret PublicEmailContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetContentOk() (*PublicEmailContent, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *PublicEmail) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given PublicEmailContent and assigns it to the Content field.
func (o *PublicEmail) SetContent(v PublicEmailContent) {
	o.Content = &v
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise.
func (o *PublicEmail) GetBusinessUnitId() string {
	if o == nil || IsNil(o.BusinessUnitId) {
		var ret string
		return ret
	}
	return *o.BusinessUnitId
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetBusinessUnitIdOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessUnitId) {
		return nil, false
	}
	return o.BusinessUnitId, true
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *PublicEmail) HasBusinessUnitId() bool {
	if o != nil && !IsNil(o.BusinessUnitId) {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given string and assigns it to the BusinessUnitId field.
func (o *PublicEmail) SetBusinessUnitId(v string) {
	o.BusinessUnitId = &v
}

// GetWebversion returns the Webversion field value if set, zero value otherwise.
func (o *PublicEmail) GetWebversion() PublicWebversionDetails {
	if o == nil || IsNil(o.Webversion) {
		var ret PublicWebversionDetails
		return ret
	}
	return *o.Webversion
}

// GetWebversionOk returns a tuple with the Webversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetWebversionOk() (*PublicWebversionDetails, bool) {
	if o == nil || IsNil(o.Webversion) {
		return nil, false
	}
	return o.Webversion, true
}

// HasWebversion returns a boolean if a field has been set.
func (o *PublicEmail) HasWebversion() bool {
	if o != nil && !IsNil(o.Webversion) {
		return true
	}

	return false
}

// SetWebversion gets a reference to the given PublicWebversionDetails and assigns it to the Webversion field.
func (o *PublicEmail) SetWebversion(v PublicWebversionDetails) {
	o.Webversion = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *PublicEmail) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *PublicEmail) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *PublicEmail) SetArchived(v bool) {
	o.Archived = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PublicEmail) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PublicEmail) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PublicEmail) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *PublicEmail) GetStats() EmailStatisticsData {
	if o == nil || IsNil(o.Stats) {
		var ret EmailStatisticsData
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetStatsOk() (*EmailStatisticsData, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *PublicEmail) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given EmailStatisticsData and assigns it to the Stats field.
func (o *PublicEmail) SetStats(v EmailStatisticsData) {
	o.Stats = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *PublicEmail) GetFrom() PublicEmailFromDetails {
	if o == nil || IsNil(o.From) {
		var ret PublicEmailFromDetails
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetFromOk() (*PublicEmailFromDetails, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *PublicEmail) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given PublicEmailFromDetails and assigns it to the From field.
func (o *PublicEmail) SetFrom(v PublicEmailFromDetails) {
	o.From = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PublicEmail) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PublicEmail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PublicEmail) SetId(v string) {
	o.Id = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PublicEmail) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PublicEmail) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PublicEmail) SetState(v string) {
	o.State = &v
}

// GetCreatedById returns the CreatedById field value if set, zero value otherwise.
func (o *PublicEmail) GetCreatedById() string {
	if o == nil || IsNil(o.CreatedById) {
		var ret string
		return ret
	}
	return *o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetCreatedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedById) {
		return nil, false
	}
	return o.CreatedById, true
}

// HasCreatedById returns a boolean if a field has been set.
func (o *PublicEmail) HasCreatedById() bool {
	if o != nil && !IsNil(o.CreatedById) {
		return true
	}

	return false
}

// SetCreatedById gets a reference to the given string and assigns it to the CreatedById field.
func (o *PublicEmail) SetCreatedById(v string) {
	o.CreatedById = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PublicEmail) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PublicEmail) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PublicEmail) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetRssData returns the RssData field value if set, zero value otherwise.
func (o *PublicEmail) GetRssData() PublicRssEmailDetails {
	if o == nil || IsNil(o.RssData) {
		var ret PublicRssEmailDetails
		return ret
	}
	return *o.RssData
}

// GetRssDataOk returns a tuple with the RssData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetRssDataOk() (*PublicRssEmailDetails, bool) {
	if o == nil || IsNil(o.RssData) {
		return nil, false
	}
	return o.RssData, true
}

// HasRssData returns a boolean if a field has been set.
func (o *PublicEmail) HasRssData() bool {
	if o != nil && !IsNil(o.RssData) {
		return true
	}

	return false
}

// SetRssData gets a reference to the given PublicRssEmailDetails and assigns it to the RssData field.
func (o *PublicEmail) SetRssData(v PublicRssEmailDetails) {
	o.RssData = &v
}

// GetPublishedAt returns the PublishedAt field value if set, zero value otherwise.
func (o *PublicEmail) GetPublishedAt() time.Time {
	if o == nil || IsNil(o.PublishedAt) {
		var ret time.Time
		return ret
	}
	return *o.PublishedAt
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetPublishedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishedAt) {
		return nil, false
	}
	return o.PublishedAt, true
}

// HasPublishedAt returns a boolean if a field has been set.
func (o *PublicEmail) HasPublishedAt() bool {
	if o != nil && !IsNil(o.PublishedAt) {
		return true
	}

	return false
}

// SetPublishedAt gets a reference to the given time.Time and assigns it to the PublishedAt field.
func (o *PublicEmail) SetPublishedAt(v time.Time) {
	o.PublishedAt = &v
}

// GetPublishedById returns the PublishedById field value if set, zero value otherwise.
func (o *PublicEmail) GetPublishedById() string {
	if o == nil || IsNil(o.PublishedById) {
		var ret string
		return ret
	}
	return *o.PublishedById
}

// GetPublishedByIdOk returns a tuple with the PublishedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetPublishedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.PublishedById) {
		return nil, false
	}
	return o.PublishedById, true
}

// HasPublishedById returns a boolean if a field has been set.
func (o *PublicEmail) HasPublishedById() bool {
	if o != nil && !IsNil(o.PublishedById) {
		return true
	}

	return false
}

// SetPublishedById gets a reference to the given string and assigns it to the PublishedById field.
func (o *PublicEmail) SetPublishedById(v string) {
	o.PublishedById = &v
}

// GetIsPublished returns the IsPublished field value if set, zero value otherwise.
func (o *PublicEmail) GetIsPublished() bool {
	if o == nil || IsNil(o.IsPublished) {
		var ret bool
		return ret
	}
	return *o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetIsPublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublished) {
		return nil, false
	}
	return o.IsPublished, true
}

// HasIsPublished returns a boolean if a field has been set.
func (o *PublicEmail) HasIsPublished() bool {
	if o != nil && !IsNil(o.IsPublished) {
		return true
	}

	return false
}

// SetIsPublished gets a reference to the given bool and assigns it to the IsPublished field.
func (o *PublicEmail) SetIsPublished(v bool) {
	o.IsPublished = &v
}

// GetTesting returns the Testing field value if set, zero value otherwise.
func (o *PublicEmail) GetTesting() PublicEmailTestingDetails {
	if o == nil || IsNil(o.Testing) {
		var ret PublicEmailTestingDetails
		return ret
	}
	return *o.Testing
}

// GetTestingOk returns a tuple with the Testing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetTestingOk() (*PublicEmailTestingDetails, bool) {
	if o == nil || IsNil(o.Testing) {
		return nil, false
	}
	return o.Testing, true
}

// HasTesting returns a boolean if a field has been set.
func (o *PublicEmail) HasTesting() bool {
	if o != nil && !IsNil(o.Testing) {
		return true
	}

	return false
}

// SetTesting gets a reference to the given PublicEmailTestingDetails and assigns it to the Testing field.
func (o *PublicEmail) SetTesting(v PublicEmailTestingDetails) {
	o.Testing = &v
}

// GetUpdatedById returns the UpdatedById field value if set, zero value otherwise.
func (o *PublicEmail) GetUpdatedById() string {
	if o == nil || IsNil(o.UpdatedById) {
		var ret string
		return ret
	}
	return *o.UpdatedById
}

// GetUpdatedByIdOk returns a tuple with the UpdatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetUpdatedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedById) {
		return nil, false
	}
	return o.UpdatedById, true
}

// HasUpdatedById returns a boolean if a field has been set.
func (o *PublicEmail) HasUpdatedById() bool {
	if o != nil && !IsNil(o.UpdatedById) {
		return true
	}

	return false
}

// SetUpdatedById gets a reference to the given string and assigns it to the UpdatedById field.
func (o *PublicEmail) SetUpdatedById(v string) {
	o.UpdatedById = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *PublicEmail) GetFolderId() int64 {
	if o == nil || IsNil(o.FolderId) {
		var ret int64
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetFolderIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *PublicEmail) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given int64 and assigns it to the FolderId field.
func (o *PublicEmail) SetFolderId(v int64) {
	o.FolderId = &v
}

// GetSubscriptionDetails returns the SubscriptionDetails field value if set, zero value otherwise.
func (o *PublicEmail) GetSubscriptionDetails() PublicEmailSubscriptionDetails {
	if o == nil || IsNil(o.SubscriptionDetails) {
		var ret PublicEmailSubscriptionDetails
		return ret
	}
	return *o.SubscriptionDetails
}

// GetSubscriptionDetailsOk returns a tuple with the SubscriptionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetSubscriptionDetailsOk() (*PublicEmailSubscriptionDetails, bool) {
	if o == nil || IsNil(o.SubscriptionDetails) {
		return nil, false
	}
	return o.SubscriptionDetails, true
}

// HasSubscriptionDetails returns a boolean if a field has been set.
func (o *PublicEmail) HasSubscriptionDetails() bool {
	if o != nil && !IsNil(o.SubscriptionDetails) {
		return true
	}

	return false
}

// SetSubscriptionDetails gets a reference to the given PublicEmailSubscriptionDetails and assigns it to the SubscriptionDetails field.
func (o *PublicEmail) SetSubscriptionDetails(v PublicEmailSubscriptionDetails) {
	o.SubscriptionDetails = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *PublicEmail) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *PublicEmail) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *PublicEmail) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PublicEmail) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PublicEmail) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PublicEmail) SetName(v string) {
	o.Name = &v
}

// GetActiveDomain returns the ActiveDomain field value if set, zero value otherwise.
func (o *PublicEmail) GetActiveDomain() string {
	if o == nil || IsNil(o.ActiveDomain) {
		var ret string
		return ret
	}
	return *o.ActiveDomain
}

// GetActiveDomainOk returns a tuple with the ActiveDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetActiveDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveDomain) {
		return nil, false
	}
	return o.ActiveDomain, true
}

// HasActiveDomain returns a boolean if a field has been set.
func (o *PublicEmail) HasActiveDomain() bool {
	if o != nil && !IsNil(o.ActiveDomain) {
		return true
	}

	return false
}

// SetActiveDomain gets a reference to the given string and assigns it to the ActiveDomain field.
func (o *PublicEmail) SetActiveDomain(v string) {
	o.ActiveDomain = &v
}

// GetCampaign returns the Campaign field value if set, zero value otherwise.
func (o *PublicEmail) GetCampaign() string {
	if o == nil || IsNil(o.Campaign) {
		var ret string
		return ret
	}
	return *o.Campaign
}

// GetCampaignOk returns a tuple with the Campaign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetCampaignOk() (*string, bool) {
	if o == nil || IsNil(o.Campaign) {
		return nil, false
	}
	return o.Campaign, true
}

// HasCampaign returns a boolean if a field has been set.
func (o *PublicEmail) HasCampaign() bool {
	if o != nil && !IsNil(o.Campaign) {
		return true
	}

	return false
}

// SetCampaign gets a reference to the given string and assigns it to the Campaign field.
func (o *PublicEmail) SetCampaign(v string) {
	o.Campaign = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *PublicEmail) GetTo() PublicEmailToDetails {
	if o == nil || IsNil(o.To) {
		var ret PublicEmailToDetails
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetToOk() (*PublicEmailToDetails, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *PublicEmail) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given PublicEmailToDetails and assigns it to the To field.
func (o *PublicEmail) SetTo(v PublicEmailToDetails) {
	o.To = &v
}

// GetSubcategory returns the Subcategory field value if set, zero value otherwise.
func (o *PublicEmail) GetSubcategory() string {
	if o == nil || IsNil(o.Subcategory) {
		var ret string
		return ret
	}
	return *o.Subcategory
}

// GetSubcategoryOk returns a tuple with the Subcategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetSubcategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Subcategory) {
		return nil, false
	}
	return o.Subcategory, true
}

// HasSubcategory returns a boolean if a field has been set.
func (o *PublicEmail) HasSubcategory() bool {
	if o != nil && !IsNil(o.Subcategory) {
		return true
	}

	return false
}

// SetSubcategory gets a reference to the given string and assigns it to the Subcategory field.
func (o *PublicEmail) SetSubcategory(v string) {
	o.Subcategory = &v
}

// GetSendOnPublish returns the SendOnPublish field value if set, zero value otherwise.
func (o *PublicEmail) GetSendOnPublish() bool {
	if o == nil || IsNil(o.SendOnPublish) {
		var ret bool
		return ret
	}
	return *o.SendOnPublish
}

// GetSendOnPublishOk returns a tuple with the SendOnPublish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetSendOnPublishOk() (*bool, bool) {
	if o == nil || IsNil(o.SendOnPublish) {
		return nil, false
	}
	return o.SendOnPublish, true
}

// HasSendOnPublish returns a boolean if a field has been set.
func (o *PublicEmail) HasSendOnPublish() bool {
	if o != nil && !IsNil(o.SendOnPublish) {
		return true
	}

	return false
}

// SetSendOnPublish gets a reference to the given bool and assigns it to the SendOnPublish field.
func (o *PublicEmail) SetSendOnPublish(v bool) {
	o.SendOnPublish = &v
}

func (o PublicEmail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicEmail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeedbackSurveyId) {
		toSerialize["feedbackSurveyId"] = o.FeedbackSurveyId
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.PublishDate) {
		toSerialize["publishDate"] = o.PublishDate
	}
	if !IsNil(o.IsTransactional) {
		toSerialize["isTransactional"] = o.IsTransactional
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.BusinessUnitId) {
		toSerialize["businessUnitId"] = o.BusinessUnitId
	}
	if !IsNil(o.Webversion) {
		toSerialize["webversion"] = o.Webversion
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.CreatedById) {
		toSerialize["createdById"] = o.CreatedById
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.RssData) {
		toSerialize["rssData"] = o.RssData
	}
	if !IsNil(o.PublishedAt) {
		toSerialize["publishedAt"] = o.PublishedAt
	}
	if !IsNil(o.PublishedById) {
		toSerialize["publishedById"] = o.PublishedById
	}
	if !IsNil(o.IsPublished) {
		toSerialize["isPublished"] = o.IsPublished
	}
	if !IsNil(o.Testing) {
		toSerialize["testing"] = o.Testing
	}
	if !IsNil(o.UpdatedById) {
		toSerialize["updatedById"] = o.UpdatedById
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !IsNil(o.SubscriptionDetails) {
		toSerialize["subscriptionDetails"] = o.SubscriptionDetails
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ActiveDomain) {
		toSerialize["activeDomain"] = o.ActiveDomain
	}
	if !IsNil(o.Campaign) {
		toSerialize["campaign"] = o.Campaign
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Subcategory) {
		toSerialize["subcategory"] = o.Subcategory
	}
	if !IsNil(o.SendOnPublish) {
		toSerialize["sendOnPublish"] = o.SendOnPublish
	}
	return toSerialize, nil
}

type NullablePublicEmail struct {
	value *PublicEmail
	isSet bool
}

func (v NullablePublicEmail) Get() *PublicEmail {
	return v.value
}

func (v *NullablePublicEmail) Set(val *PublicEmail) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicEmail) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicEmail(val *PublicEmail) *NullablePublicEmail {
	return &NullablePublicEmail{value: val, isSet: true}
}

func (v NullablePublicEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


