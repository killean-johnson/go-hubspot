/*
CRM Exports

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package exports

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicCrmSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicCrmSearchRequest{}

// PublicCrmSearchRequest struct for PublicCrmSearchRequest
type PublicCrmSearchRequest struct {
	Query string `json:"query"`
	Filters []Filter `json:"filters"`
	Sorts []string `json:"sorts"`
}

type _PublicCrmSearchRequest PublicCrmSearchRequest

// NewPublicCrmSearchRequest instantiates a new PublicCrmSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicCrmSearchRequest(query string, filters []Filter, sorts []string) *PublicCrmSearchRequest {
	this := PublicCrmSearchRequest{}
	this.Query = query
	this.Filters = filters
	this.Sorts = sorts
	return &this
}

// NewPublicCrmSearchRequestWithDefaults instantiates a new PublicCrmSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicCrmSearchRequestWithDefaults() *PublicCrmSearchRequest {
	this := PublicCrmSearchRequest{}
	return &this
}

// GetQuery returns the Query field value
func (o *PublicCrmSearchRequest) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *PublicCrmSearchRequest) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *PublicCrmSearchRequest) SetQuery(v string) {
	o.Query = v
}

// GetFilters returns the Filters field value
func (o *PublicCrmSearchRequest) GetFilters() []Filter {
	if o == nil {
		var ret []Filter
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *PublicCrmSearchRequest) GetFiltersOk() ([]Filter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *PublicCrmSearchRequest) SetFilters(v []Filter) {
	o.Filters = v
}

// GetSorts returns the Sorts field value
func (o *PublicCrmSearchRequest) GetSorts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Sorts
}

// GetSortsOk returns a tuple with the Sorts field value
// and a boolean to check if the value has been set.
func (o *PublicCrmSearchRequest) GetSortsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sorts, true
}

// SetSorts sets field value
func (o *PublicCrmSearchRequest) SetSorts(v []string) {
	o.Sorts = v
}

func (o PublicCrmSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicCrmSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query
	toSerialize["filters"] = o.Filters
	toSerialize["sorts"] = o.Sorts
	return toSerialize, nil
}

func (o *PublicCrmSearchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query",
		"filters",
		"sorts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicCrmSearchRequest := _PublicCrmSearchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicCrmSearchRequest)

	if err != nil {
		return err
	}

	*o = PublicCrmSearchRequest(varPublicCrmSearchRequest)

	return err
}

type NullablePublicCrmSearchRequest struct {
	value *PublicCrmSearchRequest
	isSet bool
}

func (v NullablePublicCrmSearchRequest) Get() *PublicCrmSearchRequest {
	return v.value
}

func (v *NullablePublicCrmSearchRequest) Set(val *PublicCrmSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicCrmSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicCrmSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicCrmSearchRequest(val *PublicCrmSearchRequest) *NullablePublicCrmSearchRequest {
	return &NullablePublicCrmSearchRequest{value: val, isSet: true}
}

func (v NullablePublicCrmSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicCrmSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


