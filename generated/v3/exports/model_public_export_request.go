/*
CRM Exports

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package exports

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PublicExportRequest - struct for PublicExportRequest
type PublicExportRequest struct {
	PublicExportListRequest *PublicExportListRequest
	PublicExportViewRequest *PublicExportViewRequest
}

// PublicExportListRequestAsPublicExportRequest is a convenience function that returns PublicExportListRequest wrapped in PublicExportRequest
func PublicExportListRequestAsPublicExportRequest(v *PublicExportListRequest) PublicExportRequest {
	return PublicExportRequest{
		PublicExportListRequest: v,
	}
}

// PublicExportViewRequestAsPublicExportRequest is a convenience function that returns PublicExportViewRequest wrapped in PublicExportRequest
func PublicExportViewRequestAsPublicExportRequest(v *PublicExportViewRequest) PublicExportRequest {
	return PublicExportRequest{
		PublicExportViewRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PublicExportRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PublicExportListRequest
	err = newStrictDecoder(data).Decode(&dst.PublicExportListRequest)
	if err == nil {
		jsonPublicExportListRequest, _ := json.Marshal(dst.PublicExportListRequest)
		if string(jsonPublicExportListRequest) == "{}" { // empty struct
			dst.PublicExportListRequest = nil
		} else {
			if err = validator.Validate(dst.PublicExportListRequest); err != nil {
				dst.PublicExportListRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicExportListRequest = nil
	}

	// try to unmarshal data into PublicExportViewRequest
	err = newStrictDecoder(data).Decode(&dst.PublicExportViewRequest)
	if err == nil {
		jsonPublicExportViewRequest, _ := json.Marshal(dst.PublicExportViewRequest)
		if string(jsonPublicExportViewRequest) == "{}" { // empty struct
			dst.PublicExportViewRequest = nil
		} else {
			if err = validator.Validate(dst.PublicExportViewRequest); err != nil {
				dst.PublicExportViewRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicExportViewRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PublicExportListRequest = nil
		dst.PublicExportViewRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PublicExportRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PublicExportRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PublicExportRequest) MarshalJSON() ([]byte, error) {
	if src.PublicExportListRequest != nil {
		return json.Marshal(&src.PublicExportListRequest)
	}

	if src.PublicExportViewRequest != nil {
		return json.Marshal(&src.PublicExportViewRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PublicExportRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PublicExportListRequest != nil {
		return obj.PublicExportListRequest
	}

	if obj.PublicExportViewRequest != nil {
		return obj.PublicExportViewRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PublicExportRequest) GetActualInstanceValue() (interface{}) {
	if obj.PublicExportListRequest != nil {
		return *obj.PublicExportListRequest
	}

	if obj.PublicExportViewRequest != nil {
		return *obj.PublicExportViewRequest
	}

	// all schemas are nil
	return nil
}

type NullablePublicExportRequest struct {
	value *PublicExportRequest
	isSet bool
}

func (v NullablePublicExportRequest) Get() *PublicExportRequest {
	return v.value
}

func (v *NullablePublicExportRequest) Set(val *PublicExportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicExportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicExportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicExportRequest(val *PublicExportRequest) *NullablePublicExportRequest {
	return &NullablePublicExportRequest{value: val, isSet: true}
}

func (v NullablePublicExportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicExportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


