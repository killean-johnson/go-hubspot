/*
Lists

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PublicSurveyMonkeyValueFilterValueComparison - struct for PublicSurveyMonkeyValueFilterValueComparison
type PublicSurveyMonkeyValueFilterValueComparison struct {
	PublicAllPropertyTypesOperation *PublicAllPropertyTypesOperation
	PublicBoolPropertyOperation *PublicBoolPropertyOperation
	PublicCalendarDatePropertyOperation *PublicCalendarDatePropertyOperation
	PublicComparativeDatePropertyOperation *PublicComparativeDatePropertyOperation
	PublicComparativePropertyUpdatedOperation *PublicComparativePropertyUpdatedOperation
	PublicDatePropertyOperation *PublicDatePropertyOperation
	PublicDateTimePropertyOperation *PublicDateTimePropertyOperation
	PublicEnumerationPropertyOperation *PublicEnumerationPropertyOperation
	PublicMultiStringPropertyOperation *PublicMultiStringPropertyOperation
	PublicNumberPropertyOperation *PublicNumberPropertyOperation
	PublicRangedDatePropertyOperation *PublicRangedDatePropertyOperation
	PublicRangedNumberPropertyOperation *PublicRangedNumberPropertyOperation
	PublicRangedTimeOperation *PublicRangedTimeOperation
	PublicRollingDateRangePropertyOperation *PublicRollingDateRangePropertyOperation
	PublicRollingPropertyUpdatedOperation *PublicRollingPropertyUpdatedOperation
	PublicStringPropertyOperation *PublicStringPropertyOperation
	PublicTimePointOperation *PublicTimePointOperation
}

// PublicAllPropertyTypesOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicAllPropertyTypesOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicAllPropertyTypesOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicAllPropertyTypesOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicAllPropertyTypesOperation: v,
	}
}

// PublicBoolPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicBoolPropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicBoolPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicBoolPropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicBoolPropertyOperation: v,
	}
}

// PublicCalendarDatePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicCalendarDatePropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicCalendarDatePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicCalendarDatePropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicCalendarDatePropertyOperation: v,
	}
}

// PublicComparativeDatePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicComparativeDatePropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicComparativeDatePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicComparativeDatePropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicComparativeDatePropertyOperation: v,
	}
}

// PublicComparativePropertyUpdatedOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicComparativePropertyUpdatedOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicComparativePropertyUpdatedOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicComparativePropertyUpdatedOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicComparativePropertyUpdatedOperation: v,
	}
}

// PublicDatePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicDatePropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicDatePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicDatePropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicDatePropertyOperation: v,
	}
}

// PublicDateTimePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicDateTimePropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicDateTimePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicDateTimePropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicDateTimePropertyOperation: v,
	}
}

// PublicEnumerationPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicEnumerationPropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicEnumerationPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicEnumerationPropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicEnumerationPropertyOperation: v,
	}
}

// PublicMultiStringPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicMultiStringPropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicMultiStringPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicMultiStringPropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicMultiStringPropertyOperation: v,
	}
}

// PublicNumberPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicNumberPropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicNumberPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicNumberPropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicNumberPropertyOperation: v,
	}
}

// PublicRangedDatePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicRangedDatePropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicRangedDatePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicRangedDatePropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicRangedDatePropertyOperation: v,
	}
}

// PublicRangedNumberPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicRangedNumberPropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicRangedNumberPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicRangedNumberPropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicRangedNumberPropertyOperation: v,
	}
}

// PublicRangedTimeOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicRangedTimeOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicRangedTimeOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicRangedTimeOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicRangedTimeOperation: v,
	}
}

// PublicRollingDateRangePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicRollingDateRangePropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicRollingDateRangePropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicRollingDateRangePropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicRollingDateRangePropertyOperation: v,
	}
}

// PublicRollingPropertyUpdatedOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicRollingPropertyUpdatedOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicRollingPropertyUpdatedOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicRollingPropertyUpdatedOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicRollingPropertyUpdatedOperation: v,
	}
}

// PublicStringPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicStringPropertyOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicStringPropertyOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicStringPropertyOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicStringPropertyOperation: v,
	}
}

// PublicTimePointOperationAsPublicSurveyMonkeyValueFilterValueComparison is a convenience function that returns PublicTimePointOperation wrapped in PublicSurveyMonkeyValueFilterValueComparison
func PublicTimePointOperationAsPublicSurveyMonkeyValueFilterValueComparison(v *PublicTimePointOperation) PublicSurveyMonkeyValueFilterValueComparison {
	return PublicSurveyMonkeyValueFilterValueComparison{
		PublicTimePointOperation: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PublicSurveyMonkeyValueFilterValueComparison) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PublicAllPropertyTypesOperation
	err = newStrictDecoder(data).Decode(&dst.PublicAllPropertyTypesOperation)
	if err == nil {
		jsonPublicAllPropertyTypesOperation, _ := json.Marshal(dst.PublicAllPropertyTypesOperation)
		if string(jsonPublicAllPropertyTypesOperation) == "{}" { // empty struct
			dst.PublicAllPropertyTypesOperation = nil
		} else {
			if err = validator.Validate(dst.PublicAllPropertyTypesOperation); err != nil {
				dst.PublicAllPropertyTypesOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicAllPropertyTypesOperation = nil
	}

	// try to unmarshal data into PublicBoolPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicBoolPropertyOperation)
	if err == nil {
		jsonPublicBoolPropertyOperation, _ := json.Marshal(dst.PublicBoolPropertyOperation)
		if string(jsonPublicBoolPropertyOperation) == "{}" { // empty struct
			dst.PublicBoolPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicBoolPropertyOperation); err != nil {
				dst.PublicBoolPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicBoolPropertyOperation = nil
	}

	// try to unmarshal data into PublicCalendarDatePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicCalendarDatePropertyOperation)
	if err == nil {
		jsonPublicCalendarDatePropertyOperation, _ := json.Marshal(dst.PublicCalendarDatePropertyOperation)
		if string(jsonPublicCalendarDatePropertyOperation) == "{}" { // empty struct
			dst.PublicCalendarDatePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicCalendarDatePropertyOperation); err != nil {
				dst.PublicCalendarDatePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicCalendarDatePropertyOperation = nil
	}

	// try to unmarshal data into PublicComparativeDatePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicComparativeDatePropertyOperation)
	if err == nil {
		jsonPublicComparativeDatePropertyOperation, _ := json.Marshal(dst.PublicComparativeDatePropertyOperation)
		if string(jsonPublicComparativeDatePropertyOperation) == "{}" { // empty struct
			dst.PublicComparativeDatePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicComparativeDatePropertyOperation); err != nil {
				dst.PublicComparativeDatePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicComparativeDatePropertyOperation = nil
	}

	// try to unmarshal data into PublicComparativePropertyUpdatedOperation
	err = newStrictDecoder(data).Decode(&dst.PublicComparativePropertyUpdatedOperation)
	if err == nil {
		jsonPublicComparativePropertyUpdatedOperation, _ := json.Marshal(dst.PublicComparativePropertyUpdatedOperation)
		if string(jsonPublicComparativePropertyUpdatedOperation) == "{}" { // empty struct
			dst.PublicComparativePropertyUpdatedOperation = nil
		} else {
			if err = validator.Validate(dst.PublicComparativePropertyUpdatedOperation); err != nil {
				dst.PublicComparativePropertyUpdatedOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicComparativePropertyUpdatedOperation = nil
	}

	// try to unmarshal data into PublicDatePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicDatePropertyOperation)
	if err == nil {
		jsonPublicDatePropertyOperation, _ := json.Marshal(dst.PublicDatePropertyOperation)
		if string(jsonPublicDatePropertyOperation) == "{}" { // empty struct
			dst.PublicDatePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicDatePropertyOperation); err != nil {
				dst.PublicDatePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicDatePropertyOperation = nil
	}

	// try to unmarshal data into PublicDateTimePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicDateTimePropertyOperation)
	if err == nil {
		jsonPublicDateTimePropertyOperation, _ := json.Marshal(dst.PublicDateTimePropertyOperation)
		if string(jsonPublicDateTimePropertyOperation) == "{}" { // empty struct
			dst.PublicDateTimePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicDateTimePropertyOperation); err != nil {
				dst.PublicDateTimePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicDateTimePropertyOperation = nil
	}

	// try to unmarshal data into PublicEnumerationPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicEnumerationPropertyOperation)
	if err == nil {
		jsonPublicEnumerationPropertyOperation, _ := json.Marshal(dst.PublicEnumerationPropertyOperation)
		if string(jsonPublicEnumerationPropertyOperation) == "{}" { // empty struct
			dst.PublicEnumerationPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicEnumerationPropertyOperation); err != nil {
				dst.PublicEnumerationPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicEnumerationPropertyOperation = nil
	}

	// try to unmarshal data into PublicMultiStringPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicMultiStringPropertyOperation)
	if err == nil {
		jsonPublicMultiStringPropertyOperation, _ := json.Marshal(dst.PublicMultiStringPropertyOperation)
		if string(jsonPublicMultiStringPropertyOperation) == "{}" { // empty struct
			dst.PublicMultiStringPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicMultiStringPropertyOperation); err != nil {
				dst.PublicMultiStringPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicMultiStringPropertyOperation = nil
	}

	// try to unmarshal data into PublicNumberPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicNumberPropertyOperation)
	if err == nil {
		jsonPublicNumberPropertyOperation, _ := json.Marshal(dst.PublicNumberPropertyOperation)
		if string(jsonPublicNumberPropertyOperation) == "{}" { // empty struct
			dst.PublicNumberPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicNumberPropertyOperation); err != nil {
				dst.PublicNumberPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicNumberPropertyOperation = nil
	}

	// try to unmarshal data into PublicRangedDatePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicRangedDatePropertyOperation)
	if err == nil {
		jsonPublicRangedDatePropertyOperation, _ := json.Marshal(dst.PublicRangedDatePropertyOperation)
		if string(jsonPublicRangedDatePropertyOperation) == "{}" { // empty struct
			dst.PublicRangedDatePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicRangedDatePropertyOperation); err != nil {
				dst.PublicRangedDatePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicRangedDatePropertyOperation = nil
	}

	// try to unmarshal data into PublicRangedNumberPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicRangedNumberPropertyOperation)
	if err == nil {
		jsonPublicRangedNumberPropertyOperation, _ := json.Marshal(dst.PublicRangedNumberPropertyOperation)
		if string(jsonPublicRangedNumberPropertyOperation) == "{}" { // empty struct
			dst.PublicRangedNumberPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicRangedNumberPropertyOperation); err != nil {
				dst.PublicRangedNumberPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicRangedNumberPropertyOperation = nil
	}

	// try to unmarshal data into PublicRangedTimeOperation
	err = newStrictDecoder(data).Decode(&dst.PublicRangedTimeOperation)
	if err == nil {
		jsonPublicRangedTimeOperation, _ := json.Marshal(dst.PublicRangedTimeOperation)
		if string(jsonPublicRangedTimeOperation) == "{}" { // empty struct
			dst.PublicRangedTimeOperation = nil
		} else {
			if err = validator.Validate(dst.PublicRangedTimeOperation); err != nil {
				dst.PublicRangedTimeOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicRangedTimeOperation = nil
	}

	// try to unmarshal data into PublicRollingDateRangePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicRollingDateRangePropertyOperation)
	if err == nil {
		jsonPublicRollingDateRangePropertyOperation, _ := json.Marshal(dst.PublicRollingDateRangePropertyOperation)
		if string(jsonPublicRollingDateRangePropertyOperation) == "{}" { // empty struct
			dst.PublicRollingDateRangePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicRollingDateRangePropertyOperation); err != nil {
				dst.PublicRollingDateRangePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicRollingDateRangePropertyOperation = nil
	}

	// try to unmarshal data into PublicRollingPropertyUpdatedOperation
	err = newStrictDecoder(data).Decode(&dst.PublicRollingPropertyUpdatedOperation)
	if err == nil {
		jsonPublicRollingPropertyUpdatedOperation, _ := json.Marshal(dst.PublicRollingPropertyUpdatedOperation)
		if string(jsonPublicRollingPropertyUpdatedOperation) == "{}" { // empty struct
			dst.PublicRollingPropertyUpdatedOperation = nil
		} else {
			if err = validator.Validate(dst.PublicRollingPropertyUpdatedOperation); err != nil {
				dst.PublicRollingPropertyUpdatedOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicRollingPropertyUpdatedOperation = nil
	}

	// try to unmarshal data into PublicStringPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.PublicStringPropertyOperation)
	if err == nil {
		jsonPublicStringPropertyOperation, _ := json.Marshal(dst.PublicStringPropertyOperation)
		if string(jsonPublicStringPropertyOperation) == "{}" { // empty struct
			dst.PublicStringPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.PublicStringPropertyOperation); err != nil {
				dst.PublicStringPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicStringPropertyOperation = nil
	}

	// try to unmarshal data into PublicTimePointOperation
	err = newStrictDecoder(data).Decode(&dst.PublicTimePointOperation)
	if err == nil {
		jsonPublicTimePointOperation, _ := json.Marshal(dst.PublicTimePointOperation)
		if string(jsonPublicTimePointOperation) == "{}" { // empty struct
			dst.PublicTimePointOperation = nil
		} else {
			if err = validator.Validate(dst.PublicTimePointOperation); err != nil {
				dst.PublicTimePointOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicTimePointOperation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PublicAllPropertyTypesOperation = nil
		dst.PublicBoolPropertyOperation = nil
		dst.PublicCalendarDatePropertyOperation = nil
		dst.PublicComparativeDatePropertyOperation = nil
		dst.PublicComparativePropertyUpdatedOperation = nil
		dst.PublicDatePropertyOperation = nil
		dst.PublicDateTimePropertyOperation = nil
		dst.PublicEnumerationPropertyOperation = nil
		dst.PublicMultiStringPropertyOperation = nil
		dst.PublicNumberPropertyOperation = nil
		dst.PublicRangedDatePropertyOperation = nil
		dst.PublicRangedNumberPropertyOperation = nil
		dst.PublicRangedTimeOperation = nil
		dst.PublicRollingDateRangePropertyOperation = nil
		dst.PublicRollingPropertyUpdatedOperation = nil
		dst.PublicStringPropertyOperation = nil
		dst.PublicTimePointOperation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PublicSurveyMonkeyValueFilterValueComparison)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PublicSurveyMonkeyValueFilterValueComparison)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PublicSurveyMonkeyValueFilterValueComparison) MarshalJSON() ([]byte, error) {
	if src.PublicAllPropertyTypesOperation != nil {
		return json.Marshal(&src.PublicAllPropertyTypesOperation)
	}

	if src.PublicBoolPropertyOperation != nil {
		return json.Marshal(&src.PublicBoolPropertyOperation)
	}

	if src.PublicCalendarDatePropertyOperation != nil {
		return json.Marshal(&src.PublicCalendarDatePropertyOperation)
	}

	if src.PublicComparativeDatePropertyOperation != nil {
		return json.Marshal(&src.PublicComparativeDatePropertyOperation)
	}

	if src.PublicComparativePropertyUpdatedOperation != nil {
		return json.Marshal(&src.PublicComparativePropertyUpdatedOperation)
	}

	if src.PublicDatePropertyOperation != nil {
		return json.Marshal(&src.PublicDatePropertyOperation)
	}

	if src.PublicDateTimePropertyOperation != nil {
		return json.Marshal(&src.PublicDateTimePropertyOperation)
	}

	if src.PublicEnumerationPropertyOperation != nil {
		return json.Marshal(&src.PublicEnumerationPropertyOperation)
	}

	if src.PublicMultiStringPropertyOperation != nil {
		return json.Marshal(&src.PublicMultiStringPropertyOperation)
	}

	if src.PublicNumberPropertyOperation != nil {
		return json.Marshal(&src.PublicNumberPropertyOperation)
	}

	if src.PublicRangedDatePropertyOperation != nil {
		return json.Marshal(&src.PublicRangedDatePropertyOperation)
	}

	if src.PublicRangedNumberPropertyOperation != nil {
		return json.Marshal(&src.PublicRangedNumberPropertyOperation)
	}

	if src.PublicRangedTimeOperation != nil {
		return json.Marshal(&src.PublicRangedTimeOperation)
	}

	if src.PublicRollingDateRangePropertyOperation != nil {
		return json.Marshal(&src.PublicRollingDateRangePropertyOperation)
	}

	if src.PublicRollingPropertyUpdatedOperation != nil {
		return json.Marshal(&src.PublicRollingPropertyUpdatedOperation)
	}

	if src.PublicStringPropertyOperation != nil {
		return json.Marshal(&src.PublicStringPropertyOperation)
	}

	if src.PublicTimePointOperation != nil {
		return json.Marshal(&src.PublicTimePointOperation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PublicSurveyMonkeyValueFilterValueComparison) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PublicAllPropertyTypesOperation != nil {
		return obj.PublicAllPropertyTypesOperation
	}

	if obj.PublicBoolPropertyOperation != nil {
		return obj.PublicBoolPropertyOperation
	}

	if obj.PublicCalendarDatePropertyOperation != nil {
		return obj.PublicCalendarDatePropertyOperation
	}

	if obj.PublicComparativeDatePropertyOperation != nil {
		return obj.PublicComparativeDatePropertyOperation
	}

	if obj.PublicComparativePropertyUpdatedOperation != nil {
		return obj.PublicComparativePropertyUpdatedOperation
	}

	if obj.PublicDatePropertyOperation != nil {
		return obj.PublicDatePropertyOperation
	}

	if obj.PublicDateTimePropertyOperation != nil {
		return obj.PublicDateTimePropertyOperation
	}

	if obj.PublicEnumerationPropertyOperation != nil {
		return obj.PublicEnumerationPropertyOperation
	}

	if obj.PublicMultiStringPropertyOperation != nil {
		return obj.PublicMultiStringPropertyOperation
	}

	if obj.PublicNumberPropertyOperation != nil {
		return obj.PublicNumberPropertyOperation
	}

	if obj.PublicRangedDatePropertyOperation != nil {
		return obj.PublicRangedDatePropertyOperation
	}

	if obj.PublicRangedNumberPropertyOperation != nil {
		return obj.PublicRangedNumberPropertyOperation
	}

	if obj.PublicRangedTimeOperation != nil {
		return obj.PublicRangedTimeOperation
	}

	if obj.PublicRollingDateRangePropertyOperation != nil {
		return obj.PublicRollingDateRangePropertyOperation
	}

	if obj.PublicRollingPropertyUpdatedOperation != nil {
		return obj.PublicRollingPropertyUpdatedOperation
	}

	if obj.PublicStringPropertyOperation != nil {
		return obj.PublicStringPropertyOperation
	}

	if obj.PublicTimePointOperation != nil {
		return obj.PublicTimePointOperation
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PublicSurveyMonkeyValueFilterValueComparison) GetActualInstanceValue() (interface{}) {
	if obj.PublicAllPropertyTypesOperation != nil {
		return *obj.PublicAllPropertyTypesOperation
	}

	if obj.PublicBoolPropertyOperation != nil {
		return *obj.PublicBoolPropertyOperation
	}

	if obj.PublicCalendarDatePropertyOperation != nil {
		return *obj.PublicCalendarDatePropertyOperation
	}

	if obj.PublicComparativeDatePropertyOperation != nil {
		return *obj.PublicComparativeDatePropertyOperation
	}

	if obj.PublicComparativePropertyUpdatedOperation != nil {
		return *obj.PublicComparativePropertyUpdatedOperation
	}

	if obj.PublicDatePropertyOperation != nil {
		return *obj.PublicDatePropertyOperation
	}

	if obj.PublicDateTimePropertyOperation != nil {
		return *obj.PublicDateTimePropertyOperation
	}

	if obj.PublicEnumerationPropertyOperation != nil {
		return *obj.PublicEnumerationPropertyOperation
	}

	if obj.PublicMultiStringPropertyOperation != nil {
		return *obj.PublicMultiStringPropertyOperation
	}

	if obj.PublicNumberPropertyOperation != nil {
		return *obj.PublicNumberPropertyOperation
	}

	if obj.PublicRangedDatePropertyOperation != nil {
		return *obj.PublicRangedDatePropertyOperation
	}

	if obj.PublicRangedNumberPropertyOperation != nil {
		return *obj.PublicRangedNumberPropertyOperation
	}

	if obj.PublicRangedTimeOperation != nil {
		return *obj.PublicRangedTimeOperation
	}

	if obj.PublicRollingDateRangePropertyOperation != nil {
		return *obj.PublicRollingDateRangePropertyOperation
	}

	if obj.PublicRollingPropertyUpdatedOperation != nil {
		return *obj.PublicRollingPropertyUpdatedOperation
	}

	if obj.PublicStringPropertyOperation != nil {
		return *obj.PublicStringPropertyOperation
	}

	if obj.PublicTimePointOperation != nil {
		return *obj.PublicTimePointOperation
	}

	// all schemas are nil
	return nil
}

type NullablePublicSurveyMonkeyValueFilterValueComparison struct {
	value *PublicSurveyMonkeyValueFilterValueComparison
	isSet bool
}

func (v NullablePublicSurveyMonkeyValueFilterValueComparison) Get() *PublicSurveyMonkeyValueFilterValueComparison {
	return v.value
}

func (v *NullablePublicSurveyMonkeyValueFilterValueComparison) Set(val *PublicSurveyMonkeyValueFilterValueComparison) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicSurveyMonkeyValueFilterValueComparison) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicSurveyMonkeyValueFilterValueComparison) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicSurveyMonkeyValueFilterValueComparison(val *PublicSurveyMonkeyValueFilterValueComparison) *NullablePublicSurveyMonkeyValueFilterValueComparison {
	return &NullablePublicSurveyMonkeyValueFilterValueComparison{value: val, isSet: true}
}

func (v NullablePublicSurveyMonkeyValueFilterValueComparison) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicSurveyMonkeyValueFilterValueComparison) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


