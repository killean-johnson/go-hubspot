/*
Lists

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the JoinTimeAndRecordId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JoinTimeAndRecordId{}

// JoinTimeAndRecordId struct for JoinTimeAndRecordId
type JoinTimeAndRecordId struct {
	RecordId string `json:"recordId"`
	MembershipTimestamp time.Time `json:"membershipTimestamp"`
}

type _JoinTimeAndRecordId JoinTimeAndRecordId

// NewJoinTimeAndRecordId instantiates a new JoinTimeAndRecordId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJoinTimeAndRecordId(recordId string, membershipTimestamp time.Time) *JoinTimeAndRecordId {
	this := JoinTimeAndRecordId{}
	this.RecordId = recordId
	this.MembershipTimestamp = membershipTimestamp
	return &this
}

// NewJoinTimeAndRecordIdWithDefaults instantiates a new JoinTimeAndRecordId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJoinTimeAndRecordIdWithDefaults() *JoinTimeAndRecordId {
	this := JoinTimeAndRecordId{}
	return &this
}

// GetRecordId returns the RecordId field value
func (o *JoinTimeAndRecordId) GetRecordId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordId
}

// GetRecordIdOk returns a tuple with the RecordId field value
// and a boolean to check if the value has been set.
func (o *JoinTimeAndRecordId) GetRecordIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordId, true
}

// SetRecordId sets field value
func (o *JoinTimeAndRecordId) SetRecordId(v string) {
	o.RecordId = v
}

// GetMembershipTimestamp returns the MembershipTimestamp field value
func (o *JoinTimeAndRecordId) GetMembershipTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.MembershipTimestamp
}

// GetMembershipTimestampOk returns a tuple with the MembershipTimestamp field value
// and a boolean to check if the value has been set.
func (o *JoinTimeAndRecordId) GetMembershipTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MembershipTimestamp, true
}

// SetMembershipTimestamp sets field value
func (o *JoinTimeAndRecordId) SetMembershipTimestamp(v time.Time) {
	o.MembershipTimestamp = v
}

func (o JoinTimeAndRecordId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JoinTimeAndRecordId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recordId"] = o.RecordId
	toSerialize["membershipTimestamp"] = o.MembershipTimestamp
	return toSerialize, nil
}

func (o *JoinTimeAndRecordId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recordId",
		"membershipTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJoinTimeAndRecordId := _JoinTimeAndRecordId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJoinTimeAndRecordId)

	if err != nil {
		return err
	}

	*o = JoinTimeAndRecordId(varJoinTimeAndRecordId)

	return err
}

type NullableJoinTimeAndRecordId struct {
	value *JoinTimeAndRecordId
	isSet bool
}

func (v NullableJoinTimeAndRecordId) Get() *JoinTimeAndRecordId {
	return v.value
}

func (v *NullableJoinTimeAndRecordId) Set(val *JoinTimeAndRecordId) {
	v.value = val
	v.isSet = true
}

func (v NullableJoinTimeAndRecordId) IsSet() bool {
	return v.isSet
}

func (v *NullableJoinTimeAndRecordId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJoinTimeAndRecordId(val *JoinTimeAndRecordId) *NullableJoinTimeAndRecordId {
	return &NullableJoinTimeAndRecordId{value: val, isSet: true}
}

func (v NullableJoinTimeAndRecordId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJoinTimeAndRecordId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


