/*
Lists

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublicListFolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicListFolder{}

// PublicListFolder struct for PublicListFolder
type PublicListFolder struct {
	// The time the folder was created at.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The Id of the folder this folder is in, the root folder is represented as 0.
	ParentFolderId int32 `json:"parentFolderId"`
	ChildNodes []PublicListFolder `json:"childNodes"`
	// The name of the folder.
	Name *string `json:"name,omitempty"`
	// The Id of the folder.
	Id int32 `json:"id"`
	// An array of list Id's contained in this folder.
	ChildLists []int32 `json:"childLists"`
	// The time that the contents of the folder was last updated at.
	UpdatedContentsAt *time.Time `json:"updatedContentsAt,omitempty"`
	// The user Id of the owner of the folder.
	UserId *int32 `json:"userId,omitempty"`
	// The time the folder was last updated at.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type _PublicListFolder PublicListFolder

// NewPublicListFolder instantiates a new PublicListFolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicListFolder(parentFolderId int32, childNodes []PublicListFolder, id int32, childLists []int32) *PublicListFolder {
	this := PublicListFolder{}
	this.ParentFolderId = parentFolderId
	this.ChildNodes = childNodes
	this.Id = id
	this.ChildLists = childLists
	return &this
}

// NewPublicListFolderWithDefaults instantiates a new PublicListFolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicListFolderWithDefaults() *PublicListFolder {
	this := PublicListFolder{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PublicListFolder) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicListFolder) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PublicListFolder) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PublicListFolder) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetParentFolderId returns the ParentFolderId field value
func (o *PublicListFolder) GetParentFolderId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value
// and a boolean to check if the value has been set.
func (o *PublicListFolder) GetParentFolderIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentFolderId, true
}

// SetParentFolderId sets field value
func (o *PublicListFolder) SetParentFolderId(v int32) {
	o.ParentFolderId = v
}

// GetChildNodes returns the ChildNodes field value
func (o *PublicListFolder) GetChildNodes() []PublicListFolder {
	if o == nil {
		var ret []PublicListFolder
		return ret
	}

	return o.ChildNodes
}

// GetChildNodesOk returns a tuple with the ChildNodes field value
// and a boolean to check if the value has been set.
func (o *PublicListFolder) GetChildNodesOk() ([]PublicListFolder, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChildNodes, true
}

// SetChildNodes sets field value
func (o *PublicListFolder) SetChildNodes(v []PublicListFolder) {
	o.ChildNodes = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PublicListFolder) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicListFolder) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PublicListFolder) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PublicListFolder) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value
func (o *PublicListFolder) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicListFolder) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicListFolder) SetId(v int32) {
	o.Id = v
}

// GetChildLists returns the ChildLists field value
func (o *PublicListFolder) GetChildLists() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ChildLists
}

// GetChildListsOk returns a tuple with the ChildLists field value
// and a boolean to check if the value has been set.
func (o *PublicListFolder) GetChildListsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChildLists, true
}

// SetChildLists sets field value
func (o *PublicListFolder) SetChildLists(v []int32) {
	o.ChildLists = v
}

// GetUpdatedContentsAt returns the UpdatedContentsAt field value if set, zero value otherwise.
func (o *PublicListFolder) GetUpdatedContentsAt() time.Time {
	if o == nil || IsNil(o.UpdatedContentsAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedContentsAt
}

// GetUpdatedContentsAtOk returns a tuple with the UpdatedContentsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicListFolder) GetUpdatedContentsAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedContentsAt) {
		return nil, false
	}
	return o.UpdatedContentsAt, true
}

// HasUpdatedContentsAt returns a boolean if a field has been set.
func (o *PublicListFolder) HasUpdatedContentsAt() bool {
	if o != nil && !IsNil(o.UpdatedContentsAt) {
		return true
	}

	return false
}

// SetUpdatedContentsAt gets a reference to the given time.Time and assigns it to the UpdatedContentsAt field.
func (o *PublicListFolder) SetUpdatedContentsAt(v time.Time) {
	o.UpdatedContentsAt = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PublicListFolder) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicListFolder) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PublicListFolder) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *PublicListFolder) SetUserId(v int32) {
	o.UserId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PublicListFolder) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicListFolder) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PublicListFolder) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PublicListFolder) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o PublicListFolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicListFolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	toSerialize["parentFolderId"] = o.ParentFolderId
	toSerialize["childNodes"] = o.ChildNodes
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["id"] = o.Id
	toSerialize["childLists"] = o.ChildLists
	if !IsNil(o.UpdatedContentsAt) {
		toSerialize["updatedContentsAt"] = o.UpdatedContentsAt
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *PublicListFolder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parentFolderId",
		"childNodes",
		"id",
		"childLists",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicListFolder := _PublicListFolder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicListFolder)

	if err != nil {
		return err
	}

	*o = PublicListFolder(varPublicListFolder)

	return err
}

type NullablePublicListFolder struct {
	value *PublicListFolder
	isSet bool
}

func (v NullablePublicListFolder) Get() *PublicListFolder {
	return v.value
}

func (v *NullablePublicListFolder) Set(val *PublicListFolder) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicListFolder) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicListFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicListFolder(val *PublicListFolder) *NullablePublicListFolder {
	return &NullablePublicListFolder{value: val, isSet: true}
}

func (v NullablePublicListFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicListFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


