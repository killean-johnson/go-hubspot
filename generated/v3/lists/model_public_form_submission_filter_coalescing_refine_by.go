/*
Lists

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PublicFormSubmissionFilterCoalescingRefineBy - struct for PublicFormSubmissionFilterCoalescingRefineBy
type PublicFormSubmissionFilterCoalescingRefineBy struct {
	PublicAbsoluteComparativeTimestampRefineBy *PublicAbsoluteComparativeTimestampRefineBy
	PublicAbsoluteRangedTimestampRefineBy *PublicAbsoluteRangedTimestampRefineBy
	PublicAllHistoryRefineBy *PublicAllHistoryRefineBy
	PublicNumOccurrencesRefineBy *PublicNumOccurrencesRefineBy
	PublicRangedTimeOperation *PublicRangedTimeOperation
	PublicRelativeComparativeTimestampRefineBy *PublicRelativeComparativeTimestampRefineBy
	PublicRelativeRangedTimestampRefineBy *PublicRelativeRangedTimestampRefineBy
	PublicSetOccurrencesRefineBy *PublicSetOccurrencesRefineBy
	PublicTimePointOperation *PublicTimePointOperation
}

// PublicAbsoluteComparativeTimestampRefineByAsPublicFormSubmissionFilterCoalescingRefineBy is a convenience function that returns PublicAbsoluteComparativeTimestampRefineBy wrapped in PublicFormSubmissionFilterCoalescingRefineBy
func PublicAbsoluteComparativeTimestampRefineByAsPublicFormSubmissionFilterCoalescingRefineBy(v *PublicAbsoluteComparativeTimestampRefineBy) PublicFormSubmissionFilterCoalescingRefineBy {
	return PublicFormSubmissionFilterCoalescingRefineBy{
		PublicAbsoluteComparativeTimestampRefineBy: v,
	}
}

// PublicAbsoluteRangedTimestampRefineByAsPublicFormSubmissionFilterCoalescingRefineBy is a convenience function that returns PublicAbsoluteRangedTimestampRefineBy wrapped in PublicFormSubmissionFilterCoalescingRefineBy
func PublicAbsoluteRangedTimestampRefineByAsPublicFormSubmissionFilterCoalescingRefineBy(v *PublicAbsoluteRangedTimestampRefineBy) PublicFormSubmissionFilterCoalescingRefineBy {
	return PublicFormSubmissionFilterCoalescingRefineBy{
		PublicAbsoluteRangedTimestampRefineBy: v,
	}
}

// PublicAllHistoryRefineByAsPublicFormSubmissionFilterCoalescingRefineBy is a convenience function that returns PublicAllHistoryRefineBy wrapped in PublicFormSubmissionFilterCoalescingRefineBy
func PublicAllHistoryRefineByAsPublicFormSubmissionFilterCoalescingRefineBy(v *PublicAllHistoryRefineBy) PublicFormSubmissionFilterCoalescingRefineBy {
	return PublicFormSubmissionFilterCoalescingRefineBy{
		PublicAllHistoryRefineBy: v,
	}
}

// PublicNumOccurrencesRefineByAsPublicFormSubmissionFilterCoalescingRefineBy is a convenience function that returns PublicNumOccurrencesRefineBy wrapped in PublicFormSubmissionFilterCoalescingRefineBy
func PublicNumOccurrencesRefineByAsPublicFormSubmissionFilterCoalescingRefineBy(v *PublicNumOccurrencesRefineBy) PublicFormSubmissionFilterCoalescingRefineBy {
	return PublicFormSubmissionFilterCoalescingRefineBy{
		PublicNumOccurrencesRefineBy: v,
	}
}

// PublicRangedTimeOperationAsPublicFormSubmissionFilterCoalescingRefineBy is a convenience function that returns PublicRangedTimeOperation wrapped in PublicFormSubmissionFilterCoalescingRefineBy
func PublicRangedTimeOperationAsPublicFormSubmissionFilterCoalescingRefineBy(v *PublicRangedTimeOperation) PublicFormSubmissionFilterCoalescingRefineBy {
	return PublicFormSubmissionFilterCoalescingRefineBy{
		PublicRangedTimeOperation: v,
	}
}

// PublicRelativeComparativeTimestampRefineByAsPublicFormSubmissionFilterCoalescingRefineBy is a convenience function that returns PublicRelativeComparativeTimestampRefineBy wrapped in PublicFormSubmissionFilterCoalescingRefineBy
func PublicRelativeComparativeTimestampRefineByAsPublicFormSubmissionFilterCoalescingRefineBy(v *PublicRelativeComparativeTimestampRefineBy) PublicFormSubmissionFilterCoalescingRefineBy {
	return PublicFormSubmissionFilterCoalescingRefineBy{
		PublicRelativeComparativeTimestampRefineBy: v,
	}
}

// PublicRelativeRangedTimestampRefineByAsPublicFormSubmissionFilterCoalescingRefineBy is a convenience function that returns PublicRelativeRangedTimestampRefineBy wrapped in PublicFormSubmissionFilterCoalescingRefineBy
func PublicRelativeRangedTimestampRefineByAsPublicFormSubmissionFilterCoalescingRefineBy(v *PublicRelativeRangedTimestampRefineBy) PublicFormSubmissionFilterCoalescingRefineBy {
	return PublicFormSubmissionFilterCoalescingRefineBy{
		PublicRelativeRangedTimestampRefineBy: v,
	}
}

// PublicSetOccurrencesRefineByAsPublicFormSubmissionFilterCoalescingRefineBy is a convenience function that returns PublicSetOccurrencesRefineBy wrapped in PublicFormSubmissionFilterCoalescingRefineBy
func PublicSetOccurrencesRefineByAsPublicFormSubmissionFilterCoalescingRefineBy(v *PublicSetOccurrencesRefineBy) PublicFormSubmissionFilterCoalescingRefineBy {
	return PublicFormSubmissionFilterCoalescingRefineBy{
		PublicSetOccurrencesRefineBy: v,
	}
}

// PublicTimePointOperationAsPublicFormSubmissionFilterCoalescingRefineBy is a convenience function that returns PublicTimePointOperation wrapped in PublicFormSubmissionFilterCoalescingRefineBy
func PublicTimePointOperationAsPublicFormSubmissionFilterCoalescingRefineBy(v *PublicTimePointOperation) PublicFormSubmissionFilterCoalescingRefineBy {
	return PublicFormSubmissionFilterCoalescingRefineBy{
		PublicTimePointOperation: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PublicFormSubmissionFilterCoalescingRefineBy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PublicAbsoluteComparativeTimestampRefineBy
	err = newStrictDecoder(data).Decode(&dst.PublicAbsoluteComparativeTimestampRefineBy)
	if err == nil {
		jsonPublicAbsoluteComparativeTimestampRefineBy, _ := json.Marshal(dst.PublicAbsoluteComparativeTimestampRefineBy)
		if string(jsonPublicAbsoluteComparativeTimestampRefineBy) == "{}" { // empty struct
			dst.PublicAbsoluteComparativeTimestampRefineBy = nil
		} else {
			if err = validator.Validate(dst.PublicAbsoluteComparativeTimestampRefineBy); err != nil {
				dst.PublicAbsoluteComparativeTimestampRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicAbsoluteComparativeTimestampRefineBy = nil
	}

	// try to unmarshal data into PublicAbsoluteRangedTimestampRefineBy
	err = newStrictDecoder(data).Decode(&dst.PublicAbsoluteRangedTimestampRefineBy)
	if err == nil {
		jsonPublicAbsoluteRangedTimestampRefineBy, _ := json.Marshal(dst.PublicAbsoluteRangedTimestampRefineBy)
		if string(jsonPublicAbsoluteRangedTimestampRefineBy) == "{}" { // empty struct
			dst.PublicAbsoluteRangedTimestampRefineBy = nil
		} else {
			if err = validator.Validate(dst.PublicAbsoluteRangedTimestampRefineBy); err != nil {
				dst.PublicAbsoluteRangedTimestampRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicAbsoluteRangedTimestampRefineBy = nil
	}

	// try to unmarshal data into PublicAllHistoryRefineBy
	err = newStrictDecoder(data).Decode(&dst.PublicAllHistoryRefineBy)
	if err == nil {
		jsonPublicAllHistoryRefineBy, _ := json.Marshal(dst.PublicAllHistoryRefineBy)
		if string(jsonPublicAllHistoryRefineBy) == "{}" { // empty struct
			dst.PublicAllHistoryRefineBy = nil
		} else {
			if err = validator.Validate(dst.PublicAllHistoryRefineBy); err != nil {
				dst.PublicAllHistoryRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicAllHistoryRefineBy = nil
	}

	// try to unmarshal data into PublicNumOccurrencesRefineBy
	err = newStrictDecoder(data).Decode(&dst.PublicNumOccurrencesRefineBy)
	if err == nil {
		jsonPublicNumOccurrencesRefineBy, _ := json.Marshal(dst.PublicNumOccurrencesRefineBy)
		if string(jsonPublicNumOccurrencesRefineBy) == "{}" { // empty struct
			dst.PublicNumOccurrencesRefineBy = nil
		} else {
			if err = validator.Validate(dst.PublicNumOccurrencesRefineBy); err != nil {
				dst.PublicNumOccurrencesRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicNumOccurrencesRefineBy = nil
	}

	// try to unmarshal data into PublicRangedTimeOperation
	err = newStrictDecoder(data).Decode(&dst.PublicRangedTimeOperation)
	if err == nil {
		jsonPublicRangedTimeOperation, _ := json.Marshal(dst.PublicRangedTimeOperation)
		if string(jsonPublicRangedTimeOperation) == "{}" { // empty struct
			dst.PublicRangedTimeOperation = nil
		} else {
			if err = validator.Validate(dst.PublicRangedTimeOperation); err != nil {
				dst.PublicRangedTimeOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicRangedTimeOperation = nil
	}

	// try to unmarshal data into PublicRelativeComparativeTimestampRefineBy
	err = newStrictDecoder(data).Decode(&dst.PublicRelativeComparativeTimestampRefineBy)
	if err == nil {
		jsonPublicRelativeComparativeTimestampRefineBy, _ := json.Marshal(dst.PublicRelativeComparativeTimestampRefineBy)
		if string(jsonPublicRelativeComparativeTimestampRefineBy) == "{}" { // empty struct
			dst.PublicRelativeComparativeTimestampRefineBy = nil
		} else {
			if err = validator.Validate(dst.PublicRelativeComparativeTimestampRefineBy); err != nil {
				dst.PublicRelativeComparativeTimestampRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicRelativeComparativeTimestampRefineBy = nil
	}

	// try to unmarshal data into PublicRelativeRangedTimestampRefineBy
	err = newStrictDecoder(data).Decode(&dst.PublicRelativeRangedTimestampRefineBy)
	if err == nil {
		jsonPublicRelativeRangedTimestampRefineBy, _ := json.Marshal(dst.PublicRelativeRangedTimestampRefineBy)
		if string(jsonPublicRelativeRangedTimestampRefineBy) == "{}" { // empty struct
			dst.PublicRelativeRangedTimestampRefineBy = nil
		} else {
			if err = validator.Validate(dst.PublicRelativeRangedTimestampRefineBy); err != nil {
				dst.PublicRelativeRangedTimestampRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicRelativeRangedTimestampRefineBy = nil
	}

	// try to unmarshal data into PublicSetOccurrencesRefineBy
	err = newStrictDecoder(data).Decode(&dst.PublicSetOccurrencesRefineBy)
	if err == nil {
		jsonPublicSetOccurrencesRefineBy, _ := json.Marshal(dst.PublicSetOccurrencesRefineBy)
		if string(jsonPublicSetOccurrencesRefineBy) == "{}" { // empty struct
			dst.PublicSetOccurrencesRefineBy = nil
		} else {
			if err = validator.Validate(dst.PublicSetOccurrencesRefineBy); err != nil {
				dst.PublicSetOccurrencesRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicSetOccurrencesRefineBy = nil
	}

	// try to unmarshal data into PublicTimePointOperation
	err = newStrictDecoder(data).Decode(&dst.PublicTimePointOperation)
	if err == nil {
		jsonPublicTimePointOperation, _ := json.Marshal(dst.PublicTimePointOperation)
		if string(jsonPublicTimePointOperation) == "{}" { // empty struct
			dst.PublicTimePointOperation = nil
		} else {
			if err = validator.Validate(dst.PublicTimePointOperation); err != nil {
				dst.PublicTimePointOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicTimePointOperation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PublicAbsoluteComparativeTimestampRefineBy = nil
		dst.PublicAbsoluteRangedTimestampRefineBy = nil
		dst.PublicAllHistoryRefineBy = nil
		dst.PublicNumOccurrencesRefineBy = nil
		dst.PublicRangedTimeOperation = nil
		dst.PublicRelativeComparativeTimestampRefineBy = nil
		dst.PublicRelativeRangedTimestampRefineBy = nil
		dst.PublicSetOccurrencesRefineBy = nil
		dst.PublicTimePointOperation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PublicFormSubmissionFilterCoalescingRefineBy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PublicFormSubmissionFilterCoalescingRefineBy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PublicFormSubmissionFilterCoalescingRefineBy) MarshalJSON() ([]byte, error) {
	if src.PublicAbsoluteComparativeTimestampRefineBy != nil {
		return json.Marshal(&src.PublicAbsoluteComparativeTimestampRefineBy)
	}

	if src.PublicAbsoluteRangedTimestampRefineBy != nil {
		return json.Marshal(&src.PublicAbsoluteRangedTimestampRefineBy)
	}

	if src.PublicAllHistoryRefineBy != nil {
		return json.Marshal(&src.PublicAllHistoryRefineBy)
	}

	if src.PublicNumOccurrencesRefineBy != nil {
		return json.Marshal(&src.PublicNumOccurrencesRefineBy)
	}

	if src.PublicRangedTimeOperation != nil {
		return json.Marshal(&src.PublicRangedTimeOperation)
	}

	if src.PublicRelativeComparativeTimestampRefineBy != nil {
		return json.Marshal(&src.PublicRelativeComparativeTimestampRefineBy)
	}

	if src.PublicRelativeRangedTimestampRefineBy != nil {
		return json.Marshal(&src.PublicRelativeRangedTimestampRefineBy)
	}

	if src.PublicSetOccurrencesRefineBy != nil {
		return json.Marshal(&src.PublicSetOccurrencesRefineBy)
	}

	if src.PublicTimePointOperation != nil {
		return json.Marshal(&src.PublicTimePointOperation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PublicFormSubmissionFilterCoalescingRefineBy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PublicAbsoluteComparativeTimestampRefineBy != nil {
		return obj.PublicAbsoluteComparativeTimestampRefineBy
	}

	if obj.PublicAbsoluteRangedTimestampRefineBy != nil {
		return obj.PublicAbsoluteRangedTimestampRefineBy
	}

	if obj.PublicAllHistoryRefineBy != nil {
		return obj.PublicAllHistoryRefineBy
	}

	if obj.PublicNumOccurrencesRefineBy != nil {
		return obj.PublicNumOccurrencesRefineBy
	}

	if obj.PublicRangedTimeOperation != nil {
		return obj.PublicRangedTimeOperation
	}

	if obj.PublicRelativeComparativeTimestampRefineBy != nil {
		return obj.PublicRelativeComparativeTimestampRefineBy
	}

	if obj.PublicRelativeRangedTimestampRefineBy != nil {
		return obj.PublicRelativeRangedTimestampRefineBy
	}

	if obj.PublicSetOccurrencesRefineBy != nil {
		return obj.PublicSetOccurrencesRefineBy
	}

	if obj.PublicTimePointOperation != nil {
		return obj.PublicTimePointOperation
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PublicFormSubmissionFilterCoalescingRefineBy) GetActualInstanceValue() (interface{}) {
	if obj.PublicAbsoluteComparativeTimestampRefineBy != nil {
		return *obj.PublicAbsoluteComparativeTimestampRefineBy
	}

	if obj.PublicAbsoluteRangedTimestampRefineBy != nil {
		return *obj.PublicAbsoluteRangedTimestampRefineBy
	}

	if obj.PublicAllHistoryRefineBy != nil {
		return *obj.PublicAllHistoryRefineBy
	}

	if obj.PublicNumOccurrencesRefineBy != nil {
		return *obj.PublicNumOccurrencesRefineBy
	}

	if obj.PublicRangedTimeOperation != nil {
		return *obj.PublicRangedTimeOperation
	}

	if obj.PublicRelativeComparativeTimestampRefineBy != nil {
		return *obj.PublicRelativeComparativeTimestampRefineBy
	}

	if obj.PublicRelativeRangedTimestampRefineBy != nil {
		return *obj.PublicRelativeRangedTimestampRefineBy
	}

	if obj.PublicSetOccurrencesRefineBy != nil {
		return *obj.PublicSetOccurrencesRefineBy
	}

	if obj.PublicTimePointOperation != nil {
		return *obj.PublicTimePointOperation
	}

	// all schemas are nil
	return nil
}

type NullablePublicFormSubmissionFilterCoalescingRefineBy struct {
	value *PublicFormSubmissionFilterCoalescingRefineBy
	isSet bool
}

func (v NullablePublicFormSubmissionFilterCoalescingRefineBy) Get() *PublicFormSubmissionFilterCoalescingRefineBy {
	return v.value
}

func (v *NullablePublicFormSubmissionFilterCoalescingRefineBy) Set(val *PublicFormSubmissionFilterCoalescingRefineBy) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicFormSubmissionFilterCoalescingRefineBy) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicFormSubmissionFilterCoalescingRefineBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicFormSubmissionFilterCoalescingRefineBy(val *PublicFormSubmissionFilterCoalescingRefineBy) *NullablePublicFormSubmissionFilterCoalescingRefineBy {
	return &NullablePublicFormSubmissionFilterCoalescingRefineBy{value: val, isSet: true}
}

func (v NullablePublicFormSubmissionFilterCoalescingRefineBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicFormSubmissionFilterCoalescingRefineBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


