/*
Lists

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RecordListMembership type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordListMembership{}

// RecordListMembership struct for RecordListMembership
type RecordListMembership struct {
	ListId string `json:"listId"`
	ListVersion int32 `json:"listVersion"`
	LastAddedTimestamp time.Time `json:"lastAddedTimestamp"`
	FirstAddedTimestamp time.Time `json:"firstAddedTimestamp"`
}

type _RecordListMembership RecordListMembership

// NewRecordListMembership instantiates a new RecordListMembership object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordListMembership(listId string, listVersion int32, lastAddedTimestamp time.Time, firstAddedTimestamp time.Time) *RecordListMembership {
	this := RecordListMembership{}
	this.ListId = listId
	this.ListVersion = listVersion
	this.LastAddedTimestamp = lastAddedTimestamp
	this.FirstAddedTimestamp = firstAddedTimestamp
	return &this
}

// NewRecordListMembershipWithDefaults instantiates a new RecordListMembership object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordListMembershipWithDefaults() *RecordListMembership {
	this := RecordListMembership{}
	return &this
}

// GetListId returns the ListId field value
func (o *RecordListMembership) GetListId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListId
}

// GetListIdOk returns a tuple with the ListId field value
// and a boolean to check if the value has been set.
func (o *RecordListMembership) GetListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListId, true
}

// SetListId sets field value
func (o *RecordListMembership) SetListId(v string) {
	o.ListId = v
}

// GetListVersion returns the ListVersion field value
func (o *RecordListMembership) GetListVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ListVersion
}

// GetListVersionOk returns a tuple with the ListVersion field value
// and a boolean to check if the value has been set.
func (o *RecordListMembership) GetListVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListVersion, true
}

// SetListVersion sets field value
func (o *RecordListMembership) SetListVersion(v int32) {
	o.ListVersion = v
}

// GetLastAddedTimestamp returns the LastAddedTimestamp field value
func (o *RecordListMembership) GetLastAddedTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastAddedTimestamp
}

// GetLastAddedTimestampOk returns a tuple with the LastAddedTimestamp field value
// and a boolean to check if the value has been set.
func (o *RecordListMembership) GetLastAddedTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastAddedTimestamp, true
}

// SetLastAddedTimestamp sets field value
func (o *RecordListMembership) SetLastAddedTimestamp(v time.Time) {
	o.LastAddedTimestamp = v
}

// GetFirstAddedTimestamp returns the FirstAddedTimestamp field value
func (o *RecordListMembership) GetFirstAddedTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FirstAddedTimestamp
}

// GetFirstAddedTimestampOk returns a tuple with the FirstAddedTimestamp field value
// and a boolean to check if the value has been set.
func (o *RecordListMembership) GetFirstAddedTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstAddedTimestamp, true
}

// SetFirstAddedTimestamp sets field value
func (o *RecordListMembership) SetFirstAddedTimestamp(v time.Time) {
	o.FirstAddedTimestamp = v
}

func (o RecordListMembership) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordListMembership) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["listId"] = o.ListId
	toSerialize["listVersion"] = o.ListVersion
	toSerialize["lastAddedTimestamp"] = o.LastAddedTimestamp
	toSerialize["firstAddedTimestamp"] = o.FirstAddedTimestamp
	return toSerialize, nil
}

func (o *RecordListMembership) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"listId",
		"listVersion",
		"lastAddedTimestamp",
		"firstAddedTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecordListMembership := _RecordListMembership{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecordListMembership)

	if err != nil {
		return err
	}

	*o = RecordListMembership(varRecordListMembership)

	return err
}

type NullableRecordListMembership struct {
	value *RecordListMembership
	isSet bool
}

func (v NullableRecordListMembership) Get() *RecordListMembership {
	return v.value
}

func (v *NullableRecordListMembership) Set(val *RecordListMembership) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordListMembership) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordListMembership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordListMembership(val *RecordListMembership) *NullableRecordListMembership {
	return &NullableRecordListMembership{value: val, isSet: true}
}

func (v NullableRecordListMembership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordListMembership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


