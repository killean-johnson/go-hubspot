/*
Lists

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListMoveRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListMoveRequest{}

// ListMoveRequest struct for ListMoveRequest
type ListMoveRequest struct {
	// The Id of the list to move.
	ListId string `json:"listId"`
	// The Id of folder to move the list to, the root folder is Id 0.
	NewFolderId string `json:"newFolderId"`
}

type _ListMoveRequest ListMoveRequest

// NewListMoveRequest instantiates a new ListMoveRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListMoveRequest(listId string, newFolderId string) *ListMoveRequest {
	this := ListMoveRequest{}
	this.ListId = listId
	this.NewFolderId = newFolderId
	return &this
}

// NewListMoveRequestWithDefaults instantiates a new ListMoveRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListMoveRequestWithDefaults() *ListMoveRequest {
	this := ListMoveRequest{}
	return &this
}

// GetListId returns the ListId field value
func (o *ListMoveRequest) GetListId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListId
}

// GetListIdOk returns a tuple with the ListId field value
// and a boolean to check if the value has been set.
func (o *ListMoveRequest) GetListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListId, true
}

// SetListId sets field value
func (o *ListMoveRequest) SetListId(v string) {
	o.ListId = v
}

// GetNewFolderId returns the NewFolderId field value
func (o *ListMoveRequest) GetNewFolderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewFolderId
}

// GetNewFolderIdOk returns a tuple with the NewFolderId field value
// and a boolean to check if the value has been set.
func (o *ListMoveRequest) GetNewFolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewFolderId, true
}

// SetNewFolderId sets field value
func (o *ListMoveRequest) SetNewFolderId(v string) {
	o.NewFolderId = v
}

func (o ListMoveRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListMoveRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["listId"] = o.ListId
	toSerialize["newFolderId"] = o.NewFolderId
	return toSerialize, nil
}

func (o *ListMoveRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"listId",
		"newFolderId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListMoveRequest := _ListMoveRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListMoveRequest)

	if err != nil {
		return err
	}

	*o = ListMoveRequest(varListMoveRequest)

	return err
}

type NullableListMoveRequest struct {
	value *ListMoveRequest
	isSet bool
}

func (v NullableListMoveRequest) Get() *ListMoveRequest {
	return v.value
}

func (v *NullableListMoveRequest) Set(val *ListMoveRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableListMoveRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableListMoveRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMoveRequest(val *ListMoveRequest) *NullableListMoveRequest {
	return &NullableListMoveRequest{value: val, isSet: true}
}

func (v NullableListMoveRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMoveRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


