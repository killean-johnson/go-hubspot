/*
Lists

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicBatchMigrationMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicBatchMigrationMapping{}

// PublicBatchMigrationMapping struct for PublicBatchMigrationMapping
type PublicBatchMigrationMapping struct {
	LegacyListIdsToIdsMapping []PublicMigrationMapping `json:"legacyListIdsToIdsMapping"`
	// A list of legacy list ids that were passed in but not found. It will be empty if no id's are missing
	MissingLegacyListIds []string `json:"missingLegacyListIds"`
}

type _PublicBatchMigrationMapping PublicBatchMigrationMapping

// NewPublicBatchMigrationMapping instantiates a new PublicBatchMigrationMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicBatchMigrationMapping(legacyListIdsToIdsMapping []PublicMigrationMapping, missingLegacyListIds []string) *PublicBatchMigrationMapping {
	this := PublicBatchMigrationMapping{}
	this.LegacyListIdsToIdsMapping = legacyListIdsToIdsMapping
	this.MissingLegacyListIds = missingLegacyListIds
	return &this
}

// NewPublicBatchMigrationMappingWithDefaults instantiates a new PublicBatchMigrationMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicBatchMigrationMappingWithDefaults() *PublicBatchMigrationMapping {
	this := PublicBatchMigrationMapping{}
	return &this
}

// GetLegacyListIdsToIdsMapping returns the LegacyListIdsToIdsMapping field value
func (o *PublicBatchMigrationMapping) GetLegacyListIdsToIdsMapping() []PublicMigrationMapping {
	if o == nil {
		var ret []PublicMigrationMapping
		return ret
	}

	return o.LegacyListIdsToIdsMapping
}

// GetLegacyListIdsToIdsMappingOk returns a tuple with the LegacyListIdsToIdsMapping field value
// and a boolean to check if the value has been set.
func (o *PublicBatchMigrationMapping) GetLegacyListIdsToIdsMappingOk() ([]PublicMigrationMapping, bool) {
	if o == nil {
		return nil, false
	}
	return o.LegacyListIdsToIdsMapping, true
}

// SetLegacyListIdsToIdsMapping sets field value
func (o *PublicBatchMigrationMapping) SetLegacyListIdsToIdsMapping(v []PublicMigrationMapping) {
	o.LegacyListIdsToIdsMapping = v
}

// GetMissingLegacyListIds returns the MissingLegacyListIds field value
func (o *PublicBatchMigrationMapping) GetMissingLegacyListIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MissingLegacyListIds
}

// GetMissingLegacyListIdsOk returns a tuple with the MissingLegacyListIds field value
// and a boolean to check if the value has been set.
func (o *PublicBatchMigrationMapping) GetMissingLegacyListIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MissingLegacyListIds, true
}

// SetMissingLegacyListIds sets field value
func (o *PublicBatchMigrationMapping) SetMissingLegacyListIds(v []string) {
	o.MissingLegacyListIds = v
}

func (o PublicBatchMigrationMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicBatchMigrationMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["legacyListIdsToIdsMapping"] = o.LegacyListIdsToIdsMapping
	toSerialize["missingLegacyListIds"] = o.MissingLegacyListIds
	return toSerialize, nil
}

func (o *PublicBatchMigrationMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"legacyListIdsToIdsMapping",
		"missingLegacyListIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicBatchMigrationMapping := _PublicBatchMigrationMapping{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicBatchMigrationMapping)

	if err != nil {
		return err
	}

	*o = PublicBatchMigrationMapping(varPublicBatchMigrationMapping)

	return err
}

type NullablePublicBatchMigrationMapping struct {
	value *PublicBatchMigrationMapping
	isSet bool
}

func (v NullablePublicBatchMigrationMapping) Get() *PublicBatchMigrationMapping {
	return v.value
}

func (v *NullablePublicBatchMigrationMapping) Set(val *PublicBatchMigrationMapping) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicBatchMigrationMapping) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicBatchMigrationMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicBatchMigrationMapping(val *PublicBatchMigrationMapping) *NullablePublicBatchMigrationMapping {
	return &NullablePublicBatchMigrationMapping{value: val, isSet: true}
}

func (v NullablePublicBatchMigrationMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicBatchMigrationMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


