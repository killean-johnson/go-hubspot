/*
Lists

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListSearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListSearchResponse{}

// ListSearchResponse struct for ListSearchResponse
type ListSearchResponse struct {
	// The total number of lists that match the search criteria.
	Total int32 `json:"total"`
	// Value to be passed in a future request to paginate through list search results.
	Offset int32 `json:"offset"`
	// The lists that matched the search criteria.
	Lists []PublicObjectListSearchResult `json:"lists"`
	// Whether or not there are more results to page through.
	HasMore bool `json:"hasMore"`
}

type _ListSearchResponse ListSearchResponse

// NewListSearchResponse instantiates a new ListSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSearchResponse(total int32, offset int32, lists []PublicObjectListSearchResult, hasMore bool) *ListSearchResponse {
	this := ListSearchResponse{}
	this.Total = total
	this.Offset = offset
	this.Lists = lists
	this.HasMore = hasMore
	return &this
}

// NewListSearchResponseWithDefaults instantiates a new ListSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSearchResponseWithDefaults() *ListSearchResponse {
	this := ListSearchResponse{}
	return &this
}

// GetTotal returns the Total field value
func (o *ListSearchResponse) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ListSearchResponse) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ListSearchResponse) SetTotal(v int32) {
	o.Total = v
}

// GetOffset returns the Offset field value
func (o *ListSearchResponse) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *ListSearchResponse) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *ListSearchResponse) SetOffset(v int32) {
	o.Offset = v
}

// GetLists returns the Lists field value
func (o *ListSearchResponse) GetLists() []PublicObjectListSearchResult {
	if o == nil {
		var ret []PublicObjectListSearchResult
		return ret
	}

	return o.Lists
}

// GetListsOk returns a tuple with the Lists field value
// and a boolean to check if the value has been set.
func (o *ListSearchResponse) GetListsOk() ([]PublicObjectListSearchResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lists, true
}

// SetLists sets field value
func (o *ListSearchResponse) SetLists(v []PublicObjectListSearchResult) {
	o.Lists = v
}

// GetHasMore returns the HasMore field value
func (o *ListSearchResponse) GetHasMore() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value
// and a boolean to check if the value has been set.
func (o *ListSearchResponse) GetHasMoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasMore, true
}

// SetHasMore sets field value
func (o *ListSearchResponse) SetHasMore(v bool) {
	o.HasMore = v
}

func (o ListSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListSearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["offset"] = o.Offset
	toSerialize["lists"] = o.Lists
	toSerialize["hasMore"] = o.HasMore
	return toSerialize, nil
}

func (o *ListSearchResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
		"offset",
		"lists",
		"hasMore",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListSearchResponse := _ListSearchResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListSearchResponse)

	if err != nil {
		return err
	}

	*o = ListSearchResponse(varListSearchResponse)

	return err
}

type NullableListSearchResponse struct {
	value *ListSearchResponse
	isSet bool
}

func (v NullableListSearchResponse) Get() *ListSearchResponse {
	return v.value
}

func (v *NullableListSearchResponse) Set(val *ListSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSearchResponse(val *ListSearchResponse) *NullableListSearchResponse {
	return &NullableListSearchResponse{value: val, isSet: true}
}

func (v NullableListSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


