/*
Lists

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
	"reflect"
)


// ListsAPIService ListsAPI service
type ListsAPIService service

type ApiDeleteCrmV3ListsListIdRemoveRequest struct {
	ctx context.Context
	ApiService *ListsAPIService
	listId string
}

func (r ApiDeleteCrmV3ListsListIdRemoveRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCrmV3ListsListIdRemoveExecute(r)
}

/*
DeleteCrmV3ListsListIdRemove Delete a List

Delete a list by **ILS list ID**. Lists deleted through this endpoint can be restored up to 90-days following the delete. After 90-days, the list is purged and can no longer be restored.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param listId The **ILS ID** of the list to delete.
 @return ApiDeleteCrmV3ListsListIdRemoveRequest
*/
func (a *ListsAPIService) DeleteCrmV3ListsListIdRemove(ctx context.Context, listId string) ApiDeleteCrmV3ListsListIdRemoveRequest {
	return ApiDeleteCrmV3ListsListIdRemoveRequest{
		ApiService: a,
		ctx: ctx,
		listId: listId,
	}
}

// Execute executes the request
func (a *ListsAPIService) DeleteCrmV3ListsListIdRemoveExecute(r ApiDeleteCrmV3ListsListIdRemoveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ListsAPIService.DeleteCrmV3ListsListIdRemove")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/lists/{listId}"
	localVarPath = strings.Replace(localVarPath, "{"+"listId"+"}", url.PathEscape(parameterValueToString(r.listId, "listId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCrmV3ListsGetAllRequest struct {
	ctx context.Context
	ApiService *ListsAPIService
	listIds *[]string
	includeFilters *bool
}

// The **ILS IDs** of the lists to fetch.
func (r ApiGetCrmV3ListsGetAllRequest) ListIds(listIds []string) ApiGetCrmV3ListsGetAllRequest {
	r.listIds = &listIds
	return r
}

// A flag indicating whether or not the response object list definitions should include a filter branch definition. By default, object list definitions will not have their filter branch definitions included in the response.
func (r ApiGetCrmV3ListsGetAllRequest) IncludeFilters(includeFilters bool) ApiGetCrmV3ListsGetAllRequest {
	r.includeFilters = &includeFilters
	return r
}

func (r ApiGetCrmV3ListsGetAllRequest) Execute() (*ListsByIdResponse, *http.Response, error) {
	return r.ApiService.GetCrmV3ListsGetAllExecute(r)
}

/*
GetCrmV3ListsGetAll Fetch Multiple Lists

Fetch multiple lists in a single request by **ILS list ID**. The response will include the definitions of all lists that exist for the `listIds` provided.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCrmV3ListsGetAllRequest
*/
func (a *ListsAPIService) GetCrmV3ListsGetAll(ctx context.Context) ApiGetCrmV3ListsGetAllRequest {
	return ApiGetCrmV3ListsGetAllRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListsByIdResponse
func (a *ListsAPIService) GetCrmV3ListsGetAllExecute(r ApiGetCrmV3ListsGetAllRequest) (*ListsByIdResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListsByIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ListsAPIService.GetCrmV3ListsGetAll")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/lists/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.listIds != nil {
		t := *r.listIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "listIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "listIds", t, "form", "multi")
		}
	}
	if r.includeFilters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFilters", r.includeFilters, "form", "")
	} else {
		var defaultValue bool = false
		r.includeFilters = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCrmV3ListsListIdGetByIdRequest struct {
	ctx context.Context
	ApiService *ListsAPIService
	listId string
	includeFilters *bool
}

// A flag indicating whether or not the response object list definition should include a filter branch definition. By default, object list definitions will not have their filter branch definitions included in the response.
func (r ApiGetCrmV3ListsListIdGetByIdRequest) IncludeFilters(includeFilters bool) ApiGetCrmV3ListsListIdGetByIdRequest {
	r.includeFilters = &includeFilters
	return r
}

func (r ApiGetCrmV3ListsListIdGetByIdRequest) Execute() (*ListFetchResponse, *http.Response, error) {
	return r.ApiService.GetCrmV3ListsListIdGetByIdExecute(r)
}

/*
GetCrmV3ListsListIdGetById Fetch List by ID

Fetch a single list by **ILS list ID**.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param listId The **ILS ID** of the list to fetch.
 @return ApiGetCrmV3ListsListIdGetByIdRequest
*/
func (a *ListsAPIService) GetCrmV3ListsListIdGetById(ctx context.Context, listId string) ApiGetCrmV3ListsListIdGetByIdRequest {
	return ApiGetCrmV3ListsListIdGetByIdRequest{
		ApiService: a,
		ctx: ctx,
		listId: listId,
	}
}

// Execute executes the request
//  @return ListFetchResponse
func (a *ListsAPIService) GetCrmV3ListsListIdGetByIdExecute(r ApiGetCrmV3ListsListIdGetByIdRequest) (*ListFetchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListFetchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ListsAPIService.GetCrmV3ListsListIdGetById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/lists/{listId}"
	localVarPath = strings.Replace(localVarPath, "{"+"listId"+"}", url.PathEscape(parameterValueToString(r.listId, "listId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeFilters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFilters", r.includeFilters, "form", "")
	} else {
		var defaultValue bool = false
		r.includeFilters = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByNameRequest struct {
	ctx context.Context
	ApiService *ListsAPIService
	listName string
	objectTypeId string
	includeFilters *bool
}

// A flag indicating whether or not the response object list definition should include a filter branch definition. By default, object list definitions will not have their filter branch definitions included in the response.
func (r ApiGetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByNameRequest) IncludeFilters(includeFilters bool) ApiGetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByNameRequest {
	r.includeFilters = &includeFilters
	return r
}

func (r ApiGetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByNameRequest) Execute() (*ListFetchResponse, *http.Response, error) {
	return r.ApiService.GetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByNameExecute(r)
}

/*
GetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByName Fetch List by Name

Fetch a single list by list name and object type.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param listName The name of the list to fetch. This is **not** case sensitive.
 @param objectTypeId The object type ID of the object types stored by the list to fetch. For example, `0-1` for a `CONTACT` list.
 @return ApiGetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByNameRequest
*/
func (a *ListsAPIService) GetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByName(ctx context.Context, listName string, objectTypeId string) ApiGetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByNameRequest {
	return ApiGetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByNameRequest{
		ApiService: a,
		ctx: ctx,
		listName: listName,
		objectTypeId: objectTypeId,
	}
}

// Execute executes the request
//  @return ListFetchResponse
func (a *ListsAPIService) GetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByNameExecute(r ApiGetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByNameRequest) (*ListFetchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListFetchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ListsAPIService.GetCrmV3ListsObjectTypeIdObjectTypeIdNameListNameGetByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/lists/object-type-id/{objectTypeId}/name/{listName}"
	localVarPath = strings.Replace(localVarPath, "{"+"listName"+"}", url.PathEscape(parameterValueToString(r.listName, "listName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"objectTypeId"+"}", url.PathEscape(parameterValueToString(r.objectTypeId, "objectTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeFilters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFilters", r.includeFilters, "form", "")
	} else {
		var defaultValue bool = false
		r.includeFilters = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCrmV3ListsCreateRequest struct {
	ctx context.Context
	ApiService *ListsAPIService
	listCreateRequest *ListCreateRequest
}

func (r ApiPostCrmV3ListsCreateRequest) ListCreateRequest(listCreateRequest ListCreateRequest) ApiPostCrmV3ListsCreateRequest {
	r.listCreateRequest = &listCreateRequest
	return r
}

func (r ApiPostCrmV3ListsCreateRequest) Execute() (*ListCreateResponse, *http.Response, error) {
	return r.ApiService.PostCrmV3ListsCreateExecute(r)
}

/*
PostCrmV3ListsCreate Create List

Create a new list with the provided object list definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCrmV3ListsCreateRequest
*/
func (a *ListsAPIService) PostCrmV3ListsCreate(ctx context.Context) ApiPostCrmV3ListsCreateRequest {
	return ApiPostCrmV3ListsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListCreateResponse
func (a *ListsAPIService) PostCrmV3ListsCreateExecute(r ApiPostCrmV3ListsCreateRequest) (*ListCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListCreateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ListsAPIService.PostCrmV3ListsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/lists/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.listCreateRequest == nil {
		return localVarReturnValue, nil, reportError("listCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.listCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCrmV3ListsSearchDoSearchRequest struct {
	ctx context.Context
	ApiService *ListsAPIService
	listSearchRequest *ListSearchRequest
}

func (r ApiPostCrmV3ListsSearchDoSearchRequest) ListSearchRequest(listSearchRequest ListSearchRequest) ApiPostCrmV3ListsSearchDoSearchRequest {
	r.listSearchRequest = &listSearchRequest
	return r
}

func (r ApiPostCrmV3ListsSearchDoSearchRequest) Execute() (*ListSearchResponse, *http.Response, error) {
	return r.ApiService.PostCrmV3ListsSearchDoSearchExecute(r)
}

/*
PostCrmV3ListsSearchDoSearch Search Lists

Search lists by list name or page through all lists by providing an empty `query` value.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCrmV3ListsSearchDoSearchRequest
*/
func (a *ListsAPIService) PostCrmV3ListsSearchDoSearch(ctx context.Context) ApiPostCrmV3ListsSearchDoSearchRequest {
	return ApiPostCrmV3ListsSearchDoSearchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListSearchResponse
func (a *ListsAPIService) PostCrmV3ListsSearchDoSearchExecute(r ApiPostCrmV3ListsSearchDoSearchRequest) (*ListSearchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListSearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ListsAPIService.PostCrmV3ListsSearchDoSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/lists/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.listSearchRequest == nil {
		return localVarReturnValue, nil, reportError("listSearchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.listSearchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCrmV3ListsListIdRestoreRestoreRequest struct {
	ctx context.Context
	ApiService *ListsAPIService
	listId string
}

func (r ApiPutCrmV3ListsListIdRestoreRestoreRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutCrmV3ListsListIdRestoreRestoreExecute(r)
}

/*
PutCrmV3ListsListIdRestoreRestore Restore a List

Restore a previously deleted list by **ILS list ID**. Deleted lists are eligible to be restored up-to 90-days after the list has been deleted.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param listId The **ILS ID** of the list to restore.
 @return ApiPutCrmV3ListsListIdRestoreRestoreRequest
*/
func (a *ListsAPIService) PutCrmV3ListsListIdRestoreRestore(ctx context.Context, listId string) ApiPutCrmV3ListsListIdRestoreRestoreRequest {
	return ApiPutCrmV3ListsListIdRestoreRestoreRequest{
		ApiService: a,
		ctx: ctx,
		listId: listId,
	}
}

// Execute executes the request
func (a *ListsAPIService) PutCrmV3ListsListIdRestoreRestoreExecute(r ApiPutCrmV3ListsListIdRestoreRestoreRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ListsAPIService.PutCrmV3ListsListIdRestoreRestore")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/lists/{listId}/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"listId"+"}", url.PathEscape(parameterValueToString(r.listId, "listId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersRequest struct {
	ctx context.Context
	ApiService *ListsAPIService
	listId string
	listFilterUpdateRequest *ListFilterUpdateRequest
	enrollObjectsInWorkflows *bool
}

func (r ApiPutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersRequest) ListFilterUpdateRequest(listFilterUpdateRequest ListFilterUpdateRequest) ApiPutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersRequest {
	r.listFilterUpdateRequest = &listFilterUpdateRequest
	return r
}

// A flag indicating whether or not the memberships added to the list as a result of the filter change should be enrolled in workflows that are relevant to this list.
func (r ApiPutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersRequest) EnrollObjectsInWorkflows(enrollObjectsInWorkflows bool) ApiPutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersRequest {
	r.enrollObjectsInWorkflows = &enrollObjectsInWorkflows
	return r
}

func (r ApiPutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersRequest) Execute() (*ListUpdateResponse, *http.Response, error) {
	return r.ApiService.PutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersExecute(r)
}

/*
PutCrmV3ListsListIdUpdateListFiltersUpdateListFilters Update List Filter Definition

Update the filter branch definition of a `DYNAMIC` list. Once updated, the list memberships will be re-evaluated and updated to match the new definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param listId The **ILS ID** of the list to update.
 @return ApiPutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersRequest
*/
func (a *ListsAPIService) PutCrmV3ListsListIdUpdateListFiltersUpdateListFilters(ctx context.Context, listId string) ApiPutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersRequest {
	return ApiPutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersRequest{
		ApiService: a,
		ctx: ctx,
		listId: listId,
	}
}

// Execute executes the request
//  @return ListUpdateResponse
func (a *ListsAPIService) PutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersExecute(r ApiPutCrmV3ListsListIdUpdateListFiltersUpdateListFiltersRequest) (*ListUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ListsAPIService.PutCrmV3ListsListIdUpdateListFiltersUpdateListFilters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/lists/{listId}/update-list-filters"
	localVarPath = strings.Replace(localVarPath, "{"+"listId"+"}", url.PathEscape(parameterValueToString(r.listId, "listId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.listFilterUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("listFilterUpdateRequest is required and must be specified")
	}

	if r.enrollObjectsInWorkflows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollObjectsInWorkflows", r.enrollObjectsInWorkflows, "form", "")
	} else {
		var defaultValue bool = false
		r.enrollObjectsInWorkflows = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.listFilterUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCrmV3ListsListIdUpdateListNameUpdateNameRequest struct {
	ctx context.Context
	ApiService *ListsAPIService
	listId string
	listName *string
	includeFilters *bool
}

// The name to update the list to.
func (r ApiPutCrmV3ListsListIdUpdateListNameUpdateNameRequest) ListName(listName string) ApiPutCrmV3ListsListIdUpdateListNameUpdateNameRequest {
	r.listName = &listName
	return r
}

// A flag indicating whether or not the response object list definition should include a filter branch definition. By default, object list definitions will not have their filter branch definitions included in the response.
func (r ApiPutCrmV3ListsListIdUpdateListNameUpdateNameRequest) IncludeFilters(includeFilters bool) ApiPutCrmV3ListsListIdUpdateListNameUpdateNameRequest {
	r.includeFilters = &includeFilters
	return r
}

func (r ApiPutCrmV3ListsListIdUpdateListNameUpdateNameRequest) Execute() (*ListUpdateResponse, *http.Response, error) {
	return r.ApiService.PutCrmV3ListsListIdUpdateListNameUpdateNameExecute(r)
}

/*
PutCrmV3ListsListIdUpdateListNameUpdateName Update List Name

Update the name of a list. The name must be globally unique relative to all other public lists in the portal.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param listId The **ILS ID** of the list to update.
 @return ApiPutCrmV3ListsListIdUpdateListNameUpdateNameRequest
*/
func (a *ListsAPIService) PutCrmV3ListsListIdUpdateListNameUpdateName(ctx context.Context, listId string) ApiPutCrmV3ListsListIdUpdateListNameUpdateNameRequest {
	return ApiPutCrmV3ListsListIdUpdateListNameUpdateNameRequest{
		ApiService: a,
		ctx: ctx,
		listId: listId,
	}
}

// Execute executes the request
//  @return ListUpdateResponse
func (a *ListsAPIService) PutCrmV3ListsListIdUpdateListNameUpdateNameExecute(r ApiPutCrmV3ListsListIdUpdateListNameUpdateNameRequest) (*ListUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ListsAPIService.PutCrmV3ListsListIdUpdateListNameUpdateName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/lists/{listId}/update-list-name"
	localVarPath = strings.Replace(localVarPath, "{"+"listId"+"}", url.PathEscape(parameterValueToString(r.listId, "listId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.listName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "listName", r.listName, "form", "")
	}
	if r.includeFilters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFilters", r.includeFilters, "form", "")
	} else {
		var defaultValue bool = false
		r.includeFilters = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
