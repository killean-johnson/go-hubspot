/*
Lists

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
)


// MappingAPIService MappingAPI service
type MappingAPIService service

type ApiGetCrmV3ListsIdmappingTranslateLegacyListIdToListIdRequest struct {
	ctx context.Context
	ApiService *MappingAPIService
	legacyListId *string
}

// The legacy list id from lists v1 API.
func (r ApiGetCrmV3ListsIdmappingTranslateLegacyListIdToListIdRequest) LegacyListId(legacyListId string) ApiGetCrmV3ListsIdmappingTranslateLegacyListIdToListIdRequest {
	r.legacyListId = &legacyListId
	return r
}

func (r ApiGetCrmV3ListsIdmappingTranslateLegacyListIdToListIdRequest) Execute() (*PublicMigrationMapping, *http.Response, error) {
	return r.ApiService.GetCrmV3ListsIdmappingTranslateLegacyListIdToListIdExecute(r)
}

/*
GetCrmV3ListsIdmappingTranslateLegacyListIdToListId Translate Legacy List Id to Modern List Id

This API allows translation of legacy list id to list id. This is a temporary API allowed for mapping old id's to new id's and will expire on May 30th, 2025.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCrmV3ListsIdmappingTranslateLegacyListIdToListIdRequest
*/
func (a *MappingAPIService) GetCrmV3ListsIdmappingTranslateLegacyListIdToListId(ctx context.Context) ApiGetCrmV3ListsIdmappingTranslateLegacyListIdToListIdRequest {
	return ApiGetCrmV3ListsIdmappingTranslateLegacyListIdToListIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PublicMigrationMapping
func (a *MappingAPIService) GetCrmV3ListsIdmappingTranslateLegacyListIdToListIdExecute(r ApiGetCrmV3ListsIdmappingTranslateLegacyListIdToListIdRequest) (*PublicMigrationMapping, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicMigrationMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MappingAPIService.GetCrmV3ListsIdmappingTranslateLegacyListIdToListId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/lists/idmapping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.legacyListId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "legacyListId", r.legacyListId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatchRequest struct {
	ctx context.Context
	ApiService *MappingAPIService
	requestBody *[]string
}

func (r ApiPostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatchRequest) RequestBody(requestBody []string) ApiPostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatchRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiPostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatchRequest) Execute() (*PublicBatchMigrationMapping, *http.Response, error) {
	return r.ApiService.PostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatchExecute(r)
}

/*
PostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatch Translate Legacy List Id to Modern List Id in Batch

This API allows translation of a batch of legacy list id's to list id's. This allows for a maximum of 10,000 id's. This is a temporary API allowed for mapping old id's to new id's and will expire on May 30th, 2025.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatchRequest
*/
func (a *MappingAPIService) PostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatch(ctx context.Context) ApiPostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatchRequest {
	return ApiPostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PublicBatchMigrationMapping
func (a *MappingAPIService) PostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatchExecute(r ApiPostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatchRequest) (*PublicBatchMigrationMapping, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicBatchMigrationMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MappingAPIService.PostCrmV3ListsIdmappingTranslateLegacyListIdToListIdBatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/lists/idmapping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
