/*
Lists

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
)

// checks if the ListSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListSearchRequest{}

// ListSearchRequest struct for ListSearchRequest
type ListSearchRequest struct {
	// The `listIds` that will be used to filter results by `listId`. If values are provided, then the response will only include results that have a `listId` in this array.  If no value is provided, or if an empty list is provided, then the results will not be filtered by `listId`.
	ListIds []string `json:"listIds,omitempty"`
	// Value used to paginate through lists. The `offset` provided in the response can be used in the next request to fetch the next page of results. Defaults to `0` if no offset is provided.
	Offset *int32 `json:"offset,omitempty"`
	// The `query` that will be used to search for lists by list name. If no `query` is provided, then the results will include all lists.
	Query *string `json:"query,omitempty"`
	// The number of lists to include in the response. Defaults to `20` if no value is provided. The max `count` is `500`.
	Count *int32 `json:"count,omitempty"`
	// The `processingTypes` that will be used to filter results by `processingType`. If values are provided, then the response will only include results that have a `processingType` in this array.  If no value is provided, or if an empty list is provided, then results will not be filtered by `processingType`.  Valid `processingTypes` are: `MANUAL`, `SNAPSHOT`, or `DYNAMIC`.
	ProcessingTypes []string `json:"processingTypes,omitempty"`
	// The property names of any additional list properties to include in the response. Properties that do not exist or that are empty for a particular list are not included in the response.  By default, all requests will fetch the following properties for each list: `hs_list_size`, `hs_last_record_added_at`, `hs_last_record_removed_at`, `hs_folder_name`, and `hs_list_reference_count`.
	AdditionalPropertiesField []string `json:"additionalProperties,omitempty"`
	Sort *string `json:"sort,omitempty"`
}

// NewListSearchRequest instantiates a new ListSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSearchRequest() *ListSearchRequest {
	this := ListSearchRequest{}
	return &this
}

// NewListSearchRequestWithDefaults instantiates a new ListSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSearchRequestWithDefaults() *ListSearchRequest {
	this := ListSearchRequest{}
	return &this
}

// GetListIds returns the ListIds field value if set, zero value otherwise.
func (o *ListSearchRequest) GetListIds() []string {
	if o == nil || IsNil(o.ListIds) {
		var ret []string
		return ret
	}
	return o.ListIds
}

// GetListIdsOk returns a tuple with the ListIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSearchRequest) GetListIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ListIds) {
		return nil, false
	}
	return o.ListIds, true
}

// HasListIds returns a boolean if a field has been set.
func (o *ListSearchRequest) HasListIds() bool {
	if o != nil && !IsNil(o.ListIds) {
		return true
	}

	return false
}

// SetListIds gets a reference to the given []string and assigns it to the ListIds field.
func (o *ListSearchRequest) SetListIds(v []string) {
	o.ListIds = v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ListSearchRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSearchRequest) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ListSearchRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *ListSearchRequest) SetOffset(v int32) {
	o.Offset = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *ListSearchRequest) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSearchRequest) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *ListSearchRequest) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *ListSearchRequest) SetQuery(v string) {
	o.Query = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ListSearchRequest) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSearchRequest) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ListSearchRequest) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ListSearchRequest) SetCount(v int32) {
	o.Count = &v
}

// GetProcessingTypes returns the ProcessingTypes field value if set, zero value otherwise.
func (o *ListSearchRequest) GetProcessingTypes() []string {
	if o == nil || IsNil(o.ProcessingTypes) {
		var ret []string
		return ret
	}
	return o.ProcessingTypes
}

// GetProcessingTypesOk returns a tuple with the ProcessingTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSearchRequest) GetProcessingTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessingTypes) {
		return nil, false
	}
	return o.ProcessingTypes, true
}

// HasProcessingTypes returns a boolean if a field has been set.
func (o *ListSearchRequest) HasProcessingTypes() bool {
	if o != nil && !IsNil(o.ProcessingTypes) {
		return true
	}

	return false
}

// SetProcessingTypes gets a reference to the given []string and assigns it to the ProcessingTypes field.
func (o *ListSearchRequest) SetProcessingTypes(v []string) {
	o.ProcessingTypes = v
}

// GetAdditionalPropertiesField returns the AdditionalPropertiesField field value if set, zero value otherwise.
func (o *ListSearchRequest) GetAdditionalPropertiesField() []string {
	if o == nil || IsNil(o.AdditionalPropertiesField) {
		var ret []string
		return ret
	}
	return o.AdditionalPropertiesField
}

// GetAdditionalPropertiesFieldOk returns a tuple with the AdditionalPropertiesField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSearchRequest) GetAdditionalPropertiesFieldOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalPropertiesField) {
		return nil, false
	}
	return o.AdditionalPropertiesField, true
}

// HasAdditionalPropertiesField returns a boolean if a field has been set.
func (o *ListSearchRequest) HasAdditionalPropertiesField() bool {
	if o != nil && !IsNil(o.AdditionalPropertiesField) {
		return true
	}

	return false
}

// SetAdditionalPropertiesField gets a reference to the given []string and assigns it to the AdditionalPropertiesField field.
func (o *ListSearchRequest) SetAdditionalPropertiesField(v []string) {
	o.AdditionalPropertiesField = v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *ListSearchRequest) GetSort() string {
	if o == nil || IsNil(o.Sort) {
		var ret string
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSearchRequest) GetSortOk() (*string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *ListSearchRequest) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given string and assigns it to the Sort field.
func (o *ListSearchRequest) SetSort(v string) {
	o.Sort = &v
}

func (o ListSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ListIds) {
		toSerialize["listIds"] = o.ListIds
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.ProcessingTypes) {
		toSerialize["processingTypes"] = o.ProcessingTypes
	}
	if !IsNil(o.AdditionalPropertiesField) {
		toSerialize["additionalProperties"] = o.AdditionalPropertiesField
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	return toSerialize, nil
}

type NullableListSearchRequest struct {
	value *ListSearchRequest
	isSet bool
}

func (v NullableListSearchRequest) Get() *ListSearchRequest {
	return v.value
}

func (v *NullableListSearchRequest) Set(val *ListSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableListSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableListSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSearchRequest(val *ListSearchRequest) *NullableListSearchRequest {
	return &NullableListSearchRequest{value: val, isSet: true}
}

func (v NullableListSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


