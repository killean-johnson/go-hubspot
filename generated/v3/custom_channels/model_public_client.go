/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicClient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicClient{}

// PublicClient struct for PublicClient
type PublicClient struct {
	ClientType string `json:"clientType"`
	IntegrationAppId *int32 `json:"integrationAppId,omitempty"`
}

type _PublicClient PublicClient

// NewPublicClient instantiates a new PublicClient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicClient(clientType string) *PublicClient {
	this := PublicClient{}
	this.ClientType = clientType
	return &this
}

// NewPublicClientWithDefaults instantiates a new PublicClient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicClientWithDefaults() *PublicClient {
	this := PublicClient{}
	return &this
}

// GetClientType returns the ClientType field value
func (o *PublicClient) GetClientType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientType
}

// GetClientTypeOk returns a tuple with the ClientType field value
// and a boolean to check if the value has been set.
func (o *PublicClient) GetClientTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientType, true
}

// SetClientType sets field value
func (o *PublicClient) SetClientType(v string) {
	o.ClientType = v
}

// GetIntegrationAppId returns the IntegrationAppId field value if set, zero value otherwise.
func (o *PublicClient) GetIntegrationAppId() int32 {
	if o == nil || IsNil(o.IntegrationAppId) {
		var ret int32
		return ret
	}
	return *o.IntegrationAppId
}

// GetIntegrationAppIdOk returns a tuple with the IntegrationAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicClient) GetIntegrationAppIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IntegrationAppId) {
		return nil, false
	}
	return o.IntegrationAppId, true
}

// HasIntegrationAppId returns a boolean if a field has been set.
func (o *PublicClient) HasIntegrationAppId() bool {
	if o != nil && !IsNil(o.IntegrationAppId) {
		return true
	}

	return false
}

// SetIntegrationAppId gets a reference to the given int32 and assigns it to the IntegrationAppId field.
func (o *PublicClient) SetIntegrationAppId(v int32) {
	o.IntegrationAppId = &v
}

func (o PublicClient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicClient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clientType"] = o.ClientType
	if !IsNil(o.IntegrationAppId) {
		toSerialize["integrationAppId"] = o.IntegrationAppId
	}
	return toSerialize, nil
}

func (o *PublicClient) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clientType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicClient := _PublicClient{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicClient)

	if err != nil {
		return err
	}

	*o = PublicClient(varPublicClient)

	return err
}

type NullablePublicClient struct {
	value *PublicClient
	isSet bool
}

func (v NullablePublicClient) Get() *PublicClient {
	return v.value
}

func (v *NullablePublicClient) Set(val *PublicClient) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicClient) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicClient(val *PublicClient) *NullablePublicClient {
	return &NullablePublicClient{value: val, isSet: true}
}

func (v NullablePublicClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


