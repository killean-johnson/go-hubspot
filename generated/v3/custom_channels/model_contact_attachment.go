/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContactAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactAttachment{}

// ContactAttachment struct for ContactAttachment
type ContactAttachment struct {
	Type string `json:"type"`
	ContactProfile ContactProfile `json:"contactProfile"`
}

type _ContactAttachment ContactAttachment

// NewContactAttachment instantiates a new ContactAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactAttachment(type_ string, contactProfile ContactProfile) *ContactAttachment {
	this := ContactAttachment{}
	this.Type = type_
	this.ContactProfile = contactProfile
	return &this
}

// NewContactAttachmentWithDefaults instantiates a new ContactAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactAttachmentWithDefaults() *ContactAttachment {
	this := ContactAttachment{}
	var type_ string = "CONTACT"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *ContactAttachment) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContactAttachment) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContactAttachment) SetType(v string) {
	o.Type = v
}

// GetContactProfile returns the ContactProfile field value
func (o *ContactAttachment) GetContactProfile() ContactProfile {
	if o == nil {
		var ret ContactProfile
		return ret
	}

	return o.ContactProfile
}

// GetContactProfileOk returns a tuple with the ContactProfile field value
// and a boolean to check if the value has been set.
func (o *ContactAttachment) GetContactProfileOk() (*ContactProfile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContactProfile, true
}

// SetContactProfile sets field value
func (o *ContactAttachment) SetContactProfile(v ContactProfile) {
	o.ContactProfile = v
}

func (o ContactAttachment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["contactProfile"] = o.ContactProfile
	return toSerialize, nil
}

func (o *ContactAttachment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"contactProfile",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactAttachment := _ContactAttachment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactAttachment)

	if err != nil {
		return err
	}

	*o = ContactAttachment(varContactAttachment)

	return err
}

type NullableContactAttachment struct {
	value *ContactAttachment
	isSet bool
}

func (v NullableContactAttachment) Get() *ContactAttachment {
	return v.value
}

func (v *NullableContactAttachment) Set(val *ContactAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableContactAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableContactAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactAttachment(val *ContactAttachment) *NullableContactAttachment {
	return &NullableContactAttachment{value: val, isSet: true}
}

func (v NullableContactAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


