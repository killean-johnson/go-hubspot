/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// ChannelAccountStagingTokensAPIService ChannelAccountStagingTokensAPI service
type ChannelAccountStagingTokensAPIService service

type ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountTokenRequest struct {
	ctx context.Context
	ApiService *ChannelAccountStagingTokensAPIService
	channelId int32
	accountToken string
	publicChannelAccountStagingTokenUpdateRequest *PublicChannelAccountStagingTokenUpdateRequest
}

func (r ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountTokenRequest) PublicChannelAccountStagingTokenUpdateRequest(publicChannelAccountStagingTokenUpdateRequest PublicChannelAccountStagingTokenUpdateRequest) ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountTokenRequest {
	r.publicChannelAccountStagingTokenUpdateRequest = &publicChannelAccountStagingTokenUpdateRequest
	return r
}

func (r ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountTokenRequest) Execute() (*PublicChannelAccountStagingToken, *http.Response, error) {
	return r.ApiService.PatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountTokenExecute(r)
}

/*
PatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountToken Update a channel account staging token

This API is used for integrators creating public apps. Use this API to update a channel account staging token's account name and delivery identifier. This information will be applied to the channel account created from this staging token.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId
 @param accountToken
 @return ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountTokenRequest
*/
func (a *ChannelAccountStagingTokensAPIService) PatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountToken(ctx context.Context, channelId int32, accountToken string) ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountTokenRequest {
	return ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountTokenRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
		accountToken: accountToken,
	}
}

// Execute executes the request
//  @return PublicChannelAccountStagingToken
func (a *ChannelAccountStagingTokensAPIService) PatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountTokenExecute(r ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountTokenRequest) (*PublicChannelAccountStagingToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicChannelAccountStagingToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelAccountStagingTokensAPIService.PatchConversationsV3CustomChannelsChannelIdChannelAccountStagingTokensAccountToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversations/v3/custom-channels/{channelId}/channel-account-staging-tokens/{accountToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"channelId"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountToken"+"}", url.PathEscape(parameterValueToString(r.accountToken, "accountToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.publicChannelAccountStagingTokenUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("publicChannelAccountStagingTokenUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.publicChannelAccountStagingTokenUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
