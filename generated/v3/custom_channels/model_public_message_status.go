/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicMessageStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicMessageStatus{}

// PublicMessageStatus struct for PublicMessageStatus
type PublicMessageStatus struct {
	StatusType string `json:"statusType"`
	FailureDetails *PublicMessageFailureDetails `json:"failureDetails,omitempty"`
}

type _PublicMessageStatus PublicMessageStatus

// NewPublicMessageStatus instantiates a new PublicMessageStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicMessageStatus(statusType string) *PublicMessageStatus {
	this := PublicMessageStatus{}
	this.StatusType = statusType
	return &this
}

// NewPublicMessageStatusWithDefaults instantiates a new PublicMessageStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicMessageStatusWithDefaults() *PublicMessageStatus {
	this := PublicMessageStatus{}
	return &this
}

// GetStatusType returns the StatusType field value
func (o *PublicMessageStatus) GetStatusType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusType
}

// GetStatusTypeOk returns a tuple with the StatusType field value
// and a boolean to check if the value has been set.
func (o *PublicMessageStatus) GetStatusTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusType, true
}

// SetStatusType sets field value
func (o *PublicMessageStatus) SetStatusType(v string) {
	o.StatusType = v
}

// GetFailureDetails returns the FailureDetails field value if set, zero value otherwise.
func (o *PublicMessageStatus) GetFailureDetails() PublicMessageFailureDetails {
	if o == nil || IsNil(o.FailureDetails) {
		var ret PublicMessageFailureDetails
		return ret
	}
	return *o.FailureDetails
}

// GetFailureDetailsOk returns a tuple with the FailureDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMessageStatus) GetFailureDetailsOk() (*PublicMessageFailureDetails, bool) {
	if o == nil || IsNil(o.FailureDetails) {
		return nil, false
	}
	return o.FailureDetails, true
}

// HasFailureDetails returns a boolean if a field has been set.
func (o *PublicMessageStatus) HasFailureDetails() bool {
	if o != nil && !IsNil(o.FailureDetails) {
		return true
	}

	return false
}

// SetFailureDetails gets a reference to the given PublicMessageFailureDetails and assigns it to the FailureDetails field.
func (o *PublicMessageStatus) SetFailureDetails(v PublicMessageFailureDetails) {
	o.FailureDetails = &v
}

func (o PublicMessageStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicMessageStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["statusType"] = o.StatusType
	if !IsNil(o.FailureDetails) {
		toSerialize["failureDetails"] = o.FailureDetails
	}
	return toSerialize, nil
}

func (o *PublicMessageStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"statusType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicMessageStatus := _PublicMessageStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicMessageStatus)

	if err != nil {
		return err
	}

	*o = PublicMessageStatus(varPublicMessageStatus)

	return err
}

type NullablePublicMessageStatus struct {
	value *PublicMessageStatus
	isSet bool
}

func (v NullablePublicMessageStatus) Get() *PublicMessageStatus {
	return v.value
}

func (v *NullablePublicMessageStatus) Set(val *PublicMessageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicMessageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicMessageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicMessageStatus(val *PublicMessageStatus) *NullablePublicMessageStatus {
	return &NullablePublicMessageStatus{value: val, isSet: true}
}

func (v NullablePublicMessageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicMessageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


