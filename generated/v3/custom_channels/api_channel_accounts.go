/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
	"reflect"
)


// ChannelAccountsAPIService ChannelAccountsAPI service
type ChannelAccountsAPIService service

type ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest struct {
	ctx context.Context
	ApiService *ChannelAccountsAPIService
	channelId int32
	deliveryIdentifierType *[]string
	deliveryIdentifierValue *[]string
	after *string
	limit *int32
	sort *[]string
	defaultPageLength *int32
	archived *bool
}

// 
func (r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest) DeliveryIdentifierType(deliveryIdentifierType []string) ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest {
	r.deliveryIdentifierType = &deliveryIdentifierType
	return r
}

// 
func (r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest) DeliveryIdentifierValue(deliveryIdentifierValue []string) ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest {
	r.deliveryIdentifierValue = &deliveryIdentifierValue
	return r
}

// 
func (r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest) After(after string) ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest {
	r.after = &after
	return r
}

// 
func (r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest) Limit(limit int32) ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest {
	r.limit = &limit
	return r
}

// 
func (r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest) Sort(sort []string) ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest {
	r.sort = &sort
	return r
}

// 
func (r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest) DefaultPageLength(defaultPageLength int32) ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest {
	r.defaultPageLength = &defaultPageLength
	return r
}

// 
func (r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest) Archived(archived bool) ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest {
	r.archived = &archived
	return r
}

func (r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest) Execute() (*CollectionResponseWithTotalPublicChannelAccountForwardPaging, *http.Response, error) {
	return r.ApiService.GetConversationsV3CustomChannelsChannelIdChannelAccountsExecute(r)
}

/*
GetConversationsV3CustomChannelsChannelIdChannelAccounts Query channel accounts

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId 
 @return ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest
*/
func (a *ChannelAccountsAPIService) GetConversationsV3CustomChannelsChannelIdChannelAccounts(ctx context.Context, channelId int32) ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest {
	return ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
	}
}

// Execute executes the request
//  @return CollectionResponseWithTotalPublicChannelAccountForwardPaging
func (a *ChannelAccountsAPIService) GetConversationsV3CustomChannelsChannelIdChannelAccountsExecute(r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsRequest) (*CollectionResponseWithTotalPublicChannelAccountForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseWithTotalPublicChannelAccountForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelAccountsAPIService.GetConversationsV3CustomChannelsChannelIdChannelAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversations/v3/custom-channels/{channelId}/channel-accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"channelId"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deliveryIdentifierType != nil {
		t := *r.deliveryIdentifierType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "deliveryIdentifierType", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "deliveryIdentifierType", t, "form", "multi")
		}
	}
	if r.deliveryIdentifierValue != nil {
		t := *r.deliveryIdentifierValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "deliveryIdentifierValue", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "deliveryIdentifierValue", t, "form", "multi")
		}
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.defaultPageLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultPageLength", r.defaultPageLength, "form", "")
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest struct {
	ctx context.Context
	ApiService *ChannelAccountsAPIService
	channelId int32
	channelAccountId int64
	archived *bool
}

// 
func (r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest) Archived(archived bool) ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest {
	r.archived = &archived
	return r
}

func (r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest) Execute() (*PublicChannelAccount, *http.Response, error) {
	return r.ApiService.GetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdExecute(r)
}

/*
GetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountId Get a channel account by id

Retrieve a PublicChannelAccount that contains all the metadata about your channel account. This includes information like its channel, associated inbox id, and delivery identifier information.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId 
 @param channelAccountId 
 @return ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest
*/
func (a *ChannelAccountsAPIService) GetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountId(ctx context.Context, channelId int32, channelAccountId int64) ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest {
	return ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
		channelAccountId: channelAccountId,
	}
}

// Execute executes the request
//  @return PublicChannelAccount
func (a *ChannelAccountsAPIService) GetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdExecute(r ApiGetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest) (*PublicChannelAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicChannelAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelAccountsAPIService.GetConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversations/v3/custom-channels/{channelId}/channel-accounts/{channelAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"channelId"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"channelAccountId"+"}", url.PathEscape(parameterValueToString(r.channelAccountId, "channelAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	} else {
		var defaultValue bool = false
		r.archived = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest struct {
	ctx context.Context
	ApiService *ChannelAccountsAPIService
	channelId int32
	channelAccountId int64
	publicChannelAccountUpdateRequest *PublicChannelAccountUpdateRequest
}

func (r ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest) PublicChannelAccountUpdateRequest(publicChannelAccountUpdateRequest PublicChannelAccountUpdateRequest) ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest {
	r.publicChannelAccountUpdateRequest = &publicChannelAccountUpdateRequest
	return r
}

func (r ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest) Execute() (*PublicChannelAccount, *http.Response, error) {
	return r.ApiService.PatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdExecute(r)
}

/*
PatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountId Update a channel account

This API is used to update the name of the channel account and it's isAuthorized status. Setting to isAuthorized flag to False disables the channel account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId The channel to update
 @param channelAccountId The channel account to update
 @return ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest
*/
func (a *ChannelAccountsAPIService) PatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountId(ctx context.Context, channelId int32, channelAccountId int64) ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest {
	return ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
		channelAccountId: channelAccountId,
	}
}

// Execute executes the request
//  @return PublicChannelAccount
func (a *ChannelAccountsAPIService) PatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdExecute(r ApiPatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountIdRequest) (*PublicChannelAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicChannelAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelAccountsAPIService.PatchConversationsV3CustomChannelsChannelIdChannelAccountsChannelAccountId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversations/v3/custom-channels/{channelId}/channel-accounts/{channelAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"channelId"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"channelAccountId"+"}", url.PathEscape(parameterValueToString(r.channelAccountId, "channelAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.publicChannelAccountUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("publicChannelAccountUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.publicChannelAccountUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostConversationsV3CustomChannelsChannelIdChannelAccountsRequest struct {
	ctx context.Context
	ApiService *ChannelAccountsAPIService
	channelId int32
	publicChannelAccountEgg *PublicChannelAccountEgg
}

func (r ApiPostConversationsV3CustomChannelsChannelIdChannelAccountsRequest) PublicChannelAccountEgg(publicChannelAccountEgg PublicChannelAccountEgg) ApiPostConversationsV3CustomChannelsChannelIdChannelAccountsRequest {
	r.publicChannelAccountEgg = &publicChannelAccountEgg
	return r
}

func (r ApiPostConversationsV3CustomChannelsChannelIdChannelAccountsRequest) Execute() (*PublicChannelAccount, *http.Response, error) {
	return r.ApiService.PostConversationsV3CustomChannelsChannelIdChannelAccountsExecute(r)
}

/*
PostConversationsV3CustomChannelsChannelIdChannelAccounts Create a channel account

This API allows you to create one or more accounts that all talk over a single channel but using different delivery identifiers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId 
 @return ApiPostConversationsV3CustomChannelsChannelIdChannelAccountsRequest
*/
func (a *ChannelAccountsAPIService) PostConversationsV3CustomChannelsChannelIdChannelAccounts(ctx context.Context, channelId int32) ApiPostConversationsV3CustomChannelsChannelIdChannelAccountsRequest {
	return ApiPostConversationsV3CustomChannelsChannelIdChannelAccountsRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
	}
}

// Execute executes the request
//  @return PublicChannelAccount
func (a *ChannelAccountsAPIService) PostConversationsV3CustomChannelsChannelIdChannelAccountsExecute(r ApiPostConversationsV3CustomChannelsChannelIdChannelAccountsRequest) (*PublicChannelAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicChannelAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelAccountsAPIService.PostConversationsV3CustomChannelsChannelIdChannelAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversations/v3/custom-channels/{channelId}/channel-accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"channelId"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.publicChannelAccountEgg == nil {
		return localVarReturnValue, nil, reportError("publicChannelAccountEgg is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.publicChannelAccountEgg
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
