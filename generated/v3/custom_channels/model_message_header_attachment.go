/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageHeaderAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageHeaderAttachment{}

// MessageHeaderAttachment struct for MessageHeaderAttachment
type MessageHeaderAttachment struct {
	Text *string `json:"text,omitempty"`
	Type string `json:"type"`
	FileId *int64 `json:"fileId,omitempty"`
}

type _MessageHeaderAttachment MessageHeaderAttachment

// NewMessageHeaderAttachment instantiates a new MessageHeaderAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageHeaderAttachment(type_ string) *MessageHeaderAttachment {
	this := MessageHeaderAttachment{}
	this.Type = type_
	return &this
}

// NewMessageHeaderAttachmentWithDefaults instantiates a new MessageHeaderAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageHeaderAttachmentWithDefaults() *MessageHeaderAttachment {
	this := MessageHeaderAttachment{}
	var type_ string = "MESSAGE_HEADER"
	this.Type = type_
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MessageHeaderAttachment) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeaderAttachment) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MessageHeaderAttachment) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *MessageHeaderAttachment) SetText(v string) {
	o.Text = &v
}

// GetType returns the Type field value
func (o *MessageHeaderAttachment) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageHeaderAttachment) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageHeaderAttachment) SetType(v string) {
	o.Type = v
}

// GetFileId returns the FileId field value if set, zero value otherwise.
func (o *MessageHeaderAttachment) GetFileId() int64 {
	if o == nil || IsNil(o.FileId) {
		var ret int64
		return ret
	}
	return *o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeaderAttachment) GetFileIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FileId) {
		return nil, false
	}
	return o.FileId, true
}

// HasFileId returns a boolean if a field has been set.
func (o *MessageHeaderAttachment) HasFileId() bool {
	if o != nil && !IsNil(o.FileId) {
		return true
	}

	return false
}

// SetFileId gets a reference to the given int64 and assigns it to the FileId field.
func (o *MessageHeaderAttachment) SetFileId(v int64) {
	o.FileId = &v
}

func (o MessageHeaderAttachment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageHeaderAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.FileId) {
		toSerialize["fileId"] = o.FileId
	}
	return toSerialize, nil
}

func (o *MessageHeaderAttachment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageHeaderAttachment := _MessageHeaderAttachment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageHeaderAttachment)

	if err != nil {
		return err
	}

	*o = MessageHeaderAttachment(varMessageHeaderAttachment)

	return err
}

type NullableMessageHeaderAttachment struct {
	value *MessageHeaderAttachment
	isSet bool
}

func (v NullableMessageHeaderAttachment) Get() *MessageHeaderAttachment {
	return v.value
}

func (v *NullableMessageHeaderAttachment) Set(val *MessageHeaderAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageHeaderAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageHeaderAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageHeaderAttachment(val *MessageHeaderAttachment) *NullableMessageHeaderAttachment {
	return &NullableMessageHeaderAttachment{value: val, isSet: true}
}

func (v NullableMessageHeaderAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageHeaderAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


