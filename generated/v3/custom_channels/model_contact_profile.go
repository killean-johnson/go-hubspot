/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContactProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactProfile{}

// ContactProfile struct for ContactProfile
type ContactProfile struct {
	Emails []ContactEmail `json:"emails"`
	Addresses []ContactAddress `json:"addresses"`
	Urls []ContactUrl `json:"urls"`
	Org *ContactOrg `json:"org,omitempty"`
	Name *ContactName `json:"name,omitempty"`
	Phones []ContactPhone `json:"phones"`
}

type _ContactProfile ContactProfile

// NewContactProfile instantiates a new ContactProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactProfile(emails []ContactEmail, addresses []ContactAddress, urls []ContactUrl, phones []ContactPhone) *ContactProfile {
	this := ContactProfile{}
	this.Emails = emails
	this.Addresses = addresses
	this.Urls = urls
	this.Phones = phones
	return &this
}

// NewContactProfileWithDefaults instantiates a new ContactProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactProfileWithDefaults() *ContactProfile {
	this := ContactProfile{}
	return &this
}

// GetEmails returns the Emails field value
func (o *ContactProfile) GetEmails() []ContactEmail {
	if o == nil {
		var ret []ContactEmail
		return ret
	}

	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value
// and a boolean to check if the value has been set.
func (o *ContactProfile) GetEmailsOk() ([]ContactEmail, bool) {
	if o == nil {
		return nil, false
	}
	return o.Emails, true
}

// SetEmails sets field value
func (o *ContactProfile) SetEmails(v []ContactEmail) {
	o.Emails = v
}

// GetAddresses returns the Addresses field value
func (o *ContactProfile) GetAddresses() []ContactAddress {
	if o == nil {
		var ret []ContactAddress
		return ret
	}

	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value
// and a boolean to check if the value has been set.
func (o *ContactProfile) GetAddressesOk() ([]ContactAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.Addresses, true
}

// SetAddresses sets field value
func (o *ContactProfile) SetAddresses(v []ContactAddress) {
	o.Addresses = v
}

// GetUrls returns the Urls field value
func (o *ContactProfile) GetUrls() []ContactUrl {
	if o == nil {
		var ret []ContactUrl
		return ret
	}

	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value
// and a boolean to check if the value has been set.
func (o *ContactProfile) GetUrlsOk() ([]ContactUrl, bool) {
	if o == nil {
		return nil, false
	}
	return o.Urls, true
}

// SetUrls sets field value
func (o *ContactProfile) SetUrls(v []ContactUrl) {
	o.Urls = v
}

// GetOrg returns the Org field value if set, zero value otherwise.
func (o *ContactProfile) GetOrg() ContactOrg {
	if o == nil || IsNil(o.Org) {
		var ret ContactOrg
		return ret
	}
	return *o.Org
}

// GetOrgOk returns a tuple with the Org field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactProfile) GetOrgOk() (*ContactOrg, bool) {
	if o == nil || IsNil(o.Org) {
		return nil, false
	}
	return o.Org, true
}

// HasOrg returns a boolean if a field has been set.
func (o *ContactProfile) HasOrg() bool {
	if o != nil && !IsNil(o.Org) {
		return true
	}

	return false
}

// SetOrg gets a reference to the given ContactOrg and assigns it to the Org field.
func (o *ContactProfile) SetOrg(v ContactOrg) {
	o.Org = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContactProfile) GetName() ContactName {
	if o == nil || IsNil(o.Name) {
		var ret ContactName
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactProfile) GetNameOk() (*ContactName, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContactProfile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given ContactName and assigns it to the Name field.
func (o *ContactProfile) SetName(v ContactName) {
	o.Name = &v
}

// GetPhones returns the Phones field value
func (o *ContactProfile) GetPhones() []ContactPhone {
	if o == nil {
		var ret []ContactPhone
		return ret
	}

	return o.Phones
}

// GetPhonesOk returns a tuple with the Phones field value
// and a boolean to check if the value has been set.
func (o *ContactProfile) GetPhonesOk() ([]ContactPhone, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phones, true
}

// SetPhones sets field value
func (o *ContactProfile) SetPhones(v []ContactPhone) {
	o.Phones = v
}

func (o ContactProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["emails"] = o.Emails
	toSerialize["addresses"] = o.Addresses
	toSerialize["urls"] = o.Urls
	if !IsNil(o.Org) {
		toSerialize["org"] = o.Org
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["phones"] = o.Phones
	return toSerialize, nil
}

func (o *ContactProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"emails",
		"addresses",
		"urls",
		"phones",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactProfile := _ContactProfile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactProfile)

	if err != nil {
		return err
	}

	*o = ContactProfile(varContactProfile)

	return err
}

type NullableContactProfile struct {
	value *ContactProfile
	isSet bool
}

func (v NullableContactProfile) Get() *ContactProfile {
	return v.value
}

func (v *NullableContactProfile) Set(val *ContactProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableContactProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableContactProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactProfile(val *ContactProfile) *NullableContactProfile {
	return &NullableContactProfile{value: val, isSet: true}
}

func (v NullableContactProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


