/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FileAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileAttachment{}

// FileAttachment struct for FileAttachment
type FileAttachment struct {
	FileUsageType *string `json:"fileUsageType,omitempty"`
	Type string `json:"type"`
	FileId string `json:"fileId"`
}

type _FileAttachment FileAttachment

// NewFileAttachment instantiates a new FileAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileAttachment(type_ string, fileId string) *FileAttachment {
	this := FileAttachment{}
	this.Type = type_
	this.FileId = fileId
	return &this
}

// NewFileAttachmentWithDefaults instantiates a new FileAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileAttachmentWithDefaults() *FileAttachment {
	this := FileAttachment{}
	var type_ string = "FILE"
	this.Type = type_
	return &this
}

// GetFileUsageType returns the FileUsageType field value if set, zero value otherwise.
func (o *FileAttachment) GetFileUsageType() string {
	if o == nil || IsNil(o.FileUsageType) {
		var ret string
		return ret
	}
	return *o.FileUsageType
}

// GetFileUsageTypeOk returns a tuple with the FileUsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileAttachment) GetFileUsageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileUsageType) {
		return nil, false
	}
	return o.FileUsageType, true
}

// HasFileUsageType returns a boolean if a field has been set.
func (o *FileAttachment) HasFileUsageType() bool {
	if o != nil && !IsNil(o.FileUsageType) {
		return true
	}

	return false
}

// SetFileUsageType gets a reference to the given string and assigns it to the FileUsageType field.
func (o *FileAttachment) SetFileUsageType(v string) {
	o.FileUsageType = &v
}

// GetType returns the Type field value
func (o *FileAttachment) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FileAttachment) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FileAttachment) SetType(v string) {
	o.Type = v
}

// GetFileId returns the FileId field value
func (o *FileAttachment) GetFileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value
// and a boolean to check if the value has been set.
func (o *FileAttachment) GetFileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileId, true
}

// SetFileId sets field value
func (o *FileAttachment) SetFileId(v string) {
	o.FileId = v
}

func (o FileAttachment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileUsageType) {
		toSerialize["fileUsageType"] = o.FileUsageType
	}
	toSerialize["type"] = o.Type
	toSerialize["fileId"] = o.FileId
	return toSerialize, nil
}

func (o *FileAttachment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"fileId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileAttachment := _FileAttachment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileAttachment)

	if err != nil {
		return err
	}

	*o = FileAttachment(varFileAttachment)

	return err
}

type NullableFileAttachment struct {
	value *FileAttachment
	isSet bool
}

func (v NullableFileAttachment) Get() *FileAttachment {
	return v.value
}

func (v *NullableFileAttachment) Set(val *FileAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableFileAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableFileAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileAttachment(val *FileAttachment) *NullableFileAttachment {
	return &NullableFileAttachment{value: val, isSet: true}
}

func (v NullableFileAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


