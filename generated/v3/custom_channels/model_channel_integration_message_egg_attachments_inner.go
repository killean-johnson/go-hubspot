/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ChannelIntegrationMessageEggAttachmentsInner - struct for ChannelIntegrationMessageEggAttachmentsInner
type ChannelIntegrationMessageEggAttachmentsInner struct {
	ContactAttachment *ContactAttachment
	FileAttachment *FileAttachment
	LocationAttachment *LocationAttachment
	MessageHeaderAttachment *MessageHeaderAttachment
	QuickRepliesAttachment *QuickRepliesAttachment
	UnsupportedContentAttachment *UnsupportedContentAttachment
}

// ContactAttachmentAsChannelIntegrationMessageEggAttachmentsInner is a convenience function that returns ContactAttachment wrapped in ChannelIntegrationMessageEggAttachmentsInner
func ContactAttachmentAsChannelIntegrationMessageEggAttachmentsInner(v *ContactAttachment) ChannelIntegrationMessageEggAttachmentsInner {
	return ChannelIntegrationMessageEggAttachmentsInner{
		ContactAttachment: v,
	}
}

// FileAttachmentAsChannelIntegrationMessageEggAttachmentsInner is a convenience function that returns FileAttachment wrapped in ChannelIntegrationMessageEggAttachmentsInner
func FileAttachmentAsChannelIntegrationMessageEggAttachmentsInner(v *FileAttachment) ChannelIntegrationMessageEggAttachmentsInner {
	return ChannelIntegrationMessageEggAttachmentsInner{
		FileAttachment: v,
	}
}

// LocationAttachmentAsChannelIntegrationMessageEggAttachmentsInner is a convenience function that returns LocationAttachment wrapped in ChannelIntegrationMessageEggAttachmentsInner
func LocationAttachmentAsChannelIntegrationMessageEggAttachmentsInner(v *LocationAttachment) ChannelIntegrationMessageEggAttachmentsInner {
	return ChannelIntegrationMessageEggAttachmentsInner{
		LocationAttachment: v,
	}
}

// MessageHeaderAttachmentAsChannelIntegrationMessageEggAttachmentsInner is a convenience function that returns MessageHeaderAttachment wrapped in ChannelIntegrationMessageEggAttachmentsInner
func MessageHeaderAttachmentAsChannelIntegrationMessageEggAttachmentsInner(v *MessageHeaderAttachment) ChannelIntegrationMessageEggAttachmentsInner {
	return ChannelIntegrationMessageEggAttachmentsInner{
		MessageHeaderAttachment: v,
	}
}

// QuickRepliesAttachmentAsChannelIntegrationMessageEggAttachmentsInner is a convenience function that returns QuickRepliesAttachment wrapped in ChannelIntegrationMessageEggAttachmentsInner
func QuickRepliesAttachmentAsChannelIntegrationMessageEggAttachmentsInner(v *QuickRepliesAttachment) ChannelIntegrationMessageEggAttachmentsInner {
	return ChannelIntegrationMessageEggAttachmentsInner{
		QuickRepliesAttachment: v,
	}
}

// UnsupportedContentAttachmentAsChannelIntegrationMessageEggAttachmentsInner is a convenience function that returns UnsupportedContentAttachment wrapped in ChannelIntegrationMessageEggAttachmentsInner
func UnsupportedContentAttachmentAsChannelIntegrationMessageEggAttachmentsInner(v *UnsupportedContentAttachment) ChannelIntegrationMessageEggAttachmentsInner {
	return ChannelIntegrationMessageEggAttachmentsInner{
		UnsupportedContentAttachment: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ChannelIntegrationMessageEggAttachmentsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ContactAttachment
	err = newStrictDecoder(data).Decode(&dst.ContactAttachment)
	if err == nil {
		jsonContactAttachment, _ := json.Marshal(dst.ContactAttachment)
		if string(jsonContactAttachment) == "{}" { // empty struct
			dst.ContactAttachment = nil
		} else {
			if err = validator.Validate(dst.ContactAttachment); err != nil {
				dst.ContactAttachment = nil
			} else {
				match++
			}
		}
	} else {
		dst.ContactAttachment = nil
	}

	// try to unmarshal data into FileAttachment
	err = newStrictDecoder(data).Decode(&dst.FileAttachment)
	if err == nil {
		jsonFileAttachment, _ := json.Marshal(dst.FileAttachment)
		if string(jsonFileAttachment) == "{}" { // empty struct
			dst.FileAttachment = nil
		} else {
			if err = validator.Validate(dst.FileAttachment); err != nil {
				dst.FileAttachment = nil
			} else {
				match++
			}
		}
	} else {
		dst.FileAttachment = nil
	}

	// try to unmarshal data into LocationAttachment
	err = newStrictDecoder(data).Decode(&dst.LocationAttachment)
	if err == nil {
		jsonLocationAttachment, _ := json.Marshal(dst.LocationAttachment)
		if string(jsonLocationAttachment) == "{}" { // empty struct
			dst.LocationAttachment = nil
		} else {
			if err = validator.Validate(dst.LocationAttachment); err != nil {
				dst.LocationAttachment = nil
			} else {
				match++
			}
		}
	} else {
		dst.LocationAttachment = nil
	}

	// try to unmarshal data into MessageHeaderAttachment
	err = newStrictDecoder(data).Decode(&dst.MessageHeaderAttachment)
	if err == nil {
		jsonMessageHeaderAttachment, _ := json.Marshal(dst.MessageHeaderAttachment)
		if string(jsonMessageHeaderAttachment) == "{}" { // empty struct
			dst.MessageHeaderAttachment = nil
		} else {
			if err = validator.Validate(dst.MessageHeaderAttachment); err != nil {
				dst.MessageHeaderAttachment = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageHeaderAttachment = nil
	}

	// try to unmarshal data into QuickRepliesAttachment
	err = newStrictDecoder(data).Decode(&dst.QuickRepliesAttachment)
	if err == nil {
		jsonQuickRepliesAttachment, _ := json.Marshal(dst.QuickRepliesAttachment)
		if string(jsonQuickRepliesAttachment) == "{}" { // empty struct
			dst.QuickRepliesAttachment = nil
		} else {
			if err = validator.Validate(dst.QuickRepliesAttachment); err != nil {
				dst.QuickRepliesAttachment = nil
			} else {
				match++
			}
		}
	} else {
		dst.QuickRepliesAttachment = nil
	}

	// try to unmarshal data into UnsupportedContentAttachment
	err = newStrictDecoder(data).Decode(&dst.UnsupportedContentAttachment)
	if err == nil {
		jsonUnsupportedContentAttachment, _ := json.Marshal(dst.UnsupportedContentAttachment)
		if string(jsonUnsupportedContentAttachment) == "{}" { // empty struct
			dst.UnsupportedContentAttachment = nil
		} else {
			if err = validator.Validate(dst.UnsupportedContentAttachment); err != nil {
				dst.UnsupportedContentAttachment = nil
			} else {
				match++
			}
		}
	} else {
		dst.UnsupportedContentAttachment = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ContactAttachment = nil
		dst.FileAttachment = nil
		dst.LocationAttachment = nil
		dst.MessageHeaderAttachment = nil
		dst.QuickRepliesAttachment = nil
		dst.UnsupportedContentAttachment = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ChannelIntegrationMessageEggAttachmentsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ChannelIntegrationMessageEggAttachmentsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ChannelIntegrationMessageEggAttachmentsInner) MarshalJSON() ([]byte, error) {
	if src.ContactAttachment != nil {
		return json.Marshal(&src.ContactAttachment)
	}

	if src.FileAttachment != nil {
		return json.Marshal(&src.FileAttachment)
	}

	if src.LocationAttachment != nil {
		return json.Marshal(&src.LocationAttachment)
	}

	if src.MessageHeaderAttachment != nil {
		return json.Marshal(&src.MessageHeaderAttachment)
	}

	if src.QuickRepliesAttachment != nil {
		return json.Marshal(&src.QuickRepliesAttachment)
	}

	if src.UnsupportedContentAttachment != nil {
		return json.Marshal(&src.UnsupportedContentAttachment)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ChannelIntegrationMessageEggAttachmentsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ContactAttachment != nil {
		return obj.ContactAttachment
	}

	if obj.FileAttachment != nil {
		return obj.FileAttachment
	}

	if obj.LocationAttachment != nil {
		return obj.LocationAttachment
	}

	if obj.MessageHeaderAttachment != nil {
		return obj.MessageHeaderAttachment
	}

	if obj.QuickRepliesAttachment != nil {
		return obj.QuickRepliesAttachment
	}

	if obj.UnsupportedContentAttachment != nil {
		return obj.UnsupportedContentAttachment
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ChannelIntegrationMessageEggAttachmentsInner) GetActualInstanceValue() (interface{}) {
	if obj.ContactAttachment != nil {
		return *obj.ContactAttachment
	}

	if obj.FileAttachment != nil {
		return *obj.FileAttachment
	}

	if obj.LocationAttachment != nil {
		return *obj.LocationAttachment
	}

	if obj.MessageHeaderAttachment != nil {
		return *obj.MessageHeaderAttachment
	}

	if obj.QuickRepliesAttachment != nil {
		return *obj.QuickRepliesAttachment
	}

	if obj.UnsupportedContentAttachment != nil {
		return *obj.UnsupportedContentAttachment
	}

	// all schemas are nil
	return nil
}

type NullableChannelIntegrationMessageEggAttachmentsInner struct {
	value *ChannelIntegrationMessageEggAttachmentsInner
	isSet bool
}

func (v NullableChannelIntegrationMessageEggAttachmentsInner) Get() *ChannelIntegrationMessageEggAttachmentsInner {
	return v.value
}

func (v *NullableChannelIntegrationMessageEggAttachmentsInner) Set(val *ChannelIntegrationMessageEggAttachmentsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelIntegrationMessageEggAttachmentsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelIntegrationMessageEggAttachmentsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelIntegrationMessageEggAttachmentsInner(val *ChannelIntegrationMessageEggAttachmentsInner) *NullableChannelIntegrationMessageEggAttachmentsInner {
	return &NullableChannelIntegrationMessageEggAttachmentsInner{value: val, isSet: true}
}

func (v NullableChannelIntegrationMessageEggAttachmentsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelIntegrationMessageEggAttachmentsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


