/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicLocation{}

// PublicLocation struct for PublicLocation
type PublicLocation struct {
	Address *string `json:"address,omitempty"`
	Latitude float32 `json:"latitude"`
	Name *string `json:"name,omitempty"`
	Type string `json:"type"`
	Url *string `json:"url,omitempty"`
	Longitude float32 `json:"longitude"`
}

type _PublicLocation PublicLocation

// NewPublicLocation instantiates a new PublicLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicLocation(latitude float32, type_ string, longitude float32) *PublicLocation {
	this := PublicLocation{}
	this.Latitude = latitude
	this.Type = type_
	this.Longitude = longitude
	return &this
}

// NewPublicLocationWithDefaults instantiates a new PublicLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicLocationWithDefaults() *PublicLocation {
	this := PublicLocation{}
	var type_ string = "LOCATION"
	this.Type = type_
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *PublicLocation) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicLocation) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *PublicLocation) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *PublicLocation) SetAddress(v string) {
	o.Address = &v
}

// GetLatitude returns the Latitude field value
func (o *PublicLocation) GetLatitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *PublicLocation) GetLatitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *PublicLocation) SetLatitude(v float32) {
	o.Latitude = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PublicLocation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicLocation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PublicLocation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PublicLocation) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value
func (o *PublicLocation) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PublicLocation) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PublicLocation) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PublicLocation) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicLocation) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PublicLocation) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PublicLocation) SetUrl(v string) {
	o.Url = &v
}

// GetLongitude returns the Longitude field value
func (o *PublicLocation) GetLongitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *PublicLocation) GetLongitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *PublicLocation) SetLongitude(v float32) {
	o.Longitude = v
}

func (o PublicLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	toSerialize["latitude"] = o.Latitude
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	toSerialize["longitude"] = o.Longitude
	return toSerialize, nil
}

func (o *PublicLocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latitude",
		"type",
		"longitude",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicLocation := _PublicLocation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicLocation)

	if err != nil {
		return err
	}

	*o = PublicLocation(varPublicLocation)

	return err
}

type NullablePublicLocation struct {
	value *PublicLocation
	isSet bool
}

func (v NullablePublicLocation) Get() *PublicLocation {
	return v.value
}

func (v *NullablePublicLocation) Set(val *PublicLocation) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicLocation) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicLocation(val *PublicLocation) *NullablePublicLocation {
	return &NullablePublicLocation{value: val, isSet: true}
}

func (v NullablePublicLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


