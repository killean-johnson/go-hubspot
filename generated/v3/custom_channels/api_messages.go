/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// MessagesAPIService MessagesAPI service
type MessagesAPIService service

type ApiGetConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest struct {
	ctx context.Context
	ApiService *MessagesAPIService
	channelId int32
	messageId string
}

func (r ApiGetConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest) Execute() (*PublicConversationsMessage, *http.Response, error) {
	return r.ApiService.GetConversationsV3CustomChannelsChannelIdMessagesMessageIdExecute(r)
}

/*
GetConversationsV3CustomChannelsChannelIdMessagesMessageId Get a message

Get the PublicConversationsMessage that represents a message sent over a custom channel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId The channel the message was sent over
 @param messageId The id of the message
 @return ApiGetConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest
*/
func (a *MessagesAPIService) GetConversationsV3CustomChannelsChannelIdMessagesMessageId(ctx context.Context, channelId int32, messageId string) ApiGetConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest {
	return ApiGetConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return PublicConversationsMessage
func (a *MessagesAPIService) GetConversationsV3CustomChannelsChannelIdMessagesMessageIdExecute(r ApiGetConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest) (*PublicConversationsMessage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicConversationsMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessagesAPIService.GetConversationsV3CustomChannelsChannelIdMessagesMessageId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversations/v3/custom-channels/{channelId}/messages/{messageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"channelId"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"messageId"+"}", url.PathEscape(parameterValueToString(r.messageId, "messageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest struct {
	ctx context.Context
	ApiService *MessagesAPIService
	channelId int32
	messageId string
	publicChannelIntegrationMessageUpdateRequest *PublicChannelIntegrationMessageUpdateRequest
}

func (r ApiPatchConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest) PublicChannelIntegrationMessageUpdateRequest(publicChannelIntegrationMessageUpdateRequest PublicChannelIntegrationMessageUpdateRequest) ApiPatchConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest {
	r.publicChannelIntegrationMessageUpdateRequest = &publicChannelIntegrationMessageUpdateRequest
	return r
}

func (r ApiPatchConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest) Execute() (*PublicConversationsMessage, *http.Response, error) {
	return r.ApiService.PatchConversationsV3CustomChannelsChannelIdMessagesMessageIdExecute(r)
}

/*
PatchConversationsV3CustomChannelsChannelIdMessagesMessageId Update message 

Use this API to update a message's status to indicate if it was successfully sent, failed to send, or was read

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId The channel the message was sent over
 @param messageId The id of the message
 @return ApiPatchConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest
*/
func (a *MessagesAPIService) PatchConversationsV3CustomChannelsChannelIdMessagesMessageId(ctx context.Context, channelId int32, messageId string) ApiPatchConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest {
	return ApiPatchConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return PublicConversationsMessage
func (a *MessagesAPIService) PatchConversationsV3CustomChannelsChannelIdMessagesMessageIdExecute(r ApiPatchConversationsV3CustomChannelsChannelIdMessagesMessageIdRequest) (*PublicConversationsMessage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicConversationsMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessagesAPIService.PatchConversationsV3CustomChannelsChannelIdMessagesMessageId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversations/v3/custom-channels/{channelId}/messages/{messageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"channelId"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"messageId"+"}", url.PathEscape(parameterValueToString(r.messageId, "messageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.publicChannelIntegrationMessageUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("publicChannelIntegrationMessageUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.publicChannelIntegrationMessageUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostConversationsV3CustomChannelsChannelIdMessagesRequest struct {
	ctx context.Context
	ApiService *MessagesAPIService
	channelId int32
	channelIntegrationMessageEgg *ChannelIntegrationMessageEgg
}

func (r ApiPostConversationsV3CustomChannelsChannelIdMessagesRequest) ChannelIntegrationMessageEgg(channelIntegrationMessageEgg ChannelIntegrationMessageEgg) ApiPostConversationsV3CustomChannelsChannelIdMessagesRequest {
	r.channelIntegrationMessageEgg = &channelIntegrationMessageEgg
	return r
}

func (r ApiPostConversationsV3CustomChannelsChannelIdMessagesRequest) Execute() (*PublicConversationsMessage, *http.Response, error) {
	return r.ApiService.PostConversationsV3CustomChannelsChannelIdMessagesExecute(r)
}

/*
PostConversationsV3CustomChannelsChannelIdMessages Publish a message

Publish a message over your custom channel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId The channel the message will be sent over
 @return ApiPostConversationsV3CustomChannelsChannelIdMessagesRequest
*/
func (a *MessagesAPIService) PostConversationsV3CustomChannelsChannelIdMessages(ctx context.Context, channelId int32) ApiPostConversationsV3CustomChannelsChannelIdMessagesRequest {
	return ApiPostConversationsV3CustomChannelsChannelIdMessagesRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
	}
}

// Execute executes the request
//  @return PublicConversationsMessage
func (a *MessagesAPIService) PostConversationsV3CustomChannelsChannelIdMessagesExecute(r ApiPostConversationsV3CustomChannelsChannelIdMessagesRequest) (*PublicConversationsMessage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicConversationsMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessagesAPIService.PostConversationsV3CustomChannelsChannelIdMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversations/v3/custom-channels/{channelId}/messages"
	localVarPath = strings.Replace(localVarPath, "{"+"channelId"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.channelIntegrationMessageEgg == nil {
		return localVarReturnValue, nil, reportError("channelIntegrationMessageEgg is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.channelIntegrationMessageEgg
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
