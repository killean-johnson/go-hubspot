/*
Conversations Custom Channels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_channels

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicMessageFailureDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicMessageFailureDetails{}

// PublicMessageFailureDetails struct for PublicMessageFailureDetails
type PublicMessageFailureDetails struct {
	ErrorMessageTokens map[string]string `json:"errorMessageTokens"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

type _PublicMessageFailureDetails PublicMessageFailureDetails

// NewPublicMessageFailureDetails instantiates a new PublicMessageFailureDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicMessageFailureDetails(errorMessageTokens map[string]string) *PublicMessageFailureDetails {
	this := PublicMessageFailureDetails{}
	this.ErrorMessageTokens = errorMessageTokens
	return &this
}

// NewPublicMessageFailureDetailsWithDefaults instantiates a new PublicMessageFailureDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicMessageFailureDetailsWithDefaults() *PublicMessageFailureDetails {
	this := PublicMessageFailureDetails{}
	return &this
}

// GetErrorMessageTokens returns the ErrorMessageTokens field value
func (o *PublicMessageFailureDetails) GetErrorMessageTokens() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.ErrorMessageTokens
}

// GetErrorMessageTokensOk returns a tuple with the ErrorMessageTokens field value
// and a boolean to check if the value has been set.
func (o *PublicMessageFailureDetails) GetErrorMessageTokensOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorMessageTokens, true
}

// SetErrorMessageTokens sets field value
func (o *PublicMessageFailureDetails) SetErrorMessageTokens(v map[string]string) {
	o.ErrorMessageTokens = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *PublicMessageFailureDetails) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMessageFailureDetails) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *PublicMessageFailureDetails) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *PublicMessageFailureDetails) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o PublicMessageFailureDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicMessageFailureDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errorMessageTokens"] = o.ErrorMessageTokens
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	return toSerialize, nil
}

func (o *PublicMessageFailureDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errorMessageTokens",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicMessageFailureDetails := _PublicMessageFailureDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicMessageFailureDetails)

	if err != nil {
		return err
	}

	*o = PublicMessageFailureDetails(varPublicMessageFailureDetails)

	return err
}

type NullablePublicMessageFailureDetails struct {
	value *PublicMessageFailureDetails
	isSet bool
}

func (v NullablePublicMessageFailureDetails) Get() *PublicMessageFailureDetails {
	return v.value
}

func (v *NullablePublicMessageFailureDetails) Set(val *PublicMessageFailureDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicMessageFailureDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicMessageFailureDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicMessageFailureDetails(val *PublicMessageFailureDetails) *NullablePublicMessageFailureDetails {
	return &NullablePublicMessageFailureDetails{value: val, isSet: true}
}

func (v NullablePublicMessageFailureDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicMessageFailureDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


