/*
Events Send Event Completions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package send_event_completions

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the BehavioralEventHttpCompletionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BehavioralEventHttpCompletionRequest{}

// BehavioralEventHttpCompletionRequest struct for BehavioralEventHttpCompletionRequest
type BehavioralEventHttpCompletionRequest struct {
	// The time when this event occurred. If this isn't set, the current time will be used.
	OccurredAt *time.Time `json:"occurredAt,omitempty"`
	// The internal name of the event (`pe<portalID>_eventName`). Can be retrieved through the [event definitions API](https://developers.hubspot.com/docs/reference/api/analytics-and-events/custom-events/custom-event-definitions#get-%2Fevents%2Fv3%2Fevent-definitions) or in [HubSpot's UI](https://knowledge.hubspot.com/reports/create-custom-behavioral-events-with-the-code-wizard#find-internal-name). 
	EventName string `json:"eventName"`
	// The visitor's usertoken. Used for associating the event data with a CRM record.
	Utk *string `json:"utk,omitempty"`
	// Include a universally unique identifier to assign a unique ID to the event completion. Can be useful for matching data between HubSpot and other external systems.
	Uuid *string `json:"uuid,omitempty"`
	// The visitor's email address. Used for associating the event data with a CRM record.
	Email *string `json:"email,omitempty"`
	// The event properties to update. Takes the format of key-value pairs (property internal name and property value). Learn more about [HubSpot's default event properties](https://developers.hubspot.com/docs/guides/api/analytics-and-events/custom-events/custom-event-definitions#hubspot-s-default-event-properties).
	Properties *map[string]string `json:"properties,omitempty"`
	// The ID of the object that completed the event (e.g., contact ID or visitor ID).
	ObjectId *string `json:"objectId,omitempty"`
}

type _BehavioralEventHttpCompletionRequest BehavioralEventHttpCompletionRequest

// NewBehavioralEventHttpCompletionRequest instantiates a new BehavioralEventHttpCompletionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBehavioralEventHttpCompletionRequest(eventName string) *BehavioralEventHttpCompletionRequest {
	this := BehavioralEventHttpCompletionRequest{}
	this.EventName = eventName
	return &this
}

// NewBehavioralEventHttpCompletionRequestWithDefaults instantiates a new BehavioralEventHttpCompletionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBehavioralEventHttpCompletionRequestWithDefaults() *BehavioralEventHttpCompletionRequest {
	this := BehavioralEventHttpCompletionRequest{}
	return &this
}

// GetOccurredAt returns the OccurredAt field value if set, zero value otherwise.
func (o *BehavioralEventHttpCompletionRequest) GetOccurredAt() time.Time {
	if o == nil || IsNil(o.OccurredAt) {
		var ret time.Time
		return ret
	}
	return *o.OccurredAt
}

// GetOccurredAtOk returns a tuple with the OccurredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BehavioralEventHttpCompletionRequest) GetOccurredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OccurredAt) {
		return nil, false
	}
	return o.OccurredAt, true
}

// HasOccurredAt returns a boolean if a field has been set.
func (o *BehavioralEventHttpCompletionRequest) HasOccurredAt() bool {
	if o != nil && !IsNil(o.OccurredAt) {
		return true
	}

	return false
}

// SetOccurredAt gets a reference to the given time.Time and assigns it to the OccurredAt field.
func (o *BehavioralEventHttpCompletionRequest) SetOccurredAt(v time.Time) {
	o.OccurredAt = &v
}

// GetEventName returns the EventName field value
func (o *BehavioralEventHttpCompletionRequest) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *BehavioralEventHttpCompletionRequest) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *BehavioralEventHttpCompletionRequest) SetEventName(v string) {
	o.EventName = v
}

// GetUtk returns the Utk field value if set, zero value otherwise.
func (o *BehavioralEventHttpCompletionRequest) GetUtk() string {
	if o == nil || IsNil(o.Utk) {
		var ret string
		return ret
	}
	return *o.Utk
}

// GetUtkOk returns a tuple with the Utk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BehavioralEventHttpCompletionRequest) GetUtkOk() (*string, bool) {
	if o == nil || IsNil(o.Utk) {
		return nil, false
	}
	return o.Utk, true
}

// HasUtk returns a boolean if a field has been set.
func (o *BehavioralEventHttpCompletionRequest) HasUtk() bool {
	if o != nil && !IsNil(o.Utk) {
		return true
	}

	return false
}

// SetUtk gets a reference to the given string and assigns it to the Utk field.
func (o *BehavioralEventHttpCompletionRequest) SetUtk(v string) {
	o.Utk = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *BehavioralEventHttpCompletionRequest) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BehavioralEventHttpCompletionRequest) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *BehavioralEventHttpCompletionRequest) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *BehavioralEventHttpCompletionRequest) SetUuid(v string) {
	o.Uuid = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *BehavioralEventHttpCompletionRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BehavioralEventHttpCompletionRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *BehavioralEventHttpCompletionRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *BehavioralEventHttpCompletionRequest) SetEmail(v string) {
	o.Email = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *BehavioralEventHttpCompletionRequest) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BehavioralEventHttpCompletionRequest) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *BehavioralEventHttpCompletionRequest) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *BehavioralEventHttpCompletionRequest) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *BehavioralEventHttpCompletionRequest) GetObjectId() string {
	if o == nil || IsNil(o.ObjectId) {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BehavioralEventHttpCompletionRequest) GetObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectId) {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *BehavioralEventHttpCompletionRequest) HasObjectId() bool {
	if o != nil && !IsNil(o.ObjectId) {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *BehavioralEventHttpCompletionRequest) SetObjectId(v string) {
	o.ObjectId = &v
}

func (o BehavioralEventHttpCompletionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BehavioralEventHttpCompletionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OccurredAt) {
		toSerialize["occurredAt"] = o.OccurredAt
	}
	toSerialize["eventName"] = o.EventName
	if !IsNil(o.Utk) {
		toSerialize["utk"] = o.Utk
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.ObjectId) {
		toSerialize["objectId"] = o.ObjectId
	}
	return toSerialize, nil
}

func (o *BehavioralEventHttpCompletionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBehavioralEventHttpCompletionRequest := _BehavioralEventHttpCompletionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBehavioralEventHttpCompletionRequest)

	if err != nil {
		return err
	}

	*o = BehavioralEventHttpCompletionRequest(varBehavioralEventHttpCompletionRequest)

	return err
}

type NullableBehavioralEventHttpCompletionRequest struct {
	value *BehavioralEventHttpCompletionRequest
	isSet bool
}

func (v NullableBehavioralEventHttpCompletionRequest) Get() *BehavioralEventHttpCompletionRequest {
	return v.value
}

func (v *NullableBehavioralEventHttpCompletionRequest) Set(val *BehavioralEventHttpCompletionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBehavioralEventHttpCompletionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBehavioralEventHttpCompletionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBehavioralEventHttpCompletionRequest(val *BehavioralEventHttpCompletionRequest) *NullableBehavioralEventHttpCompletionRequest {
	return &NullableBehavioralEventHttpCompletionRequest{value: val, isSet: true}
}

func (v NullableBehavioralEventHttpCompletionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBehavioralEventHttpCompletionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


