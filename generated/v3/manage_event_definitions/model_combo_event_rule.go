/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ComboEventRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComboEventRule{}

// ComboEventRule struct for ComboEventRule
type ComboEventRule struct {
	LookbackWindowDays *int32 `json:"lookbackWindowDays,omitempty"`
	EventTypeId string `json:"eventTypeId"`
	PropertyFilters []PropertyFilter `json:"propertyFilters"`
	Count int32 `json:"count"`
}

type _ComboEventRule ComboEventRule

// NewComboEventRule instantiates a new ComboEventRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComboEventRule(eventTypeId string, propertyFilters []PropertyFilter, count int32) *ComboEventRule {
	this := ComboEventRule{}
	this.EventTypeId = eventTypeId
	this.PropertyFilters = propertyFilters
	this.Count = count
	return &this
}

// NewComboEventRuleWithDefaults instantiates a new ComboEventRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComboEventRuleWithDefaults() *ComboEventRule {
	this := ComboEventRule{}
	return &this
}

// GetLookbackWindowDays returns the LookbackWindowDays field value if set, zero value otherwise.
func (o *ComboEventRule) GetLookbackWindowDays() int32 {
	if o == nil || IsNil(o.LookbackWindowDays) {
		var ret int32
		return ret
	}
	return *o.LookbackWindowDays
}

// GetLookbackWindowDaysOk returns a tuple with the LookbackWindowDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComboEventRule) GetLookbackWindowDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.LookbackWindowDays) {
		return nil, false
	}
	return o.LookbackWindowDays, true
}

// HasLookbackWindowDays returns a boolean if a field has been set.
func (o *ComboEventRule) HasLookbackWindowDays() bool {
	if o != nil && !IsNil(o.LookbackWindowDays) {
		return true
	}

	return false
}

// SetLookbackWindowDays gets a reference to the given int32 and assigns it to the LookbackWindowDays field.
func (o *ComboEventRule) SetLookbackWindowDays(v int32) {
	o.LookbackWindowDays = &v
}

// GetEventTypeId returns the EventTypeId field value
func (o *ComboEventRule) GetEventTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventTypeId
}

// GetEventTypeIdOk returns a tuple with the EventTypeId field value
// and a boolean to check if the value has been set.
func (o *ComboEventRule) GetEventTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTypeId, true
}

// SetEventTypeId sets field value
func (o *ComboEventRule) SetEventTypeId(v string) {
	o.EventTypeId = v
}

// GetPropertyFilters returns the PropertyFilters field value
func (o *ComboEventRule) GetPropertyFilters() []PropertyFilter {
	if o == nil {
		var ret []PropertyFilter
		return ret
	}

	return o.PropertyFilters
}

// GetPropertyFiltersOk returns a tuple with the PropertyFilters field value
// and a boolean to check if the value has been set.
func (o *ComboEventRule) GetPropertyFiltersOk() ([]PropertyFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.PropertyFilters, true
}

// SetPropertyFilters sets field value
func (o *ComboEventRule) SetPropertyFilters(v []PropertyFilter) {
	o.PropertyFilters = v
}

// GetCount returns the Count field value
func (o *ComboEventRule) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ComboEventRule) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ComboEventRule) SetCount(v int32) {
	o.Count = v
}

func (o ComboEventRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComboEventRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LookbackWindowDays) {
		toSerialize["lookbackWindowDays"] = o.LookbackWindowDays
	}
	toSerialize["eventTypeId"] = o.EventTypeId
	toSerialize["propertyFilters"] = o.PropertyFilters
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

func (o *ComboEventRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventTypeId",
		"propertyFilters",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComboEventRule := _ComboEventRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComboEventRule)

	if err != nil {
		return err
	}

	*o = ComboEventRule(varComboEventRule)

	return err
}

type NullableComboEventRule struct {
	value *ComboEventRule
	isSet bool
}

func (v NullableComboEventRule) Get() *ComboEventRule {
	return v.value
}

func (v *NullableComboEventRule) Set(val *ComboEventRule) {
	v.value = val
	v.isSet = true
}

func (v NullableComboEventRule) IsSet() bool {
	return v.isSet
}

func (v *NullableComboEventRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComboEventRule(val *ComboEventRule) *NullableComboEventRule {
	return &NullableComboEventRule{value: val, isSet: true}
}

func (v NullableComboEventRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComboEventRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


