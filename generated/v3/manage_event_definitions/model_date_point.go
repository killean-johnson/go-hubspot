/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DatePoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatePoint{}

// DatePoint struct for DatePoint
type DatePoint struct {
	Month int32 `json:"month"`
	Hour *int32 `json:"hour,omitempty"`
	Year int32 `json:"year"`
	TimezoneSource string `json:"timezoneSource"`
	Millisecond *int32 `json:"millisecond,omitempty"`
	TimeType string `json:"timeType"`
	ZoneId string `json:"zoneId"`
	Day int32 `json:"day"`
	Minute *int32 `json:"minute,omitempty"`
	Second *int32 `json:"second,omitempty"`
}

type _DatePoint DatePoint

// NewDatePoint instantiates a new DatePoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatePoint(month int32, year int32, timezoneSource string, timeType string, zoneId string, day int32) *DatePoint {
	this := DatePoint{}
	this.Month = month
	this.Year = year
	this.TimezoneSource = timezoneSource
	this.TimeType = timeType
	this.ZoneId = zoneId
	this.Day = day
	return &this
}

// NewDatePointWithDefaults instantiates a new DatePoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatePointWithDefaults() *DatePoint {
	this := DatePoint{}
	var timeType string = "DATE"
	this.TimeType = timeType
	return &this
}

// GetMonth returns the Month field value
func (o *DatePoint) GetMonth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *DatePoint) GetMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *DatePoint) SetMonth(v int32) {
	o.Month = v
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *DatePoint) GetHour() int32 {
	if o == nil || IsNil(o.Hour) {
		var ret int32
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatePoint) GetHourOk() (*int32, bool) {
	if o == nil || IsNil(o.Hour) {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *DatePoint) HasHour() bool {
	if o != nil && !IsNil(o.Hour) {
		return true
	}

	return false
}

// SetHour gets a reference to the given int32 and assigns it to the Hour field.
func (o *DatePoint) SetHour(v int32) {
	o.Hour = &v
}

// GetYear returns the Year field value
func (o *DatePoint) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *DatePoint) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *DatePoint) SetYear(v int32) {
	o.Year = v
}

// GetTimezoneSource returns the TimezoneSource field value
func (o *DatePoint) GetTimezoneSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimezoneSource
}

// GetTimezoneSourceOk returns a tuple with the TimezoneSource field value
// and a boolean to check if the value has been set.
func (o *DatePoint) GetTimezoneSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimezoneSource, true
}

// SetTimezoneSource sets field value
func (o *DatePoint) SetTimezoneSource(v string) {
	o.TimezoneSource = v
}

// GetMillisecond returns the Millisecond field value if set, zero value otherwise.
func (o *DatePoint) GetMillisecond() int32 {
	if o == nil || IsNil(o.Millisecond) {
		var ret int32
		return ret
	}
	return *o.Millisecond
}

// GetMillisecondOk returns a tuple with the Millisecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatePoint) GetMillisecondOk() (*int32, bool) {
	if o == nil || IsNil(o.Millisecond) {
		return nil, false
	}
	return o.Millisecond, true
}

// HasMillisecond returns a boolean if a field has been set.
func (o *DatePoint) HasMillisecond() bool {
	if o != nil && !IsNil(o.Millisecond) {
		return true
	}

	return false
}

// SetMillisecond gets a reference to the given int32 and assigns it to the Millisecond field.
func (o *DatePoint) SetMillisecond(v int32) {
	o.Millisecond = &v
}

// GetTimeType returns the TimeType field value
func (o *DatePoint) GetTimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeType
}

// GetTimeTypeOk returns a tuple with the TimeType field value
// and a boolean to check if the value has been set.
func (o *DatePoint) GetTimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeType, true
}

// SetTimeType sets field value
func (o *DatePoint) SetTimeType(v string) {
	o.TimeType = v
}

// GetZoneId returns the ZoneId field value
func (o *DatePoint) GetZoneId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value
// and a boolean to check if the value has been set.
func (o *DatePoint) GetZoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneId, true
}

// SetZoneId sets field value
func (o *DatePoint) SetZoneId(v string) {
	o.ZoneId = v
}

// GetDay returns the Day field value
func (o *DatePoint) GetDay() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Day
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
func (o *DatePoint) GetDayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Day, true
}

// SetDay sets field value
func (o *DatePoint) SetDay(v int32) {
	o.Day = v
}

// GetMinute returns the Minute field value if set, zero value otherwise.
func (o *DatePoint) GetMinute() int32 {
	if o == nil || IsNil(o.Minute) {
		var ret int32
		return ret
	}
	return *o.Minute
}

// GetMinuteOk returns a tuple with the Minute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatePoint) GetMinuteOk() (*int32, bool) {
	if o == nil || IsNil(o.Minute) {
		return nil, false
	}
	return o.Minute, true
}

// HasMinute returns a boolean if a field has been set.
func (o *DatePoint) HasMinute() bool {
	if o != nil && !IsNil(o.Minute) {
		return true
	}

	return false
}

// SetMinute gets a reference to the given int32 and assigns it to the Minute field.
func (o *DatePoint) SetMinute(v int32) {
	o.Minute = &v
}

// GetSecond returns the Second field value if set, zero value otherwise.
func (o *DatePoint) GetSecond() int32 {
	if o == nil || IsNil(o.Second) {
		var ret int32
		return ret
	}
	return *o.Second
}

// GetSecondOk returns a tuple with the Second field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatePoint) GetSecondOk() (*int32, bool) {
	if o == nil || IsNil(o.Second) {
		return nil, false
	}
	return o.Second, true
}

// HasSecond returns a boolean if a field has been set.
func (o *DatePoint) HasSecond() bool {
	if o != nil && !IsNil(o.Second) {
		return true
	}

	return false
}

// SetSecond gets a reference to the given int32 and assigns it to the Second field.
func (o *DatePoint) SetSecond(v int32) {
	o.Second = &v
}

func (o DatePoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatePoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["month"] = o.Month
	if !IsNil(o.Hour) {
		toSerialize["hour"] = o.Hour
	}
	toSerialize["year"] = o.Year
	toSerialize["timezoneSource"] = o.TimezoneSource
	if !IsNil(o.Millisecond) {
		toSerialize["millisecond"] = o.Millisecond
	}
	toSerialize["timeType"] = o.TimeType
	toSerialize["zoneId"] = o.ZoneId
	toSerialize["day"] = o.Day
	if !IsNil(o.Minute) {
		toSerialize["minute"] = o.Minute
	}
	if !IsNil(o.Second) {
		toSerialize["second"] = o.Second
	}
	return toSerialize, nil
}

func (o *DatePoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"month",
		"year",
		"timezoneSource",
		"timeType",
		"zoneId",
		"day",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatePoint := _DatePoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDatePoint)

	if err != nil {
		return err
	}

	*o = DatePoint(varDatePoint)

	return err
}

type NullableDatePoint struct {
	value *DatePoint
	isSet bool
}

func (v NullableDatePoint) Get() *DatePoint {
	return v.value
}

func (v *NullableDatePoint) Set(val *DatePoint) {
	v.value = val
	v.isSet = true
}

func (v NullableDatePoint) IsSet() bool {
	return v.isSet
}

func (v *NullableDatePoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatePoint(val *DatePoint) *NullableDatePoint {
	return &NullableDatePoint{value: val, isSet: true}
}

func (v NullableDatePoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatePoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


