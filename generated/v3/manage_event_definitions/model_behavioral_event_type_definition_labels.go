/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BehavioralEventTypeDefinitionLabels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BehavioralEventTypeDefinitionLabels{}

// BehavioralEventTypeDefinitionLabels struct for BehavioralEventTypeDefinitionLabels
type BehavioralEventTypeDefinitionLabels struct {
	Plural *string `json:"plural,omitempty"`
	Singular string `json:"singular"`
}

type _BehavioralEventTypeDefinitionLabels BehavioralEventTypeDefinitionLabels

// NewBehavioralEventTypeDefinitionLabels instantiates a new BehavioralEventTypeDefinitionLabels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBehavioralEventTypeDefinitionLabels(singular string) *BehavioralEventTypeDefinitionLabels {
	this := BehavioralEventTypeDefinitionLabels{}
	this.Singular = singular
	return &this
}

// NewBehavioralEventTypeDefinitionLabelsWithDefaults instantiates a new BehavioralEventTypeDefinitionLabels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBehavioralEventTypeDefinitionLabelsWithDefaults() *BehavioralEventTypeDefinitionLabels {
	this := BehavioralEventTypeDefinitionLabels{}
	return &this
}

// GetPlural returns the Plural field value if set, zero value otherwise.
func (o *BehavioralEventTypeDefinitionLabels) GetPlural() string {
	if o == nil || IsNil(o.Plural) {
		var ret string
		return ret
	}
	return *o.Plural
}

// GetPluralOk returns a tuple with the Plural field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BehavioralEventTypeDefinitionLabels) GetPluralOk() (*string, bool) {
	if o == nil || IsNil(o.Plural) {
		return nil, false
	}
	return o.Plural, true
}

// HasPlural returns a boolean if a field has been set.
func (o *BehavioralEventTypeDefinitionLabels) HasPlural() bool {
	if o != nil && !IsNil(o.Plural) {
		return true
	}

	return false
}

// SetPlural gets a reference to the given string and assigns it to the Plural field.
func (o *BehavioralEventTypeDefinitionLabels) SetPlural(v string) {
	o.Plural = &v
}

// GetSingular returns the Singular field value
func (o *BehavioralEventTypeDefinitionLabels) GetSingular() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Singular
}

// GetSingularOk returns a tuple with the Singular field value
// and a boolean to check if the value has been set.
func (o *BehavioralEventTypeDefinitionLabels) GetSingularOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Singular, true
}

// SetSingular sets field value
func (o *BehavioralEventTypeDefinitionLabels) SetSingular(v string) {
	o.Singular = v
}

func (o BehavioralEventTypeDefinitionLabels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BehavioralEventTypeDefinitionLabels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Plural) {
		toSerialize["plural"] = o.Plural
	}
	toSerialize["singular"] = o.Singular
	return toSerialize, nil
}

func (o *BehavioralEventTypeDefinitionLabels) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"singular",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBehavioralEventTypeDefinitionLabels := _BehavioralEventTypeDefinitionLabels{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBehavioralEventTypeDefinitionLabels)

	if err != nil {
		return err
	}

	*o = BehavioralEventTypeDefinitionLabels(varBehavioralEventTypeDefinitionLabels)

	return err
}

type NullableBehavioralEventTypeDefinitionLabels struct {
	value *BehavioralEventTypeDefinitionLabels
	isSet bool
}

func (v NullableBehavioralEventTypeDefinitionLabels) Get() *BehavioralEventTypeDefinitionLabels {
	return v.value
}

func (v *NullableBehavioralEventTypeDefinitionLabels) Set(val *BehavioralEventTypeDefinitionLabels) {
	v.value = val
	v.isSet = true
}

func (v NullableBehavioralEventTypeDefinitionLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableBehavioralEventTypeDefinitionLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBehavioralEventTypeDefinitionLabels(val *BehavioralEventTypeDefinitionLabels) *NullableBehavioralEventTypeDefinitionLabels {
	return &NullableBehavioralEventTypeDefinitionLabels{value: val, isSet: true}
}

func (v NullableBehavioralEventTypeDefinitionLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBehavioralEventTypeDefinitionLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


