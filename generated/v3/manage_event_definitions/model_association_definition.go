/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssociationDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssociationDefinition{}

// AssociationDefinition struct for AssociationDefinition
type AssociationDefinition struct {
	InverseLabel *string `json:"inverseLabel,omitempty"`
	Hidden bool `json:"hidden"`
	AllowsCustomLabels bool `json:"allowsCustomLabels"`
	MaxFromObjectIds int32 `json:"maxFromObjectIds"`
	InverseAllowsCustomLabels bool `json:"inverseAllowsCustomLabels"`
	IsPrimary bool `json:"isPrimary"`
	HasUserEnforcedMaxToObjectIds bool `json:"hasUserEnforcedMaxToObjectIds"`
	HasUserEnforcedMaxFromObjectIds bool `json:"hasUserEnforcedMaxFromObjectIds"`
	Id int32 `json:"id"`
	ToObjectTypeId string `json:"toObjectTypeId"`
	InverseCardinality string `json:"inverseCardinality"`
	MaxToObjectIds int32 `json:"maxToObjectIds"`
	HasCascadingDeletes bool `json:"hasCascadingDeletes"`
	FromObjectType *string `json:"fromObjectType,omitempty"`
	ToObjectType *string `json:"toObjectType,omitempty"`
	Label *string `json:"label,omitempty"`
	InverseId int32 `json:"inverseId"`
	Cardinality string `json:"cardinality"`
	InverseName string `json:"inverseName"`
	HasAllAssociatedObjects bool `json:"hasAllAssociatedObjects"`
	InverseHasAllAssociatedObjects bool `json:"inverseHasAllAssociatedObjects"`
	FromObjectTypeId string `json:"fromObjectTypeId"`
	PortalUniqueIdentifier string `json:"portalUniqueIdentifier"`
	IsInversePrimary bool `json:"isInversePrimary"`
	Name string `json:"name"`
	Category string `json:"category"`
}

type _AssociationDefinition AssociationDefinition

// NewAssociationDefinition instantiates a new AssociationDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociationDefinition(hidden bool, allowsCustomLabels bool, maxFromObjectIds int32, inverseAllowsCustomLabels bool, isPrimary bool, hasUserEnforcedMaxToObjectIds bool, hasUserEnforcedMaxFromObjectIds bool, id int32, toObjectTypeId string, inverseCardinality string, maxToObjectIds int32, hasCascadingDeletes bool, inverseId int32, cardinality string, inverseName string, hasAllAssociatedObjects bool, inverseHasAllAssociatedObjects bool, fromObjectTypeId string, portalUniqueIdentifier string, isInversePrimary bool, name string, category string) *AssociationDefinition {
	this := AssociationDefinition{}
	this.Hidden = hidden
	this.AllowsCustomLabels = allowsCustomLabels
	this.MaxFromObjectIds = maxFromObjectIds
	this.InverseAllowsCustomLabels = inverseAllowsCustomLabels
	this.IsPrimary = isPrimary
	this.HasUserEnforcedMaxToObjectIds = hasUserEnforcedMaxToObjectIds
	this.HasUserEnforcedMaxFromObjectIds = hasUserEnforcedMaxFromObjectIds
	this.Id = id
	this.ToObjectTypeId = toObjectTypeId
	this.InverseCardinality = inverseCardinality
	this.MaxToObjectIds = maxToObjectIds
	this.HasCascadingDeletes = hasCascadingDeletes
	this.InverseId = inverseId
	this.Cardinality = cardinality
	this.InverseName = inverseName
	this.HasAllAssociatedObjects = hasAllAssociatedObjects
	this.InverseHasAllAssociatedObjects = inverseHasAllAssociatedObjects
	this.FromObjectTypeId = fromObjectTypeId
	this.PortalUniqueIdentifier = portalUniqueIdentifier
	this.IsInversePrimary = isInversePrimary
	this.Name = name
	this.Category = category
	return &this
}

// NewAssociationDefinitionWithDefaults instantiates a new AssociationDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociationDefinitionWithDefaults() *AssociationDefinition {
	this := AssociationDefinition{}
	return &this
}

// GetInverseLabel returns the InverseLabel field value if set, zero value otherwise.
func (o *AssociationDefinition) GetInverseLabel() string {
	if o == nil || IsNil(o.InverseLabel) {
		var ret string
		return ret
	}
	return *o.InverseLabel
}

// GetInverseLabelOk returns a tuple with the InverseLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetInverseLabelOk() (*string, bool) {
	if o == nil || IsNil(o.InverseLabel) {
		return nil, false
	}
	return o.InverseLabel, true
}

// HasInverseLabel returns a boolean if a field has been set.
func (o *AssociationDefinition) HasInverseLabel() bool {
	if o != nil && !IsNil(o.InverseLabel) {
		return true
	}

	return false
}

// SetInverseLabel gets a reference to the given string and assigns it to the InverseLabel field.
func (o *AssociationDefinition) SetInverseLabel(v string) {
	o.InverseLabel = &v
}

// GetHidden returns the Hidden field value
func (o *AssociationDefinition) GetHidden() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetHiddenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hidden, true
}

// SetHidden sets field value
func (o *AssociationDefinition) SetHidden(v bool) {
	o.Hidden = v
}

// GetAllowsCustomLabels returns the AllowsCustomLabels field value
func (o *AssociationDefinition) GetAllowsCustomLabels() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowsCustomLabels
}

// GetAllowsCustomLabelsOk returns a tuple with the AllowsCustomLabels field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetAllowsCustomLabelsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowsCustomLabels, true
}

// SetAllowsCustomLabels sets field value
func (o *AssociationDefinition) SetAllowsCustomLabels(v bool) {
	o.AllowsCustomLabels = v
}

// GetMaxFromObjectIds returns the MaxFromObjectIds field value
func (o *AssociationDefinition) GetMaxFromObjectIds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxFromObjectIds
}

// GetMaxFromObjectIdsOk returns a tuple with the MaxFromObjectIds field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetMaxFromObjectIdsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxFromObjectIds, true
}

// SetMaxFromObjectIds sets field value
func (o *AssociationDefinition) SetMaxFromObjectIds(v int32) {
	o.MaxFromObjectIds = v
}

// GetInverseAllowsCustomLabels returns the InverseAllowsCustomLabels field value
func (o *AssociationDefinition) GetInverseAllowsCustomLabels() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InverseAllowsCustomLabels
}

// GetInverseAllowsCustomLabelsOk returns a tuple with the InverseAllowsCustomLabels field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetInverseAllowsCustomLabelsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InverseAllowsCustomLabels, true
}

// SetInverseAllowsCustomLabels sets field value
func (o *AssociationDefinition) SetInverseAllowsCustomLabels(v bool) {
	o.InverseAllowsCustomLabels = v
}

// GetIsPrimary returns the IsPrimary field value
func (o *AssociationDefinition) GetIsPrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrimary
}

// GetIsPrimaryOk returns a tuple with the IsPrimary field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetIsPrimaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPrimary, true
}

// SetIsPrimary sets field value
func (o *AssociationDefinition) SetIsPrimary(v bool) {
	o.IsPrimary = v
}

// GetHasUserEnforcedMaxToObjectIds returns the HasUserEnforcedMaxToObjectIds field value
func (o *AssociationDefinition) GetHasUserEnforcedMaxToObjectIds() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasUserEnforcedMaxToObjectIds
}

// GetHasUserEnforcedMaxToObjectIdsOk returns a tuple with the HasUserEnforcedMaxToObjectIds field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetHasUserEnforcedMaxToObjectIdsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasUserEnforcedMaxToObjectIds, true
}

// SetHasUserEnforcedMaxToObjectIds sets field value
func (o *AssociationDefinition) SetHasUserEnforcedMaxToObjectIds(v bool) {
	o.HasUserEnforcedMaxToObjectIds = v
}

// GetHasUserEnforcedMaxFromObjectIds returns the HasUserEnforcedMaxFromObjectIds field value
func (o *AssociationDefinition) GetHasUserEnforcedMaxFromObjectIds() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasUserEnforcedMaxFromObjectIds
}

// GetHasUserEnforcedMaxFromObjectIdsOk returns a tuple with the HasUserEnforcedMaxFromObjectIds field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetHasUserEnforcedMaxFromObjectIdsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasUserEnforcedMaxFromObjectIds, true
}

// SetHasUserEnforcedMaxFromObjectIds sets field value
func (o *AssociationDefinition) SetHasUserEnforcedMaxFromObjectIds(v bool) {
	o.HasUserEnforcedMaxFromObjectIds = v
}

// GetId returns the Id field value
func (o *AssociationDefinition) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AssociationDefinition) SetId(v int32) {
	o.Id = v
}

// GetToObjectTypeId returns the ToObjectTypeId field value
func (o *AssociationDefinition) GetToObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToObjectTypeId
}

// GetToObjectTypeIdOk returns a tuple with the ToObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetToObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToObjectTypeId, true
}

// SetToObjectTypeId sets field value
func (o *AssociationDefinition) SetToObjectTypeId(v string) {
	o.ToObjectTypeId = v
}

// GetInverseCardinality returns the InverseCardinality field value
func (o *AssociationDefinition) GetInverseCardinality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InverseCardinality
}

// GetInverseCardinalityOk returns a tuple with the InverseCardinality field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetInverseCardinalityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InverseCardinality, true
}

// SetInverseCardinality sets field value
func (o *AssociationDefinition) SetInverseCardinality(v string) {
	o.InverseCardinality = v
}

// GetMaxToObjectIds returns the MaxToObjectIds field value
func (o *AssociationDefinition) GetMaxToObjectIds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxToObjectIds
}

// GetMaxToObjectIdsOk returns a tuple with the MaxToObjectIds field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetMaxToObjectIdsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxToObjectIds, true
}

// SetMaxToObjectIds sets field value
func (o *AssociationDefinition) SetMaxToObjectIds(v int32) {
	o.MaxToObjectIds = v
}

// GetHasCascadingDeletes returns the HasCascadingDeletes field value
func (o *AssociationDefinition) GetHasCascadingDeletes() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasCascadingDeletes
}

// GetHasCascadingDeletesOk returns a tuple with the HasCascadingDeletes field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetHasCascadingDeletesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasCascadingDeletes, true
}

// SetHasCascadingDeletes sets field value
func (o *AssociationDefinition) SetHasCascadingDeletes(v bool) {
	o.HasCascadingDeletes = v
}

// GetFromObjectType returns the FromObjectType field value if set, zero value otherwise.
func (o *AssociationDefinition) GetFromObjectType() string {
	if o == nil || IsNil(o.FromObjectType) {
		var ret string
		return ret
	}
	return *o.FromObjectType
}

// GetFromObjectTypeOk returns a tuple with the FromObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetFromObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FromObjectType) {
		return nil, false
	}
	return o.FromObjectType, true
}

// HasFromObjectType returns a boolean if a field has been set.
func (o *AssociationDefinition) HasFromObjectType() bool {
	if o != nil && !IsNil(o.FromObjectType) {
		return true
	}

	return false
}

// SetFromObjectType gets a reference to the given string and assigns it to the FromObjectType field.
func (o *AssociationDefinition) SetFromObjectType(v string) {
	o.FromObjectType = &v
}

// GetToObjectType returns the ToObjectType field value if set, zero value otherwise.
func (o *AssociationDefinition) GetToObjectType() string {
	if o == nil || IsNil(o.ToObjectType) {
		var ret string
		return ret
	}
	return *o.ToObjectType
}

// GetToObjectTypeOk returns a tuple with the ToObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetToObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ToObjectType) {
		return nil, false
	}
	return o.ToObjectType, true
}

// HasToObjectType returns a boolean if a field has been set.
func (o *AssociationDefinition) HasToObjectType() bool {
	if o != nil && !IsNil(o.ToObjectType) {
		return true
	}

	return false
}

// SetToObjectType gets a reference to the given string and assigns it to the ToObjectType field.
func (o *AssociationDefinition) SetToObjectType(v string) {
	o.ToObjectType = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *AssociationDefinition) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *AssociationDefinition) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *AssociationDefinition) SetLabel(v string) {
	o.Label = &v
}

// GetInverseId returns the InverseId field value
func (o *AssociationDefinition) GetInverseId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InverseId
}

// GetInverseIdOk returns a tuple with the InverseId field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetInverseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InverseId, true
}

// SetInverseId sets field value
func (o *AssociationDefinition) SetInverseId(v int32) {
	o.InverseId = v
}

// GetCardinality returns the Cardinality field value
func (o *AssociationDefinition) GetCardinality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cardinality
}

// GetCardinalityOk returns a tuple with the Cardinality field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetCardinalityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cardinality, true
}

// SetCardinality sets field value
func (o *AssociationDefinition) SetCardinality(v string) {
	o.Cardinality = v
}

// GetInverseName returns the InverseName field value
func (o *AssociationDefinition) GetInverseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InverseName
}

// GetInverseNameOk returns a tuple with the InverseName field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetInverseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InverseName, true
}

// SetInverseName sets field value
func (o *AssociationDefinition) SetInverseName(v string) {
	o.InverseName = v
}

// GetHasAllAssociatedObjects returns the HasAllAssociatedObjects field value
func (o *AssociationDefinition) GetHasAllAssociatedObjects() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasAllAssociatedObjects
}

// GetHasAllAssociatedObjectsOk returns a tuple with the HasAllAssociatedObjects field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetHasAllAssociatedObjectsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasAllAssociatedObjects, true
}

// SetHasAllAssociatedObjects sets field value
func (o *AssociationDefinition) SetHasAllAssociatedObjects(v bool) {
	o.HasAllAssociatedObjects = v
}

// GetInverseHasAllAssociatedObjects returns the InverseHasAllAssociatedObjects field value
func (o *AssociationDefinition) GetInverseHasAllAssociatedObjects() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InverseHasAllAssociatedObjects
}

// GetInverseHasAllAssociatedObjectsOk returns a tuple with the InverseHasAllAssociatedObjects field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetInverseHasAllAssociatedObjectsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InverseHasAllAssociatedObjects, true
}

// SetInverseHasAllAssociatedObjects sets field value
func (o *AssociationDefinition) SetInverseHasAllAssociatedObjects(v bool) {
	o.InverseHasAllAssociatedObjects = v
}

// GetFromObjectTypeId returns the FromObjectTypeId field value
func (o *AssociationDefinition) GetFromObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromObjectTypeId
}

// GetFromObjectTypeIdOk returns a tuple with the FromObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetFromObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromObjectTypeId, true
}

// SetFromObjectTypeId sets field value
func (o *AssociationDefinition) SetFromObjectTypeId(v string) {
	o.FromObjectTypeId = v
}

// GetPortalUniqueIdentifier returns the PortalUniqueIdentifier field value
func (o *AssociationDefinition) GetPortalUniqueIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PortalUniqueIdentifier
}

// GetPortalUniqueIdentifierOk returns a tuple with the PortalUniqueIdentifier field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetPortalUniqueIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortalUniqueIdentifier, true
}

// SetPortalUniqueIdentifier sets field value
func (o *AssociationDefinition) SetPortalUniqueIdentifier(v string) {
	o.PortalUniqueIdentifier = v
}

// GetIsInversePrimary returns the IsInversePrimary field value
func (o *AssociationDefinition) GetIsInversePrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsInversePrimary
}

// GetIsInversePrimaryOk returns a tuple with the IsInversePrimary field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetIsInversePrimaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsInversePrimary, true
}

// SetIsInversePrimary sets field value
func (o *AssociationDefinition) SetIsInversePrimary(v bool) {
	o.IsInversePrimary = v
}

// GetName returns the Name field value
func (o *AssociationDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AssociationDefinition) SetName(v string) {
	o.Name = v
}

// GetCategory returns the Category field value
func (o *AssociationDefinition) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *AssociationDefinition) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *AssociationDefinition) SetCategory(v string) {
	o.Category = v
}

func (o AssociationDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssociationDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InverseLabel) {
		toSerialize["inverseLabel"] = o.InverseLabel
	}
	toSerialize["hidden"] = o.Hidden
	toSerialize["allowsCustomLabels"] = o.AllowsCustomLabels
	toSerialize["maxFromObjectIds"] = o.MaxFromObjectIds
	toSerialize["inverseAllowsCustomLabels"] = o.InverseAllowsCustomLabels
	toSerialize["isPrimary"] = o.IsPrimary
	toSerialize["hasUserEnforcedMaxToObjectIds"] = o.HasUserEnforcedMaxToObjectIds
	toSerialize["hasUserEnforcedMaxFromObjectIds"] = o.HasUserEnforcedMaxFromObjectIds
	toSerialize["id"] = o.Id
	toSerialize["toObjectTypeId"] = o.ToObjectTypeId
	toSerialize["inverseCardinality"] = o.InverseCardinality
	toSerialize["maxToObjectIds"] = o.MaxToObjectIds
	toSerialize["hasCascadingDeletes"] = o.HasCascadingDeletes
	if !IsNil(o.FromObjectType) {
		toSerialize["fromObjectType"] = o.FromObjectType
	}
	if !IsNil(o.ToObjectType) {
		toSerialize["toObjectType"] = o.ToObjectType
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["inverseId"] = o.InverseId
	toSerialize["cardinality"] = o.Cardinality
	toSerialize["inverseName"] = o.InverseName
	toSerialize["hasAllAssociatedObjects"] = o.HasAllAssociatedObjects
	toSerialize["inverseHasAllAssociatedObjects"] = o.InverseHasAllAssociatedObjects
	toSerialize["fromObjectTypeId"] = o.FromObjectTypeId
	toSerialize["portalUniqueIdentifier"] = o.PortalUniqueIdentifier
	toSerialize["isInversePrimary"] = o.IsInversePrimary
	toSerialize["name"] = o.Name
	toSerialize["category"] = o.Category
	return toSerialize, nil
}

func (o *AssociationDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hidden",
		"allowsCustomLabels",
		"maxFromObjectIds",
		"inverseAllowsCustomLabels",
		"isPrimary",
		"hasUserEnforcedMaxToObjectIds",
		"hasUserEnforcedMaxFromObjectIds",
		"id",
		"toObjectTypeId",
		"inverseCardinality",
		"maxToObjectIds",
		"hasCascadingDeletes",
		"inverseId",
		"cardinality",
		"inverseName",
		"hasAllAssociatedObjects",
		"inverseHasAllAssociatedObjects",
		"fromObjectTypeId",
		"portalUniqueIdentifier",
		"isInversePrimary",
		"name",
		"category",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssociationDefinition := _AssociationDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssociationDefinition)

	if err != nil {
		return err
	}

	*o = AssociationDefinition(varAssociationDefinition)

	return err
}

type NullableAssociationDefinition struct {
	value *AssociationDefinition
	isSet bool
}

func (v NullableAssociationDefinition) Get() *AssociationDefinition {
	return v.value
}

func (v *NullableAssociationDefinition) Set(val *AssociationDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociationDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociationDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociationDefinition(val *AssociationDefinition) *NullableAssociationDefinition {
	return &NullableAssociationDefinition{value: val, isSet: true}
}

func (v NullableAssociationDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociationDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


