/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AllPropertyTypesOperationCoalescingRefineBy - struct for AllPropertyTypesOperationCoalescingRefineBy
type AllPropertyTypesOperationCoalescingRefineBy struct {
	NumOccurrencesRefineBy *NumOccurrencesRefineBy
	SetOccurrencesRefineBy *SetOccurrencesRefineBy
}

// NumOccurrencesRefineByAsAllPropertyTypesOperationCoalescingRefineBy is a convenience function that returns NumOccurrencesRefineBy wrapped in AllPropertyTypesOperationCoalescingRefineBy
func NumOccurrencesRefineByAsAllPropertyTypesOperationCoalescingRefineBy(v *NumOccurrencesRefineBy) AllPropertyTypesOperationCoalescingRefineBy {
	return AllPropertyTypesOperationCoalescingRefineBy{
		NumOccurrencesRefineBy: v,
	}
}

// SetOccurrencesRefineByAsAllPropertyTypesOperationCoalescingRefineBy is a convenience function that returns SetOccurrencesRefineBy wrapped in AllPropertyTypesOperationCoalescingRefineBy
func SetOccurrencesRefineByAsAllPropertyTypesOperationCoalescingRefineBy(v *SetOccurrencesRefineBy) AllPropertyTypesOperationCoalescingRefineBy {
	return AllPropertyTypesOperationCoalescingRefineBy{
		SetOccurrencesRefineBy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AllPropertyTypesOperationCoalescingRefineBy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NumOccurrencesRefineBy
	err = newStrictDecoder(data).Decode(&dst.NumOccurrencesRefineBy)
	if err == nil {
		jsonNumOccurrencesRefineBy, _ := json.Marshal(dst.NumOccurrencesRefineBy)
		if string(jsonNumOccurrencesRefineBy) == "{}" { // empty struct
			dst.NumOccurrencesRefineBy = nil
		} else {
			if err = validator.Validate(dst.NumOccurrencesRefineBy); err != nil {
				dst.NumOccurrencesRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.NumOccurrencesRefineBy = nil
	}

	// try to unmarshal data into SetOccurrencesRefineBy
	err = newStrictDecoder(data).Decode(&dst.SetOccurrencesRefineBy)
	if err == nil {
		jsonSetOccurrencesRefineBy, _ := json.Marshal(dst.SetOccurrencesRefineBy)
		if string(jsonSetOccurrencesRefineBy) == "{}" { // empty struct
			dst.SetOccurrencesRefineBy = nil
		} else {
			if err = validator.Validate(dst.SetOccurrencesRefineBy); err != nil {
				dst.SetOccurrencesRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.SetOccurrencesRefineBy = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NumOccurrencesRefineBy = nil
		dst.SetOccurrencesRefineBy = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AllPropertyTypesOperationCoalescingRefineBy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AllPropertyTypesOperationCoalescingRefineBy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AllPropertyTypesOperationCoalescingRefineBy) MarshalJSON() ([]byte, error) {
	if src.NumOccurrencesRefineBy != nil {
		return json.Marshal(&src.NumOccurrencesRefineBy)
	}

	if src.SetOccurrencesRefineBy != nil {
		return json.Marshal(&src.SetOccurrencesRefineBy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AllPropertyTypesOperationCoalescingRefineBy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NumOccurrencesRefineBy != nil {
		return obj.NumOccurrencesRefineBy
	}

	if obj.SetOccurrencesRefineBy != nil {
		return obj.SetOccurrencesRefineBy
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AllPropertyTypesOperationCoalescingRefineBy) GetActualInstanceValue() (interface{}) {
	if obj.NumOccurrencesRefineBy != nil {
		return *obj.NumOccurrencesRefineBy
	}

	if obj.SetOccurrencesRefineBy != nil {
		return *obj.SetOccurrencesRefineBy
	}

	// all schemas are nil
	return nil
}

type NullableAllPropertyTypesOperationCoalescingRefineBy struct {
	value *AllPropertyTypesOperationCoalescingRefineBy
	isSet bool
}

func (v NullableAllPropertyTypesOperationCoalescingRefineBy) Get() *AllPropertyTypesOperationCoalescingRefineBy {
	return v.value
}

func (v *NullableAllPropertyTypesOperationCoalescingRefineBy) Set(val *AllPropertyTypesOperationCoalescingRefineBy) {
	v.value = val
	v.isSet = true
}

func (v NullableAllPropertyTypesOperationCoalescingRefineBy) IsSet() bool {
	return v.isSet
}

func (v *NullableAllPropertyTypesOperationCoalescingRefineBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllPropertyTypesOperationCoalescingRefineBy(val *AllPropertyTypesOperationCoalescingRefineBy) *NullableAllPropertyTypesOperationCoalescingRefineBy {
	return &NullableAllPropertyTypesOperationCoalescingRefineBy{value: val, isSet: true}
}

func (v NullableAllPropertyTypesOperationCoalescingRefineBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllPropertyTypesOperationCoalescingRefineBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


