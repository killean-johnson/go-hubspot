/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PropertyFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyFilter{}

// PropertyFilter struct for PropertyFilter
type PropertyFilter struct {
	FrameworkFilterId *int64 `json:"frameworkFilterId,omitempty"`
	Property string `json:"property"`
	FilterType string `json:"filterType"`
	Operation PropertyFilterOperation `json:"operation"`
}

type _PropertyFilter PropertyFilter

// NewPropertyFilter instantiates a new PropertyFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyFilter(property string, filterType string, operation PropertyFilterOperation) *PropertyFilter {
	this := PropertyFilter{}
	this.Property = property
	this.FilterType = filterType
	this.Operation = operation
	return &this
}

// NewPropertyFilterWithDefaults instantiates a new PropertyFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyFilterWithDefaults() *PropertyFilter {
	this := PropertyFilter{}
	var filterType string = "PROPERTY"
	this.FilterType = filterType
	return &this
}

// GetFrameworkFilterId returns the FrameworkFilterId field value if set, zero value otherwise.
func (o *PropertyFilter) GetFrameworkFilterId() int64 {
	if o == nil || IsNil(o.FrameworkFilterId) {
		var ret int64
		return ret
	}
	return *o.FrameworkFilterId
}

// GetFrameworkFilterIdOk returns a tuple with the FrameworkFilterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyFilter) GetFrameworkFilterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FrameworkFilterId) {
		return nil, false
	}
	return o.FrameworkFilterId, true
}

// HasFrameworkFilterId returns a boolean if a field has been set.
func (o *PropertyFilter) HasFrameworkFilterId() bool {
	if o != nil && !IsNil(o.FrameworkFilterId) {
		return true
	}

	return false
}

// SetFrameworkFilterId gets a reference to the given int64 and assigns it to the FrameworkFilterId field.
func (o *PropertyFilter) SetFrameworkFilterId(v int64) {
	o.FrameworkFilterId = &v
}

// GetProperty returns the Property field value
func (o *PropertyFilter) GetProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *PropertyFilter) GetPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *PropertyFilter) SetProperty(v string) {
	o.Property = v
}

// GetFilterType returns the FilterType field value
func (o *PropertyFilter) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *PropertyFilter) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *PropertyFilter) SetFilterType(v string) {
	o.FilterType = v
}

// GetOperation returns the Operation field value
func (o *PropertyFilter) GetOperation() PropertyFilterOperation {
	if o == nil {
		var ret PropertyFilterOperation
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *PropertyFilter) GetOperationOk() (*PropertyFilterOperation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *PropertyFilter) SetOperation(v PropertyFilterOperation) {
	o.Operation = v
}

func (o PropertyFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FrameworkFilterId) {
		toSerialize["frameworkFilterId"] = o.FrameworkFilterId
	}
	toSerialize["property"] = o.Property
	toSerialize["filterType"] = o.FilterType
	toSerialize["operation"] = o.Operation
	return toSerialize, nil
}

func (o *PropertyFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"property",
		"filterType",
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPropertyFilter := _PropertyFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPropertyFilter)

	if err != nil {
		return err
	}

	*o = PropertyFilter(varPropertyFilter)

	return err
}

type NullablePropertyFilter struct {
	value *PropertyFilter
	isSet bool
}

func (v NullablePropertyFilter) Get() *PropertyFilter {
	return v.value
}

func (v *NullablePropertyFilter) Set(val *PropertyFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyFilter(val *PropertyFilter) *NullablePropertyFilter {
	return &NullablePropertyFilter{value: val, isSet: true}
}

func (v NullablePropertyFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


