/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FiscalQuarter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiscalQuarter{}

// FiscalQuarter struct for FiscalQuarter
type FiscalQuarter struct {
	Hour *int32 `json:"hour,omitempty"`
	Month int32 `json:"month"`
	Millisecond *int32 `json:"millisecond,omitempty"`
	ReferenceType string `json:"referenceType"`
	Day int32 `json:"day"`
	Minute *int32 `json:"minute,omitempty"`
	Second *int32 `json:"second,omitempty"`
}

type _FiscalQuarter FiscalQuarter

// NewFiscalQuarter instantiates a new FiscalQuarter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiscalQuarter(month int32, referenceType string, day int32) *FiscalQuarter {
	this := FiscalQuarter{}
	this.Month = month
	this.ReferenceType = referenceType
	this.Day = day
	return &this
}

// NewFiscalQuarterWithDefaults instantiates a new FiscalQuarter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiscalQuarterWithDefaults() *FiscalQuarter {
	this := FiscalQuarter{}
	var referenceType string = "FISCAL_QUARTER"
	this.ReferenceType = referenceType
	return &this
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *FiscalQuarter) GetHour() int32 {
	if o == nil || IsNil(o.Hour) {
		var ret int32
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalQuarter) GetHourOk() (*int32, bool) {
	if o == nil || IsNil(o.Hour) {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *FiscalQuarter) HasHour() bool {
	if o != nil && !IsNil(o.Hour) {
		return true
	}

	return false
}

// SetHour gets a reference to the given int32 and assigns it to the Hour field.
func (o *FiscalQuarter) SetHour(v int32) {
	o.Hour = &v
}

// GetMonth returns the Month field value
func (o *FiscalQuarter) GetMonth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *FiscalQuarter) GetMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *FiscalQuarter) SetMonth(v int32) {
	o.Month = v
}

// GetMillisecond returns the Millisecond field value if set, zero value otherwise.
func (o *FiscalQuarter) GetMillisecond() int32 {
	if o == nil || IsNil(o.Millisecond) {
		var ret int32
		return ret
	}
	return *o.Millisecond
}

// GetMillisecondOk returns a tuple with the Millisecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalQuarter) GetMillisecondOk() (*int32, bool) {
	if o == nil || IsNil(o.Millisecond) {
		return nil, false
	}
	return o.Millisecond, true
}

// HasMillisecond returns a boolean if a field has been set.
func (o *FiscalQuarter) HasMillisecond() bool {
	if o != nil && !IsNil(o.Millisecond) {
		return true
	}

	return false
}

// SetMillisecond gets a reference to the given int32 and assigns it to the Millisecond field.
func (o *FiscalQuarter) SetMillisecond(v int32) {
	o.Millisecond = &v
}

// GetReferenceType returns the ReferenceType field value
func (o *FiscalQuarter) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *FiscalQuarter) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *FiscalQuarter) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetDay returns the Day field value
func (o *FiscalQuarter) GetDay() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Day
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
func (o *FiscalQuarter) GetDayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Day, true
}

// SetDay sets field value
func (o *FiscalQuarter) SetDay(v int32) {
	o.Day = v
}

// GetMinute returns the Minute field value if set, zero value otherwise.
func (o *FiscalQuarter) GetMinute() int32 {
	if o == nil || IsNil(o.Minute) {
		var ret int32
		return ret
	}
	return *o.Minute
}

// GetMinuteOk returns a tuple with the Minute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalQuarter) GetMinuteOk() (*int32, bool) {
	if o == nil || IsNil(o.Minute) {
		return nil, false
	}
	return o.Minute, true
}

// HasMinute returns a boolean if a field has been set.
func (o *FiscalQuarter) HasMinute() bool {
	if o != nil && !IsNil(o.Minute) {
		return true
	}

	return false
}

// SetMinute gets a reference to the given int32 and assigns it to the Minute field.
func (o *FiscalQuarter) SetMinute(v int32) {
	o.Minute = &v
}

// GetSecond returns the Second field value if set, zero value otherwise.
func (o *FiscalQuarter) GetSecond() int32 {
	if o == nil || IsNil(o.Second) {
		var ret int32
		return ret
	}
	return *o.Second
}

// GetSecondOk returns a tuple with the Second field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalQuarter) GetSecondOk() (*int32, bool) {
	if o == nil || IsNil(o.Second) {
		return nil, false
	}
	return o.Second, true
}

// HasSecond returns a boolean if a field has been set.
func (o *FiscalQuarter) HasSecond() bool {
	if o != nil && !IsNil(o.Second) {
		return true
	}

	return false
}

// SetSecond gets a reference to the given int32 and assigns it to the Second field.
func (o *FiscalQuarter) SetSecond(v int32) {
	o.Second = &v
}

func (o FiscalQuarter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiscalQuarter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hour) {
		toSerialize["hour"] = o.Hour
	}
	toSerialize["month"] = o.Month
	if !IsNil(o.Millisecond) {
		toSerialize["millisecond"] = o.Millisecond
	}
	toSerialize["referenceType"] = o.ReferenceType
	toSerialize["day"] = o.Day
	if !IsNil(o.Minute) {
		toSerialize["minute"] = o.Minute
	}
	if !IsNil(o.Second) {
		toSerialize["second"] = o.Second
	}
	return toSerialize, nil
}

func (o *FiscalQuarter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"month",
		"referenceType",
		"day",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFiscalQuarter := _FiscalQuarter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFiscalQuarter)

	if err != nil {
		return err
	}

	*o = FiscalQuarter(varFiscalQuarter)

	return err
}

type NullableFiscalQuarter struct {
	value *FiscalQuarter
	isSet bool
}

func (v NullableFiscalQuarter) Get() *FiscalQuarter {
	return v.value
}

func (v *NullableFiscalQuarter) Set(val *FiscalQuarter) {
	v.value = val
	v.isSet = true
}

func (v NullableFiscalQuarter) IsSet() bool {
	return v.isSet
}

func (v *NullableFiscalQuarter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiscalQuarter(val *FiscalQuarter) *NullableFiscalQuarter {
	return &NullableFiscalQuarter{value: val, isSet: true}
}

func (v NullableFiscalQuarter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiscalQuarter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


