/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RangedTimeOperationUpperBoundTimePoint - struct for RangedTimeOperationUpperBoundTimePoint
type RangedTimeOperationUpperBoundTimePoint struct {
	DatePoint *DatePoint
	IndexedTimePoint *IndexedTimePoint
	PropertyReferencedTime *PropertyReferencedTime
}

// DatePointAsRangedTimeOperationUpperBoundTimePoint is a convenience function that returns DatePoint wrapped in RangedTimeOperationUpperBoundTimePoint
func DatePointAsRangedTimeOperationUpperBoundTimePoint(v *DatePoint) RangedTimeOperationUpperBoundTimePoint {
	return RangedTimeOperationUpperBoundTimePoint{
		DatePoint: v,
	}
}

// IndexedTimePointAsRangedTimeOperationUpperBoundTimePoint is a convenience function that returns IndexedTimePoint wrapped in RangedTimeOperationUpperBoundTimePoint
func IndexedTimePointAsRangedTimeOperationUpperBoundTimePoint(v *IndexedTimePoint) RangedTimeOperationUpperBoundTimePoint {
	return RangedTimeOperationUpperBoundTimePoint{
		IndexedTimePoint: v,
	}
}

// PropertyReferencedTimeAsRangedTimeOperationUpperBoundTimePoint is a convenience function that returns PropertyReferencedTime wrapped in RangedTimeOperationUpperBoundTimePoint
func PropertyReferencedTimeAsRangedTimeOperationUpperBoundTimePoint(v *PropertyReferencedTime) RangedTimeOperationUpperBoundTimePoint {
	return RangedTimeOperationUpperBoundTimePoint{
		PropertyReferencedTime: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RangedTimeOperationUpperBoundTimePoint) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DatePoint
	err = newStrictDecoder(data).Decode(&dst.DatePoint)
	if err == nil {
		jsonDatePoint, _ := json.Marshal(dst.DatePoint)
		if string(jsonDatePoint) == "{}" { // empty struct
			dst.DatePoint = nil
		} else {
			if err = validator.Validate(dst.DatePoint); err != nil {
				dst.DatePoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.DatePoint = nil
	}

	// try to unmarshal data into IndexedTimePoint
	err = newStrictDecoder(data).Decode(&dst.IndexedTimePoint)
	if err == nil {
		jsonIndexedTimePoint, _ := json.Marshal(dst.IndexedTimePoint)
		if string(jsonIndexedTimePoint) == "{}" { // empty struct
			dst.IndexedTimePoint = nil
		} else {
			if err = validator.Validate(dst.IndexedTimePoint); err != nil {
				dst.IndexedTimePoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.IndexedTimePoint = nil
	}

	// try to unmarshal data into PropertyReferencedTime
	err = newStrictDecoder(data).Decode(&dst.PropertyReferencedTime)
	if err == nil {
		jsonPropertyReferencedTime, _ := json.Marshal(dst.PropertyReferencedTime)
		if string(jsonPropertyReferencedTime) == "{}" { // empty struct
			dst.PropertyReferencedTime = nil
		} else {
			if err = validator.Validate(dst.PropertyReferencedTime); err != nil {
				dst.PropertyReferencedTime = nil
			} else {
				match++
			}
		}
	} else {
		dst.PropertyReferencedTime = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DatePoint = nil
		dst.IndexedTimePoint = nil
		dst.PropertyReferencedTime = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RangedTimeOperationUpperBoundTimePoint)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RangedTimeOperationUpperBoundTimePoint)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RangedTimeOperationUpperBoundTimePoint) MarshalJSON() ([]byte, error) {
	if src.DatePoint != nil {
		return json.Marshal(&src.DatePoint)
	}

	if src.IndexedTimePoint != nil {
		return json.Marshal(&src.IndexedTimePoint)
	}

	if src.PropertyReferencedTime != nil {
		return json.Marshal(&src.PropertyReferencedTime)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RangedTimeOperationUpperBoundTimePoint) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DatePoint != nil {
		return obj.DatePoint
	}

	if obj.IndexedTimePoint != nil {
		return obj.IndexedTimePoint
	}

	if obj.PropertyReferencedTime != nil {
		return obj.PropertyReferencedTime
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RangedTimeOperationUpperBoundTimePoint) GetActualInstanceValue() (interface{}) {
	if obj.DatePoint != nil {
		return *obj.DatePoint
	}

	if obj.IndexedTimePoint != nil {
		return *obj.IndexedTimePoint
	}

	if obj.PropertyReferencedTime != nil {
		return *obj.PropertyReferencedTime
	}

	// all schemas are nil
	return nil
}

type NullableRangedTimeOperationUpperBoundTimePoint struct {
	value *RangedTimeOperationUpperBoundTimePoint
	isSet bool
}

func (v NullableRangedTimeOperationUpperBoundTimePoint) Get() *RangedTimeOperationUpperBoundTimePoint {
	return v.value
}

func (v *NullableRangedTimeOperationUpperBoundTimePoint) Set(val *RangedTimeOperationUpperBoundTimePoint) {
	v.value = val
	v.isSet = true
}

func (v NullableRangedTimeOperationUpperBoundTimePoint) IsSet() bool {
	return v.isSet
}

func (v *NullableRangedTimeOperationUpperBoundTimePoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangedTimeOperationUpperBoundTimePoint(val *RangedTimeOperationUpperBoundTimePoint) *NullableRangedTimeOperationUpperBoundTimePoint {
	return &NullableRangedTimeOperationUpperBoundTimePoint{value: val, isSet: true}
}

func (v NullableRangedTimeOperationUpperBoundTimePoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangedTimeOperationUpperBoundTimePoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


