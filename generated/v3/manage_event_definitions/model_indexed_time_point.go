/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IndexedTimePoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexedTimePoint{}

// IndexedTimePoint struct for IndexedTimePoint
type IndexedTimePoint struct {
	Offset *IndexOffset `json:"offset,omitempty"`
	TimezoneSource string `json:"timezoneSource"`
	IndexReference IndexedTimePointIndexReference `json:"indexReference"`
	TimeType string `json:"timeType"`
	ZoneId string `json:"zoneId"`
}

type _IndexedTimePoint IndexedTimePoint

// NewIndexedTimePoint instantiates a new IndexedTimePoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexedTimePoint(timezoneSource string, indexReference IndexedTimePointIndexReference, timeType string, zoneId string) *IndexedTimePoint {
	this := IndexedTimePoint{}
	this.TimezoneSource = timezoneSource
	this.IndexReference = indexReference
	this.TimeType = timeType
	this.ZoneId = zoneId
	return &this
}

// NewIndexedTimePointWithDefaults instantiates a new IndexedTimePoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexedTimePointWithDefaults() *IndexedTimePoint {
	this := IndexedTimePoint{}
	var timeType string = "INDEXED"
	this.TimeType = timeType
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *IndexedTimePoint) GetOffset() IndexOffset {
	if o == nil || IsNil(o.Offset) {
		var ret IndexOffset
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexedTimePoint) GetOffsetOk() (*IndexOffset, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *IndexedTimePoint) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given IndexOffset and assigns it to the Offset field.
func (o *IndexedTimePoint) SetOffset(v IndexOffset) {
	o.Offset = &v
}

// GetTimezoneSource returns the TimezoneSource field value
func (o *IndexedTimePoint) GetTimezoneSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimezoneSource
}

// GetTimezoneSourceOk returns a tuple with the TimezoneSource field value
// and a boolean to check if the value has been set.
func (o *IndexedTimePoint) GetTimezoneSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimezoneSource, true
}

// SetTimezoneSource sets field value
func (o *IndexedTimePoint) SetTimezoneSource(v string) {
	o.TimezoneSource = v
}

// GetIndexReference returns the IndexReference field value
func (o *IndexedTimePoint) GetIndexReference() IndexedTimePointIndexReference {
	if o == nil {
		var ret IndexedTimePointIndexReference
		return ret
	}

	return o.IndexReference
}

// GetIndexReferenceOk returns a tuple with the IndexReference field value
// and a boolean to check if the value has been set.
func (o *IndexedTimePoint) GetIndexReferenceOk() (*IndexedTimePointIndexReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexReference, true
}

// SetIndexReference sets field value
func (o *IndexedTimePoint) SetIndexReference(v IndexedTimePointIndexReference) {
	o.IndexReference = v
}

// GetTimeType returns the TimeType field value
func (o *IndexedTimePoint) GetTimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeType
}

// GetTimeTypeOk returns a tuple with the TimeType field value
// and a boolean to check if the value has been set.
func (o *IndexedTimePoint) GetTimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeType, true
}

// SetTimeType sets field value
func (o *IndexedTimePoint) SetTimeType(v string) {
	o.TimeType = v
}

// GetZoneId returns the ZoneId field value
func (o *IndexedTimePoint) GetZoneId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value
// and a boolean to check if the value has been set.
func (o *IndexedTimePoint) GetZoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneId, true
}

// SetZoneId sets field value
func (o *IndexedTimePoint) SetZoneId(v string) {
	o.ZoneId = v
}

func (o IndexedTimePoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndexedTimePoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	toSerialize["timezoneSource"] = o.TimezoneSource
	toSerialize["indexReference"] = o.IndexReference
	toSerialize["timeType"] = o.TimeType
	toSerialize["zoneId"] = o.ZoneId
	return toSerialize, nil
}

func (o *IndexedTimePoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timezoneSource",
		"indexReference",
		"timeType",
		"zoneId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIndexedTimePoint := _IndexedTimePoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIndexedTimePoint)

	if err != nil {
		return err
	}

	*o = IndexedTimePoint(varIndexedTimePoint)

	return err
}

type NullableIndexedTimePoint struct {
	value *IndexedTimePoint
	isSet bool
}

func (v NullableIndexedTimePoint) Get() *IndexedTimePoint {
	return v.value
}

func (v *NullableIndexedTimePoint) Set(val *IndexedTimePoint) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexedTimePoint) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexedTimePoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexedTimePoint(val *IndexedTimePoint) *NullableIndexedTimePoint {
	return &NullableIndexedTimePoint{value: val, isSet: true}
}

func (v NullableIndexedTimePoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexedTimePoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


