/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PropertyReferencedTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyReferencedTime{}

// PropertyReferencedTime struct for PropertyReferencedTime
type PropertyReferencedTime struct {
	TimezoneSource string `json:"timezoneSource"`
	Property string `json:"property"`
	TimeType string `json:"timeType"`
	ZoneId string `json:"zoneId"`
	ReferenceType string `json:"referenceType"`
}

type _PropertyReferencedTime PropertyReferencedTime

// NewPropertyReferencedTime instantiates a new PropertyReferencedTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyReferencedTime(timezoneSource string, property string, timeType string, zoneId string, referenceType string) *PropertyReferencedTime {
	this := PropertyReferencedTime{}
	this.TimezoneSource = timezoneSource
	this.Property = property
	this.TimeType = timeType
	this.ZoneId = zoneId
	this.ReferenceType = referenceType
	return &this
}

// NewPropertyReferencedTimeWithDefaults instantiates a new PropertyReferencedTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyReferencedTimeWithDefaults() *PropertyReferencedTime {
	this := PropertyReferencedTime{}
	var timeType string = "PROPERTY_REFERENCED"
	this.TimeType = timeType
	return &this
}

// GetTimezoneSource returns the TimezoneSource field value
func (o *PropertyReferencedTime) GetTimezoneSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimezoneSource
}

// GetTimezoneSourceOk returns a tuple with the TimezoneSource field value
// and a boolean to check if the value has been set.
func (o *PropertyReferencedTime) GetTimezoneSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimezoneSource, true
}

// SetTimezoneSource sets field value
func (o *PropertyReferencedTime) SetTimezoneSource(v string) {
	o.TimezoneSource = v
}

// GetProperty returns the Property field value
func (o *PropertyReferencedTime) GetProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *PropertyReferencedTime) GetPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *PropertyReferencedTime) SetProperty(v string) {
	o.Property = v
}

// GetTimeType returns the TimeType field value
func (o *PropertyReferencedTime) GetTimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeType
}

// GetTimeTypeOk returns a tuple with the TimeType field value
// and a boolean to check if the value has been set.
func (o *PropertyReferencedTime) GetTimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeType, true
}

// SetTimeType sets field value
func (o *PropertyReferencedTime) SetTimeType(v string) {
	o.TimeType = v
}

// GetZoneId returns the ZoneId field value
func (o *PropertyReferencedTime) GetZoneId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value
// and a boolean to check if the value has been set.
func (o *PropertyReferencedTime) GetZoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneId, true
}

// SetZoneId sets field value
func (o *PropertyReferencedTime) SetZoneId(v string) {
	o.ZoneId = v
}

// GetReferenceType returns the ReferenceType field value
func (o *PropertyReferencedTime) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *PropertyReferencedTime) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *PropertyReferencedTime) SetReferenceType(v string) {
	o.ReferenceType = v
}

func (o PropertyReferencedTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyReferencedTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timezoneSource"] = o.TimezoneSource
	toSerialize["property"] = o.Property
	toSerialize["timeType"] = o.TimeType
	toSerialize["zoneId"] = o.ZoneId
	toSerialize["referenceType"] = o.ReferenceType
	return toSerialize, nil
}

func (o *PropertyReferencedTime) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timezoneSource",
		"property",
		"timeType",
		"zoneId",
		"referenceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPropertyReferencedTime := _PropertyReferencedTime{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPropertyReferencedTime)

	if err != nil {
		return err
	}

	*o = PropertyReferencedTime(varPropertyReferencedTime)

	return err
}

type NullablePropertyReferencedTime struct {
	value *PropertyReferencedTime
	isSet bool
}

func (v NullablePropertyReferencedTime) Get() *PropertyReferencedTime {
	return v.value
}

func (v *NullablePropertyReferencedTime) Set(val *PropertyReferencedTime) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyReferencedTime) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyReferencedTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyReferencedTime(val *PropertyReferencedTime) *NullablePropertyReferencedTime {
	return &NullablePropertyReferencedTime{value: val, isSet: true}
}

func (v NullablePropertyReferencedTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyReferencedTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


