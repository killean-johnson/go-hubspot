/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PropertyFilterOperation - struct for PropertyFilterOperation
type PropertyFilterOperation struct {
	AllPropertyTypesOperation *AllPropertyTypesOperation
	BoolPropertyOperation *BoolPropertyOperation
	CalendarDatePropertyOperation *CalendarDatePropertyOperation
	ComparativeDatePropertyOperation *ComparativeDatePropertyOperation
	ComparativePropertyUpdatedOperation *ComparativePropertyUpdatedOperation
	DatePropertyOperation *DatePropertyOperation
	DateTimePropertyOperation *DateTimePropertyOperation
	EnumerationPropertyOperation *EnumerationPropertyOperation
	MultiStringPropertyOperation *MultiStringPropertyOperation
	NumberPropertyOperation *NumberPropertyOperation
	RangedDatePropertyOperation *RangedDatePropertyOperation
	RangedNumberPropertyOperation *RangedNumberPropertyOperation
	RangedTimeOperation *RangedTimeOperation
	RollingDateRangePropertyOperation *RollingDateRangePropertyOperation
	RollingPropertyUpdatedOperation *RollingPropertyUpdatedOperation
	StringPropertyOperation *StringPropertyOperation
	TimePointOperation *TimePointOperation
}

// AllPropertyTypesOperationAsPropertyFilterOperation is a convenience function that returns AllPropertyTypesOperation wrapped in PropertyFilterOperation
func AllPropertyTypesOperationAsPropertyFilterOperation(v *AllPropertyTypesOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		AllPropertyTypesOperation: v,
	}
}

// BoolPropertyOperationAsPropertyFilterOperation is a convenience function that returns BoolPropertyOperation wrapped in PropertyFilterOperation
func BoolPropertyOperationAsPropertyFilterOperation(v *BoolPropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		BoolPropertyOperation: v,
	}
}

// CalendarDatePropertyOperationAsPropertyFilterOperation is a convenience function that returns CalendarDatePropertyOperation wrapped in PropertyFilterOperation
func CalendarDatePropertyOperationAsPropertyFilterOperation(v *CalendarDatePropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		CalendarDatePropertyOperation: v,
	}
}

// ComparativeDatePropertyOperationAsPropertyFilterOperation is a convenience function that returns ComparativeDatePropertyOperation wrapped in PropertyFilterOperation
func ComparativeDatePropertyOperationAsPropertyFilterOperation(v *ComparativeDatePropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		ComparativeDatePropertyOperation: v,
	}
}

// ComparativePropertyUpdatedOperationAsPropertyFilterOperation is a convenience function that returns ComparativePropertyUpdatedOperation wrapped in PropertyFilterOperation
func ComparativePropertyUpdatedOperationAsPropertyFilterOperation(v *ComparativePropertyUpdatedOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		ComparativePropertyUpdatedOperation: v,
	}
}

// DatePropertyOperationAsPropertyFilterOperation is a convenience function that returns DatePropertyOperation wrapped in PropertyFilterOperation
func DatePropertyOperationAsPropertyFilterOperation(v *DatePropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		DatePropertyOperation: v,
	}
}

// DateTimePropertyOperationAsPropertyFilterOperation is a convenience function that returns DateTimePropertyOperation wrapped in PropertyFilterOperation
func DateTimePropertyOperationAsPropertyFilterOperation(v *DateTimePropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		DateTimePropertyOperation: v,
	}
}

// EnumerationPropertyOperationAsPropertyFilterOperation is a convenience function that returns EnumerationPropertyOperation wrapped in PropertyFilterOperation
func EnumerationPropertyOperationAsPropertyFilterOperation(v *EnumerationPropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		EnumerationPropertyOperation: v,
	}
}

// MultiStringPropertyOperationAsPropertyFilterOperation is a convenience function that returns MultiStringPropertyOperation wrapped in PropertyFilterOperation
func MultiStringPropertyOperationAsPropertyFilterOperation(v *MultiStringPropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		MultiStringPropertyOperation: v,
	}
}

// NumberPropertyOperationAsPropertyFilterOperation is a convenience function that returns NumberPropertyOperation wrapped in PropertyFilterOperation
func NumberPropertyOperationAsPropertyFilterOperation(v *NumberPropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		NumberPropertyOperation: v,
	}
}

// RangedDatePropertyOperationAsPropertyFilterOperation is a convenience function that returns RangedDatePropertyOperation wrapped in PropertyFilterOperation
func RangedDatePropertyOperationAsPropertyFilterOperation(v *RangedDatePropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		RangedDatePropertyOperation: v,
	}
}

// RangedNumberPropertyOperationAsPropertyFilterOperation is a convenience function that returns RangedNumberPropertyOperation wrapped in PropertyFilterOperation
func RangedNumberPropertyOperationAsPropertyFilterOperation(v *RangedNumberPropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		RangedNumberPropertyOperation: v,
	}
}

// RangedTimeOperationAsPropertyFilterOperation is a convenience function that returns RangedTimeOperation wrapped in PropertyFilterOperation
func RangedTimeOperationAsPropertyFilterOperation(v *RangedTimeOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		RangedTimeOperation: v,
	}
}

// RollingDateRangePropertyOperationAsPropertyFilterOperation is a convenience function that returns RollingDateRangePropertyOperation wrapped in PropertyFilterOperation
func RollingDateRangePropertyOperationAsPropertyFilterOperation(v *RollingDateRangePropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		RollingDateRangePropertyOperation: v,
	}
}

// RollingPropertyUpdatedOperationAsPropertyFilterOperation is a convenience function that returns RollingPropertyUpdatedOperation wrapped in PropertyFilterOperation
func RollingPropertyUpdatedOperationAsPropertyFilterOperation(v *RollingPropertyUpdatedOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		RollingPropertyUpdatedOperation: v,
	}
}

// StringPropertyOperationAsPropertyFilterOperation is a convenience function that returns StringPropertyOperation wrapped in PropertyFilterOperation
func StringPropertyOperationAsPropertyFilterOperation(v *StringPropertyOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		StringPropertyOperation: v,
	}
}

// TimePointOperationAsPropertyFilterOperation is a convenience function that returns TimePointOperation wrapped in PropertyFilterOperation
func TimePointOperationAsPropertyFilterOperation(v *TimePointOperation) PropertyFilterOperation {
	return PropertyFilterOperation{
		TimePointOperation: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PropertyFilterOperation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AllPropertyTypesOperation
	err = newStrictDecoder(data).Decode(&dst.AllPropertyTypesOperation)
	if err == nil {
		jsonAllPropertyTypesOperation, _ := json.Marshal(dst.AllPropertyTypesOperation)
		if string(jsonAllPropertyTypesOperation) == "{}" { // empty struct
			dst.AllPropertyTypesOperation = nil
		} else {
			if err = validator.Validate(dst.AllPropertyTypesOperation); err != nil {
				dst.AllPropertyTypesOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.AllPropertyTypesOperation = nil
	}

	// try to unmarshal data into BoolPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.BoolPropertyOperation)
	if err == nil {
		jsonBoolPropertyOperation, _ := json.Marshal(dst.BoolPropertyOperation)
		if string(jsonBoolPropertyOperation) == "{}" { // empty struct
			dst.BoolPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.BoolPropertyOperation); err != nil {
				dst.BoolPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.BoolPropertyOperation = nil
	}

	// try to unmarshal data into CalendarDatePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.CalendarDatePropertyOperation)
	if err == nil {
		jsonCalendarDatePropertyOperation, _ := json.Marshal(dst.CalendarDatePropertyOperation)
		if string(jsonCalendarDatePropertyOperation) == "{}" { // empty struct
			dst.CalendarDatePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.CalendarDatePropertyOperation); err != nil {
				dst.CalendarDatePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.CalendarDatePropertyOperation = nil
	}

	// try to unmarshal data into ComparativeDatePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.ComparativeDatePropertyOperation)
	if err == nil {
		jsonComparativeDatePropertyOperation, _ := json.Marshal(dst.ComparativeDatePropertyOperation)
		if string(jsonComparativeDatePropertyOperation) == "{}" { // empty struct
			dst.ComparativeDatePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.ComparativeDatePropertyOperation); err != nil {
				dst.ComparativeDatePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.ComparativeDatePropertyOperation = nil
	}

	// try to unmarshal data into ComparativePropertyUpdatedOperation
	err = newStrictDecoder(data).Decode(&dst.ComparativePropertyUpdatedOperation)
	if err == nil {
		jsonComparativePropertyUpdatedOperation, _ := json.Marshal(dst.ComparativePropertyUpdatedOperation)
		if string(jsonComparativePropertyUpdatedOperation) == "{}" { // empty struct
			dst.ComparativePropertyUpdatedOperation = nil
		} else {
			if err = validator.Validate(dst.ComparativePropertyUpdatedOperation); err != nil {
				dst.ComparativePropertyUpdatedOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.ComparativePropertyUpdatedOperation = nil
	}

	// try to unmarshal data into DatePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.DatePropertyOperation)
	if err == nil {
		jsonDatePropertyOperation, _ := json.Marshal(dst.DatePropertyOperation)
		if string(jsonDatePropertyOperation) == "{}" { // empty struct
			dst.DatePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.DatePropertyOperation); err != nil {
				dst.DatePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.DatePropertyOperation = nil
	}

	// try to unmarshal data into DateTimePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.DateTimePropertyOperation)
	if err == nil {
		jsonDateTimePropertyOperation, _ := json.Marshal(dst.DateTimePropertyOperation)
		if string(jsonDateTimePropertyOperation) == "{}" { // empty struct
			dst.DateTimePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.DateTimePropertyOperation); err != nil {
				dst.DateTimePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.DateTimePropertyOperation = nil
	}

	// try to unmarshal data into EnumerationPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.EnumerationPropertyOperation)
	if err == nil {
		jsonEnumerationPropertyOperation, _ := json.Marshal(dst.EnumerationPropertyOperation)
		if string(jsonEnumerationPropertyOperation) == "{}" { // empty struct
			dst.EnumerationPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.EnumerationPropertyOperation); err != nil {
				dst.EnumerationPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.EnumerationPropertyOperation = nil
	}

	// try to unmarshal data into MultiStringPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.MultiStringPropertyOperation)
	if err == nil {
		jsonMultiStringPropertyOperation, _ := json.Marshal(dst.MultiStringPropertyOperation)
		if string(jsonMultiStringPropertyOperation) == "{}" { // empty struct
			dst.MultiStringPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.MultiStringPropertyOperation); err != nil {
				dst.MultiStringPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiStringPropertyOperation = nil
	}

	// try to unmarshal data into NumberPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.NumberPropertyOperation)
	if err == nil {
		jsonNumberPropertyOperation, _ := json.Marshal(dst.NumberPropertyOperation)
		if string(jsonNumberPropertyOperation) == "{}" { // empty struct
			dst.NumberPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.NumberPropertyOperation); err != nil {
				dst.NumberPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.NumberPropertyOperation = nil
	}

	// try to unmarshal data into RangedDatePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.RangedDatePropertyOperation)
	if err == nil {
		jsonRangedDatePropertyOperation, _ := json.Marshal(dst.RangedDatePropertyOperation)
		if string(jsonRangedDatePropertyOperation) == "{}" { // empty struct
			dst.RangedDatePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.RangedDatePropertyOperation); err != nil {
				dst.RangedDatePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.RangedDatePropertyOperation = nil
	}

	// try to unmarshal data into RangedNumberPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.RangedNumberPropertyOperation)
	if err == nil {
		jsonRangedNumberPropertyOperation, _ := json.Marshal(dst.RangedNumberPropertyOperation)
		if string(jsonRangedNumberPropertyOperation) == "{}" { // empty struct
			dst.RangedNumberPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.RangedNumberPropertyOperation); err != nil {
				dst.RangedNumberPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.RangedNumberPropertyOperation = nil
	}

	// try to unmarshal data into RangedTimeOperation
	err = newStrictDecoder(data).Decode(&dst.RangedTimeOperation)
	if err == nil {
		jsonRangedTimeOperation, _ := json.Marshal(dst.RangedTimeOperation)
		if string(jsonRangedTimeOperation) == "{}" { // empty struct
			dst.RangedTimeOperation = nil
		} else {
			if err = validator.Validate(dst.RangedTimeOperation); err != nil {
				dst.RangedTimeOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.RangedTimeOperation = nil
	}

	// try to unmarshal data into RollingDateRangePropertyOperation
	err = newStrictDecoder(data).Decode(&dst.RollingDateRangePropertyOperation)
	if err == nil {
		jsonRollingDateRangePropertyOperation, _ := json.Marshal(dst.RollingDateRangePropertyOperation)
		if string(jsonRollingDateRangePropertyOperation) == "{}" { // empty struct
			dst.RollingDateRangePropertyOperation = nil
		} else {
			if err = validator.Validate(dst.RollingDateRangePropertyOperation); err != nil {
				dst.RollingDateRangePropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.RollingDateRangePropertyOperation = nil
	}

	// try to unmarshal data into RollingPropertyUpdatedOperation
	err = newStrictDecoder(data).Decode(&dst.RollingPropertyUpdatedOperation)
	if err == nil {
		jsonRollingPropertyUpdatedOperation, _ := json.Marshal(dst.RollingPropertyUpdatedOperation)
		if string(jsonRollingPropertyUpdatedOperation) == "{}" { // empty struct
			dst.RollingPropertyUpdatedOperation = nil
		} else {
			if err = validator.Validate(dst.RollingPropertyUpdatedOperation); err != nil {
				dst.RollingPropertyUpdatedOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.RollingPropertyUpdatedOperation = nil
	}

	// try to unmarshal data into StringPropertyOperation
	err = newStrictDecoder(data).Decode(&dst.StringPropertyOperation)
	if err == nil {
		jsonStringPropertyOperation, _ := json.Marshal(dst.StringPropertyOperation)
		if string(jsonStringPropertyOperation) == "{}" { // empty struct
			dst.StringPropertyOperation = nil
		} else {
			if err = validator.Validate(dst.StringPropertyOperation); err != nil {
				dst.StringPropertyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.StringPropertyOperation = nil
	}

	// try to unmarshal data into TimePointOperation
	err = newStrictDecoder(data).Decode(&dst.TimePointOperation)
	if err == nil {
		jsonTimePointOperation, _ := json.Marshal(dst.TimePointOperation)
		if string(jsonTimePointOperation) == "{}" { // empty struct
			dst.TimePointOperation = nil
		} else {
			if err = validator.Validate(dst.TimePointOperation); err != nil {
				dst.TimePointOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimePointOperation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AllPropertyTypesOperation = nil
		dst.BoolPropertyOperation = nil
		dst.CalendarDatePropertyOperation = nil
		dst.ComparativeDatePropertyOperation = nil
		dst.ComparativePropertyUpdatedOperation = nil
		dst.DatePropertyOperation = nil
		dst.DateTimePropertyOperation = nil
		dst.EnumerationPropertyOperation = nil
		dst.MultiStringPropertyOperation = nil
		dst.NumberPropertyOperation = nil
		dst.RangedDatePropertyOperation = nil
		dst.RangedNumberPropertyOperation = nil
		dst.RangedTimeOperation = nil
		dst.RollingDateRangePropertyOperation = nil
		dst.RollingPropertyUpdatedOperation = nil
		dst.StringPropertyOperation = nil
		dst.TimePointOperation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PropertyFilterOperation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PropertyFilterOperation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PropertyFilterOperation) MarshalJSON() ([]byte, error) {
	if src.AllPropertyTypesOperation != nil {
		return json.Marshal(&src.AllPropertyTypesOperation)
	}

	if src.BoolPropertyOperation != nil {
		return json.Marshal(&src.BoolPropertyOperation)
	}

	if src.CalendarDatePropertyOperation != nil {
		return json.Marshal(&src.CalendarDatePropertyOperation)
	}

	if src.ComparativeDatePropertyOperation != nil {
		return json.Marshal(&src.ComparativeDatePropertyOperation)
	}

	if src.ComparativePropertyUpdatedOperation != nil {
		return json.Marshal(&src.ComparativePropertyUpdatedOperation)
	}

	if src.DatePropertyOperation != nil {
		return json.Marshal(&src.DatePropertyOperation)
	}

	if src.DateTimePropertyOperation != nil {
		return json.Marshal(&src.DateTimePropertyOperation)
	}

	if src.EnumerationPropertyOperation != nil {
		return json.Marshal(&src.EnumerationPropertyOperation)
	}

	if src.MultiStringPropertyOperation != nil {
		return json.Marshal(&src.MultiStringPropertyOperation)
	}

	if src.NumberPropertyOperation != nil {
		return json.Marshal(&src.NumberPropertyOperation)
	}

	if src.RangedDatePropertyOperation != nil {
		return json.Marshal(&src.RangedDatePropertyOperation)
	}

	if src.RangedNumberPropertyOperation != nil {
		return json.Marshal(&src.RangedNumberPropertyOperation)
	}

	if src.RangedTimeOperation != nil {
		return json.Marshal(&src.RangedTimeOperation)
	}

	if src.RollingDateRangePropertyOperation != nil {
		return json.Marshal(&src.RollingDateRangePropertyOperation)
	}

	if src.RollingPropertyUpdatedOperation != nil {
		return json.Marshal(&src.RollingPropertyUpdatedOperation)
	}

	if src.StringPropertyOperation != nil {
		return json.Marshal(&src.StringPropertyOperation)
	}

	if src.TimePointOperation != nil {
		return json.Marshal(&src.TimePointOperation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PropertyFilterOperation) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AllPropertyTypesOperation != nil {
		return obj.AllPropertyTypesOperation
	}

	if obj.BoolPropertyOperation != nil {
		return obj.BoolPropertyOperation
	}

	if obj.CalendarDatePropertyOperation != nil {
		return obj.CalendarDatePropertyOperation
	}

	if obj.ComparativeDatePropertyOperation != nil {
		return obj.ComparativeDatePropertyOperation
	}

	if obj.ComparativePropertyUpdatedOperation != nil {
		return obj.ComparativePropertyUpdatedOperation
	}

	if obj.DatePropertyOperation != nil {
		return obj.DatePropertyOperation
	}

	if obj.DateTimePropertyOperation != nil {
		return obj.DateTimePropertyOperation
	}

	if obj.EnumerationPropertyOperation != nil {
		return obj.EnumerationPropertyOperation
	}

	if obj.MultiStringPropertyOperation != nil {
		return obj.MultiStringPropertyOperation
	}

	if obj.NumberPropertyOperation != nil {
		return obj.NumberPropertyOperation
	}

	if obj.RangedDatePropertyOperation != nil {
		return obj.RangedDatePropertyOperation
	}

	if obj.RangedNumberPropertyOperation != nil {
		return obj.RangedNumberPropertyOperation
	}

	if obj.RangedTimeOperation != nil {
		return obj.RangedTimeOperation
	}

	if obj.RollingDateRangePropertyOperation != nil {
		return obj.RollingDateRangePropertyOperation
	}

	if obj.RollingPropertyUpdatedOperation != nil {
		return obj.RollingPropertyUpdatedOperation
	}

	if obj.StringPropertyOperation != nil {
		return obj.StringPropertyOperation
	}

	if obj.TimePointOperation != nil {
		return obj.TimePointOperation
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PropertyFilterOperation) GetActualInstanceValue() (interface{}) {
	if obj.AllPropertyTypesOperation != nil {
		return *obj.AllPropertyTypesOperation
	}

	if obj.BoolPropertyOperation != nil {
		return *obj.BoolPropertyOperation
	}

	if obj.CalendarDatePropertyOperation != nil {
		return *obj.CalendarDatePropertyOperation
	}

	if obj.ComparativeDatePropertyOperation != nil {
		return *obj.ComparativeDatePropertyOperation
	}

	if obj.ComparativePropertyUpdatedOperation != nil {
		return *obj.ComparativePropertyUpdatedOperation
	}

	if obj.DatePropertyOperation != nil {
		return *obj.DatePropertyOperation
	}

	if obj.DateTimePropertyOperation != nil {
		return *obj.DateTimePropertyOperation
	}

	if obj.EnumerationPropertyOperation != nil {
		return *obj.EnumerationPropertyOperation
	}

	if obj.MultiStringPropertyOperation != nil {
		return *obj.MultiStringPropertyOperation
	}

	if obj.NumberPropertyOperation != nil {
		return *obj.NumberPropertyOperation
	}

	if obj.RangedDatePropertyOperation != nil {
		return *obj.RangedDatePropertyOperation
	}

	if obj.RangedNumberPropertyOperation != nil {
		return *obj.RangedNumberPropertyOperation
	}

	if obj.RangedTimeOperation != nil {
		return *obj.RangedTimeOperation
	}

	if obj.RollingDateRangePropertyOperation != nil {
		return *obj.RollingDateRangePropertyOperation
	}

	if obj.RollingPropertyUpdatedOperation != nil {
		return *obj.RollingPropertyUpdatedOperation
	}

	if obj.StringPropertyOperation != nil {
		return *obj.StringPropertyOperation
	}

	if obj.TimePointOperation != nil {
		return *obj.TimePointOperation
	}

	// all schemas are nil
	return nil
}

type NullablePropertyFilterOperation struct {
	value *PropertyFilterOperation
	isSet bool
}

func (v NullablePropertyFilterOperation) Get() *PropertyFilterOperation {
	return v.value
}

func (v *NullablePropertyFilterOperation) Set(val *PropertyFilterOperation) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyFilterOperation) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyFilterOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyFilterOperation(val *PropertyFilterOperation) *NullablePropertyFilterOperation {
	return &NullablePropertyFilterOperation{value: val, isSet: true}
}

func (v NullablePropertyFilterOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyFilterOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


