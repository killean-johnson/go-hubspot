/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
)


// EventDefinitionAPIService EventDefinitionAPI service
type EventDefinitionAPIService service

type ApiDeleteEventsV3EventDefinitionsEventNameRequest struct {
	ctx context.Context
	ApiService *EventDefinitionAPIService
	eventName string
}

func (r ApiDeleteEventsV3EventDefinitionsEventNameRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEventsV3EventDefinitionsEventNameExecute(r)
}

/*
DeleteEventsV3EventDefinitionsEventName Delete an event definition

Delete a custom event definition by name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventName The name of the event definition.
 @return ApiDeleteEventsV3EventDefinitionsEventNameRequest
*/
func (a *EventDefinitionAPIService) DeleteEventsV3EventDefinitionsEventName(ctx context.Context, eventName string) ApiDeleteEventsV3EventDefinitionsEventNameRequest {
	return ApiDeleteEventsV3EventDefinitionsEventNameRequest{
		ApiService: a,
		ctx: ctx,
		eventName: eventName,
	}
}

// Execute executes the request
func (a *EventDefinitionAPIService) DeleteEventsV3EventDefinitionsEventNameExecute(r ApiDeleteEventsV3EventDefinitionsEventNameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventDefinitionAPIService.DeleteEventsV3EventDefinitionsEventName")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/v3/event-definitions/{eventName}"
	localVarPath = strings.Replace(localVarPath, "{"+"eventName"+"}", url.PathEscape(parameterValueToString(r.eventName, "eventName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest struct {
	ctx context.Context
	ApiService *EventDefinitionAPIService
	eventName string
	propertyName string
}

func (r ApiDeleteEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEventsV3EventDefinitionsEventNamePropertyPropertyNameExecute(r)
}

/*
DeleteEventsV3EventDefinitionsEventNamePropertyPropertyName Delete a property from a custom event definition

Delete an existing property from a custom event definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventName The internal name of the custom event.
 @param propertyName The internal name of the property to delete.
 @return ApiDeleteEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest
*/
func (a *EventDefinitionAPIService) DeleteEventsV3EventDefinitionsEventNamePropertyPropertyName(ctx context.Context, eventName string, propertyName string) ApiDeleteEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest {
	return ApiDeleteEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest{
		ApiService: a,
		ctx: ctx,
		eventName: eventName,
		propertyName: propertyName,
	}
}

// Execute executes the request
func (a *EventDefinitionAPIService) DeleteEventsV3EventDefinitionsEventNamePropertyPropertyNameExecute(r ApiDeleteEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventDefinitionAPIService.DeleteEventsV3EventDefinitionsEventNamePropertyPropertyName")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/v3/event-definitions/{eventName}/property/{propertyName}"
	localVarPath = strings.Replace(localVarPath, "{"+"eventName"+"}", url.PathEscape(parameterValueToString(r.eventName, "eventName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"propertyName"+"}", url.PathEscape(parameterValueToString(r.propertyName, "propertyName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetEventsV3EventDefinitionsRequest struct {
	ctx context.Context
	ApiService *EventDefinitionAPIService
	searchString *string
	after *string
	limit *int32
	includeProperties *bool
	sortOrder *string
}

// Characters in the event name that the user is searching for. This search is a naive “contains” search, no fuzzy matching is done.
func (r ApiGetEventsV3EventDefinitionsRequest) SearchString(searchString string) ApiGetEventsV3EventDefinitionsRequest {
	r.searchString = &searchString
	return r
}

// The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetEventsV3EventDefinitionsRequest) After(after string) ApiGetEventsV3EventDefinitionsRequest {
	r.after = &after
	return r
}

// The maximum number of results to display per page.
func (r ApiGetEventsV3EventDefinitionsRequest) Limit(limit int32) ApiGetEventsV3EventDefinitionsRequest {
	r.limit = &limit
	return r
}

func (r ApiGetEventsV3EventDefinitionsRequest) IncludeProperties(includeProperties bool) ApiGetEventsV3EventDefinitionsRequest {
	r.includeProperties = &includeProperties
	return r
}

func (r ApiGetEventsV3EventDefinitionsRequest) SortOrder(sortOrder string) ApiGetEventsV3EventDefinitionsRequest {
	r.sortOrder = &sortOrder
	return r
}

func (r ApiGetEventsV3EventDefinitionsRequest) Execute() (*CollectionResponseWithTotalExternalBehavioralEventTypeDefinitionForwardPaging, *http.Response, error) {
	return r.ApiService.GetEventsV3EventDefinitionsExecute(r)
}

/*
GetEventsV3EventDefinitions Retrieve event definitions

Retrieve existing custom event definitions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEventsV3EventDefinitionsRequest
*/
func (a *EventDefinitionAPIService) GetEventsV3EventDefinitions(ctx context.Context) ApiGetEventsV3EventDefinitionsRequest {
	return ApiGetEventsV3EventDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseWithTotalExternalBehavioralEventTypeDefinitionForwardPaging
func (a *EventDefinitionAPIService) GetEventsV3EventDefinitionsExecute(r ApiGetEventsV3EventDefinitionsRequest) (*CollectionResponseWithTotalExternalBehavioralEventTypeDefinitionForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseWithTotalExternalBehavioralEventTypeDefinitionForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventDefinitionAPIService.GetEventsV3EventDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/v3/event-definitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.searchString != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchString", r.searchString, "form", "")
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.includeProperties != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeProperties", r.includeProperties, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEventsV3EventDefinitionsEventNameRequest struct {
	ctx context.Context
	ApiService *EventDefinitionAPIService
	eventName string
}

func (r ApiGetEventsV3EventDefinitionsEventNameRequest) Execute() (*ExternalBehavioralEventTypeDefinition, *http.Response, error) {
	return r.ApiService.GetEventsV3EventDefinitionsEventNameExecute(r)
}

/*
GetEventsV3EventDefinitionsEventName Retrieve a custom event definition

Fetch a single custom event definition by name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventName The internal name of the custom event.
 @return ApiGetEventsV3EventDefinitionsEventNameRequest
*/
func (a *EventDefinitionAPIService) GetEventsV3EventDefinitionsEventName(ctx context.Context, eventName string) ApiGetEventsV3EventDefinitionsEventNameRequest {
	return ApiGetEventsV3EventDefinitionsEventNameRequest{
		ApiService: a,
		ctx: ctx,
		eventName: eventName,
	}
}

// Execute executes the request
//  @return ExternalBehavioralEventTypeDefinition
func (a *EventDefinitionAPIService) GetEventsV3EventDefinitionsEventNameExecute(r ApiGetEventsV3EventDefinitionsEventNameRequest) (*ExternalBehavioralEventTypeDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalBehavioralEventTypeDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventDefinitionAPIService.GetEventsV3EventDefinitionsEventName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/v3/event-definitions/{eventName}"
	localVarPath = strings.Replace(localVarPath, "{"+"eventName"+"}", url.PathEscape(parameterValueToString(r.eventName, "eventName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchEventsV3EventDefinitionsEventNameRequest struct {
	ctx context.Context
	ApiService *EventDefinitionAPIService
	eventName string
	externalBehavioralEventTypeDefinitionPatch *ExternalBehavioralEventTypeDefinitionPatch
}

func (r ApiPatchEventsV3EventDefinitionsEventNameRequest) ExternalBehavioralEventTypeDefinitionPatch(externalBehavioralEventTypeDefinitionPatch ExternalBehavioralEventTypeDefinitionPatch) ApiPatchEventsV3EventDefinitionsEventNameRequest {
	r.externalBehavioralEventTypeDefinitionPatch = &externalBehavioralEventTypeDefinitionPatch
	return r
}

func (r ApiPatchEventsV3EventDefinitionsEventNameRequest) Execute() (*ExternalBehavioralEventTypeDefinition, *http.Response, error) {
	return r.ApiService.PatchEventsV3EventDefinitionsEventNameExecute(r)
}

/*
PatchEventsV3EventDefinitionsEventName Update a custom event definition

Update a specific custom event definition by name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventName The internal name of the custom event.
 @return ApiPatchEventsV3EventDefinitionsEventNameRequest
*/
func (a *EventDefinitionAPIService) PatchEventsV3EventDefinitionsEventName(ctx context.Context, eventName string) ApiPatchEventsV3EventDefinitionsEventNameRequest {
	return ApiPatchEventsV3EventDefinitionsEventNameRequest{
		ApiService: a,
		ctx: ctx,
		eventName: eventName,
	}
}

// Execute executes the request
//  @return ExternalBehavioralEventTypeDefinition
func (a *EventDefinitionAPIService) PatchEventsV3EventDefinitionsEventNameExecute(r ApiPatchEventsV3EventDefinitionsEventNameRequest) (*ExternalBehavioralEventTypeDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalBehavioralEventTypeDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventDefinitionAPIService.PatchEventsV3EventDefinitionsEventName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/v3/event-definitions/{eventName}"
	localVarPath = strings.Replace(localVarPath, "{"+"eventName"+"}", url.PathEscape(parameterValueToString(r.eventName, "eventName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalBehavioralEventTypeDefinitionPatch == nil {
		return localVarReturnValue, nil, reportError("externalBehavioralEventTypeDefinitionPatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.externalBehavioralEventTypeDefinitionPatch
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest struct {
	ctx context.Context
	ApiService *EventDefinitionAPIService
	eventName string
	propertyName string
	externalBehavioralEventPropertyDefinitionPatch *ExternalBehavioralEventPropertyDefinitionPatch
}

func (r ApiPatchEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest) ExternalBehavioralEventPropertyDefinitionPatch(externalBehavioralEventPropertyDefinitionPatch ExternalBehavioralEventPropertyDefinitionPatch) ApiPatchEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest {
	r.externalBehavioralEventPropertyDefinitionPatch = &externalBehavioralEventPropertyDefinitionPatch
	return r
}

func (r ApiPatchEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest) Execute() (*Property, *http.Response, error) {
	return r.ApiService.PatchEventsV3EventDefinitionsEventNamePropertyPropertyNameExecute(r)
}

/*
PatchEventsV3EventDefinitionsEventNamePropertyPropertyName Update an existing custom event property

Update an existing property in a custom event definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventName The internal name of the custom event.
 @param propertyName The internal name of the property to update.
 @return ApiPatchEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest
*/
func (a *EventDefinitionAPIService) PatchEventsV3EventDefinitionsEventNamePropertyPropertyName(ctx context.Context, eventName string, propertyName string) ApiPatchEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest {
	return ApiPatchEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest{
		ApiService: a,
		ctx: ctx,
		eventName: eventName,
		propertyName: propertyName,
	}
}

// Execute executes the request
//  @return Property
func (a *EventDefinitionAPIService) PatchEventsV3EventDefinitionsEventNamePropertyPropertyNameExecute(r ApiPatchEventsV3EventDefinitionsEventNamePropertyPropertyNameRequest) (*Property, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Property
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventDefinitionAPIService.PatchEventsV3EventDefinitionsEventNamePropertyPropertyName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/v3/event-definitions/{eventName}/property/{propertyName}"
	localVarPath = strings.Replace(localVarPath, "{"+"eventName"+"}", url.PathEscape(parameterValueToString(r.eventName, "eventName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"propertyName"+"}", url.PathEscape(parameterValueToString(r.propertyName, "propertyName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalBehavioralEventPropertyDefinitionPatch == nil {
		return localVarReturnValue, nil, reportError("externalBehavioralEventPropertyDefinitionPatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.externalBehavioralEventPropertyDefinitionPatch
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostEventsV3EventDefinitionsRequest struct {
	ctx context.Context
	ApiService *EventDefinitionAPIService
	externalBehavioralEventTypeDefinitionEgg *ExternalBehavioralEventTypeDefinitionEgg
}

func (r ApiPostEventsV3EventDefinitionsRequest) ExternalBehavioralEventTypeDefinitionEgg(externalBehavioralEventTypeDefinitionEgg ExternalBehavioralEventTypeDefinitionEgg) ApiPostEventsV3EventDefinitionsRequest {
	r.externalBehavioralEventTypeDefinitionEgg = &externalBehavioralEventTypeDefinitionEgg
	return r
}

func (r ApiPostEventsV3EventDefinitionsRequest) Execute() (*ExternalBehavioralEventTypeDefinition, *http.Response, error) {
	return r.ApiService.PostEventsV3EventDefinitionsExecute(r)
}

/*
PostEventsV3EventDefinitions Create custom event definition

Create a custom event definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostEventsV3EventDefinitionsRequest
*/
func (a *EventDefinitionAPIService) PostEventsV3EventDefinitions(ctx context.Context) ApiPostEventsV3EventDefinitionsRequest {
	return ApiPostEventsV3EventDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExternalBehavioralEventTypeDefinition
func (a *EventDefinitionAPIService) PostEventsV3EventDefinitionsExecute(r ApiPostEventsV3EventDefinitionsRequest) (*ExternalBehavioralEventTypeDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalBehavioralEventTypeDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventDefinitionAPIService.PostEventsV3EventDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/v3/event-definitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalBehavioralEventTypeDefinitionEgg == nil {
		return localVarReturnValue, nil, reportError("externalBehavioralEventTypeDefinitionEgg is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.externalBehavioralEventTypeDefinitionEgg
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostEventsV3EventDefinitionsEventNamePropertyRequest struct {
	ctx context.Context
	ApiService *EventDefinitionAPIService
	eventName string
	externalBehavioralEventPropertyCreate *ExternalBehavioralEventPropertyCreate
}

func (r ApiPostEventsV3EventDefinitionsEventNamePropertyRequest) ExternalBehavioralEventPropertyCreate(externalBehavioralEventPropertyCreate ExternalBehavioralEventPropertyCreate) ApiPostEventsV3EventDefinitionsEventNamePropertyRequest {
	r.externalBehavioralEventPropertyCreate = &externalBehavioralEventPropertyCreate
	return r
}

func (r ApiPostEventsV3EventDefinitionsEventNamePropertyRequest) Execute() (*Property, *http.Response, error) {
	return r.ApiService.PostEventsV3EventDefinitionsEventNamePropertyExecute(r)
}

/*
PostEventsV3EventDefinitionsEventNameProperty Create a property for an event definition

Create a new property for an existing event definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventName The internal name of the custom event.
 @return ApiPostEventsV3EventDefinitionsEventNamePropertyRequest
*/
func (a *EventDefinitionAPIService) PostEventsV3EventDefinitionsEventNameProperty(ctx context.Context, eventName string) ApiPostEventsV3EventDefinitionsEventNamePropertyRequest {
	return ApiPostEventsV3EventDefinitionsEventNamePropertyRequest{
		ApiService: a,
		ctx: ctx,
		eventName: eventName,
	}
}

// Execute executes the request
//  @return Property
func (a *EventDefinitionAPIService) PostEventsV3EventDefinitionsEventNamePropertyExecute(r ApiPostEventsV3EventDefinitionsEventNamePropertyRequest) (*Property, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Property
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventDefinitionAPIService.PostEventsV3EventDefinitionsEventNameProperty")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/v3/event-definitions/{eventName}/property"
	localVarPath = strings.Replace(localVarPath, "{"+"eventName"+"}", url.PathEscape(parameterValueToString(r.eventName, "eventName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalBehavioralEventPropertyCreate == nil {
		return localVarReturnValue, nil, reportError("externalBehavioralEventPropertyCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.externalBehavioralEventPropertyCreate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
