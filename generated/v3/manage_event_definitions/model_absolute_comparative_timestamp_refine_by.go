/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AbsoluteComparativeTimestampRefineBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbsoluteComparativeTimestampRefineBy{}

// AbsoluteComparativeTimestampRefineBy struct for AbsoluteComparativeTimestampRefineBy
type AbsoluteComparativeTimestampRefineBy struct {
	Comparison string `json:"comparison"`
	Type string `json:"type"`
	Timestamp int32 `json:"timestamp"`
}

type _AbsoluteComparativeTimestampRefineBy AbsoluteComparativeTimestampRefineBy

// NewAbsoluteComparativeTimestampRefineBy instantiates a new AbsoluteComparativeTimestampRefineBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbsoluteComparativeTimestampRefineBy(comparison string, type_ string, timestamp int32) *AbsoluteComparativeTimestampRefineBy {
	this := AbsoluteComparativeTimestampRefineBy{}
	this.Comparison = comparison
	this.Type = type_
	this.Timestamp = timestamp
	return &this
}

// NewAbsoluteComparativeTimestampRefineByWithDefaults instantiates a new AbsoluteComparativeTimestampRefineBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbsoluteComparativeTimestampRefineByWithDefaults() *AbsoluteComparativeTimestampRefineBy {
	this := AbsoluteComparativeTimestampRefineBy{}
	var type_ string = "AbsoluteComparativeTimestampRefineBy"
	this.Type = type_
	return &this
}

// GetComparison returns the Comparison field value
func (o *AbsoluteComparativeTimestampRefineBy) GetComparison() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comparison
}

// GetComparisonOk returns a tuple with the Comparison field value
// and a boolean to check if the value has been set.
func (o *AbsoluteComparativeTimestampRefineBy) GetComparisonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comparison, true
}

// SetComparison sets field value
func (o *AbsoluteComparativeTimestampRefineBy) SetComparison(v string) {
	o.Comparison = v
}

// GetType returns the Type field value
func (o *AbsoluteComparativeTimestampRefineBy) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AbsoluteComparativeTimestampRefineBy) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AbsoluteComparativeTimestampRefineBy) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *AbsoluteComparativeTimestampRefineBy) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *AbsoluteComparativeTimestampRefineBy) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *AbsoluteComparativeTimestampRefineBy) SetTimestamp(v int32) {
	o.Timestamp = v
}

func (o AbsoluteComparativeTimestampRefineBy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbsoluteComparativeTimestampRefineBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comparison"] = o.Comparison
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *AbsoluteComparativeTimestampRefineBy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"comparison",
		"type",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAbsoluteComparativeTimestampRefineBy := _AbsoluteComparativeTimestampRefineBy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAbsoluteComparativeTimestampRefineBy)

	if err != nil {
		return err
	}

	*o = AbsoluteComparativeTimestampRefineBy(varAbsoluteComparativeTimestampRefineBy)

	return err
}

type NullableAbsoluteComparativeTimestampRefineBy struct {
	value *AbsoluteComparativeTimestampRefineBy
	isSet bool
}

func (v NullableAbsoluteComparativeTimestampRefineBy) Get() *AbsoluteComparativeTimestampRefineBy {
	return v.value
}

func (v *NullableAbsoluteComparativeTimestampRefineBy) Set(val *AbsoluteComparativeTimestampRefineBy) {
	v.value = val
	v.isSet = true
}

func (v NullableAbsoluteComparativeTimestampRefineBy) IsSet() bool {
	return v.isSet
}

func (v *NullableAbsoluteComparativeTimestampRefineBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbsoluteComparativeTimestampRefineBy(val *AbsoluteComparativeTimestampRefineBy) *NullableAbsoluteComparativeTimestampRefineBy {
	return &NullableAbsoluteComparativeTimestampRefineBy{value: val, isSet: true}
}

func (v NullableAbsoluteComparativeTimestampRefineBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbsoluteComparativeTimestampRefineBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


