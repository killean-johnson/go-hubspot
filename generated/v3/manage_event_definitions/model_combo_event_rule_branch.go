/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ComboEventRuleBranch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComboEventRuleBranch{}

// ComboEventRuleBranch struct for ComboEventRuleBranch
type ComboEventRuleBranch struct {
	OperationType string `json:"operationType"`
	ComposingRules []ComboEventRule `json:"composingRules"`
	RuleBranches []ComboEventRuleBranch `json:"ruleBranches"`
}

type _ComboEventRuleBranch ComboEventRuleBranch

// NewComboEventRuleBranch instantiates a new ComboEventRuleBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComboEventRuleBranch(operationType string, composingRules []ComboEventRule, ruleBranches []ComboEventRuleBranch) *ComboEventRuleBranch {
	this := ComboEventRuleBranch{}
	this.OperationType = operationType
	this.ComposingRules = composingRules
	this.RuleBranches = ruleBranches
	return &this
}

// NewComboEventRuleBranchWithDefaults instantiates a new ComboEventRuleBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComboEventRuleBranchWithDefaults() *ComboEventRuleBranch {
	this := ComboEventRuleBranch{}
	return &this
}

// GetOperationType returns the OperationType field value
func (o *ComboEventRuleBranch) GetOperationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value
// and a boolean to check if the value has been set.
func (o *ComboEventRuleBranch) GetOperationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperationType, true
}

// SetOperationType sets field value
func (o *ComboEventRuleBranch) SetOperationType(v string) {
	o.OperationType = v
}

// GetComposingRules returns the ComposingRules field value
func (o *ComboEventRuleBranch) GetComposingRules() []ComboEventRule {
	if o == nil {
		var ret []ComboEventRule
		return ret
	}

	return o.ComposingRules
}

// GetComposingRulesOk returns a tuple with the ComposingRules field value
// and a boolean to check if the value has been set.
func (o *ComboEventRuleBranch) GetComposingRulesOk() ([]ComboEventRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComposingRules, true
}

// SetComposingRules sets field value
func (o *ComboEventRuleBranch) SetComposingRules(v []ComboEventRule) {
	o.ComposingRules = v
}

// GetRuleBranches returns the RuleBranches field value
func (o *ComboEventRuleBranch) GetRuleBranches() []ComboEventRuleBranch {
	if o == nil {
		var ret []ComboEventRuleBranch
		return ret
	}

	return o.RuleBranches
}

// GetRuleBranchesOk returns a tuple with the RuleBranches field value
// and a boolean to check if the value has been set.
func (o *ComboEventRuleBranch) GetRuleBranchesOk() ([]ComboEventRuleBranch, bool) {
	if o == nil {
		return nil, false
	}
	return o.RuleBranches, true
}

// SetRuleBranches sets field value
func (o *ComboEventRuleBranch) SetRuleBranches(v []ComboEventRuleBranch) {
	o.RuleBranches = v
}

func (o ComboEventRuleBranch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComboEventRuleBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operationType"] = o.OperationType
	toSerialize["composingRules"] = o.ComposingRules
	toSerialize["ruleBranches"] = o.RuleBranches
	return toSerialize, nil
}

func (o *ComboEventRuleBranch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operationType",
		"composingRules",
		"ruleBranches",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComboEventRuleBranch := _ComboEventRuleBranch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComboEventRuleBranch)

	if err != nil {
		return err
	}

	*o = ComboEventRuleBranch(varComboEventRuleBranch)

	return err
}

type NullableComboEventRuleBranch struct {
	value *ComboEventRuleBranch
	isSet bool
}

func (v NullableComboEventRuleBranch) Get() *ComboEventRuleBranch {
	return v.value
}

func (v *NullableComboEventRuleBranch) Set(val *ComboEventRuleBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableComboEventRuleBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableComboEventRuleBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComboEventRuleBranch(val *ComboEventRuleBranch) *NullableComboEventRuleBranch {
	return &NullableComboEventRuleBranch{value: val, isSet: true}
}

func (v NullableComboEventRuleBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComboEventRuleBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


