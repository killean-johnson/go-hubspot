/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AbsoluteRangedTimestampRefineBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbsoluteRangedTimestampRefineBy{}

// AbsoluteRangedTimestampRefineBy struct for AbsoluteRangedTimestampRefineBy
type AbsoluteRangedTimestampRefineBy struct {
	RangeType string `json:"rangeType"`
	UpperTimestamp int32 `json:"upperTimestamp"`
	LowerTimestamp int32 `json:"lowerTimestamp"`
	Type string `json:"type"`
}

type _AbsoluteRangedTimestampRefineBy AbsoluteRangedTimestampRefineBy

// NewAbsoluteRangedTimestampRefineBy instantiates a new AbsoluteRangedTimestampRefineBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbsoluteRangedTimestampRefineBy(rangeType string, upperTimestamp int32, lowerTimestamp int32, type_ string) *AbsoluteRangedTimestampRefineBy {
	this := AbsoluteRangedTimestampRefineBy{}
	this.RangeType = rangeType
	this.UpperTimestamp = upperTimestamp
	this.LowerTimestamp = lowerTimestamp
	this.Type = type_
	return &this
}

// NewAbsoluteRangedTimestampRefineByWithDefaults instantiates a new AbsoluteRangedTimestampRefineBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbsoluteRangedTimestampRefineByWithDefaults() *AbsoluteRangedTimestampRefineBy {
	this := AbsoluteRangedTimestampRefineBy{}
	var type_ string = "AbsoluteRangedTimestampRefineBy"
	this.Type = type_
	return &this
}

// GetRangeType returns the RangeType field value
func (o *AbsoluteRangedTimestampRefineBy) GetRangeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RangeType
}

// GetRangeTypeOk returns a tuple with the RangeType field value
// and a boolean to check if the value has been set.
func (o *AbsoluteRangedTimestampRefineBy) GetRangeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RangeType, true
}

// SetRangeType sets field value
func (o *AbsoluteRangedTimestampRefineBy) SetRangeType(v string) {
	o.RangeType = v
}

// GetUpperTimestamp returns the UpperTimestamp field value
func (o *AbsoluteRangedTimestampRefineBy) GetUpperTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpperTimestamp
}

// GetUpperTimestampOk returns a tuple with the UpperTimestamp field value
// and a boolean to check if the value has been set.
func (o *AbsoluteRangedTimestampRefineBy) GetUpperTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpperTimestamp, true
}

// SetUpperTimestamp sets field value
func (o *AbsoluteRangedTimestampRefineBy) SetUpperTimestamp(v int32) {
	o.UpperTimestamp = v
}

// GetLowerTimestamp returns the LowerTimestamp field value
func (o *AbsoluteRangedTimestampRefineBy) GetLowerTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LowerTimestamp
}

// GetLowerTimestampOk returns a tuple with the LowerTimestamp field value
// and a boolean to check if the value has been set.
func (o *AbsoluteRangedTimestampRefineBy) GetLowerTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowerTimestamp, true
}

// SetLowerTimestamp sets field value
func (o *AbsoluteRangedTimestampRefineBy) SetLowerTimestamp(v int32) {
	o.LowerTimestamp = v
}

// GetType returns the Type field value
func (o *AbsoluteRangedTimestampRefineBy) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AbsoluteRangedTimestampRefineBy) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AbsoluteRangedTimestampRefineBy) SetType(v string) {
	o.Type = v
}

func (o AbsoluteRangedTimestampRefineBy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbsoluteRangedTimestampRefineBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rangeType"] = o.RangeType
	toSerialize["upperTimestamp"] = o.UpperTimestamp
	toSerialize["lowerTimestamp"] = o.LowerTimestamp
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *AbsoluteRangedTimestampRefineBy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rangeType",
		"upperTimestamp",
		"lowerTimestamp",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAbsoluteRangedTimestampRefineBy := _AbsoluteRangedTimestampRefineBy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAbsoluteRangedTimestampRefineBy)

	if err != nil {
		return err
	}

	*o = AbsoluteRangedTimestampRefineBy(varAbsoluteRangedTimestampRefineBy)

	return err
}

type NullableAbsoluteRangedTimestampRefineBy struct {
	value *AbsoluteRangedTimestampRefineBy
	isSet bool
}

func (v NullableAbsoluteRangedTimestampRefineBy) Get() *AbsoluteRangedTimestampRefineBy {
	return v.value
}

func (v *NullableAbsoluteRangedTimestampRefineBy) Set(val *AbsoluteRangedTimestampRefineBy) {
	v.value = val
	v.isSet = true
}

func (v NullableAbsoluteRangedTimestampRefineBy) IsSet() bool {
	return v.isSet
}

func (v *NullableAbsoluteRangedTimestampRefineBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbsoluteRangedTimestampRefineBy(val *AbsoluteRangedTimestampRefineBy) *NullableAbsoluteRangedTimestampRefineBy {
	return &NullableAbsoluteRangedTimestampRefineBy{value: val, isSet: true}
}

func (v NullableAbsoluteRangedTimestampRefineBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbsoluteRangedTimestampRefineBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


