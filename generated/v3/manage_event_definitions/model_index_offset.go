/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
)

// checks if the IndexOffset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexOffset{}

// IndexOffset struct for IndexOffset
type IndexOffset struct {
	Milliseconds *int32 `json:"milliseconds,omitempty"`
	Hours *int32 `json:"hours,omitempty"`
	Seconds *int32 `json:"seconds,omitempty"`
	Months *int32 `json:"months,omitempty"`
	Weeks *int32 `json:"weeks,omitempty"`
	Minutes *int32 `json:"minutes,omitempty"`
	Quarters *int32 `json:"quarters,omitempty"`
	Days *int32 `json:"days,omitempty"`
	Years *int32 `json:"years,omitempty"`
}

// NewIndexOffset instantiates a new IndexOffset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexOffset() *IndexOffset {
	this := IndexOffset{}
	return &this
}

// NewIndexOffsetWithDefaults instantiates a new IndexOffset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexOffsetWithDefaults() *IndexOffset {
	this := IndexOffset{}
	return &this
}

// GetMilliseconds returns the Milliseconds field value if set, zero value otherwise.
func (o *IndexOffset) GetMilliseconds() int32 {
	if o == nil || IsNil(o.Milliseconds) {
		var ret int32
		return ret
	}
	return *o.Milliseconds
}

// GetMillisecondsOk returns a tuple with the Milliseconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexOffset) GetMillisecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.Milliseconds) {
		return nil, false
	}
	return o.Milliseconds, true
}

// HasMilliseconds returns a boolean if a field has been set.
func (o *IndexOffset) HasMilliseconds() bool {
	if o != nil && !IsNil(o.Milliseconds) {
		return true
	}

	return false
}

// SetMilliseconds gets a reference to the given int32 and assigns it to the Milliseconds field.
func (o *IndexOffset) SetMilliseconds(v int32) {
	o.Milliseconds = &v
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *IndexOffset) GetHours() int32 {
	if o == nil || IsNil(o.Hours) {
		var ret int32
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexOffset) GetHoursOk() (*int32, bool) {
	if o == nil || IsNil(o.Hours) {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *IndexOffset) HasHours() bool {
	if o != nil && !IsNil(o.Hours) {
		return true
	}

	return false
}

// SetHours gets a reference to the given int32 and assigns it to the Hours field.
func (o *IndexOffset) SetHours(v int32) {
	o.Hours = &v
}

// GetSeconds returns the Seconds field value if set, zero value otherwise.
func (o *IndexOffset) GetSeconds() int32 {
	if o == nil || IsNil(o.Seconds) {
		var ret int32
		return ret
	}
	return *o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexOffset) GetSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.Seconds) {
		return nil, false
	}
	return o.Seconds, true
}

// HasSeconds returns a boolean if a field has been set.
func (o *IndexOffset) HasSeconds() bool {
	if o != nil && !IsNil(o.Seconds) {
		return true
	}

	return false
}

// SetSeconds gets a reference to the given int32 and assigns it to the Seconds field.
func (o *IndexOffset) SetSeconds(v int32) {
	o.Seconds = &v
}

// GetMonths returns the Months field value if set, zero value otherwise.
func (o *IndexOffset) GetMonths() int32 {
	if o == nil || IsNil(o.Months) {
		var ret int32
		return ret
	}
	return *o.Months
}

// GetMonthsOk returns a tuple with the Months field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexOffset) GetMonthsOk() (*int32, bool) {
	if o == nil || IsNil(o.Months) {
		return nil, false
	}
	return o.Months, true
}

// HasMonths returns a boolean if a field has been set.
func (o *IndexOffset) HasMonths() bool {
	if o != nil && !IsNil(o.Months) {
		return true
	}

	return false
}

// SetMonths gets a reference to the given int32 and assigns it to the Months field.
func (o *IndexOffset) SetMonths(v int32) {
	o.Months = &v
}

// GetWeeks returns the Weeks field value if set, zero value otherwise.
func (o *IndexOffset) GetWeeks() int32 {
	if o == nil || IsNil(o.Weeks) {
		var ret int32
		return ret
	}
	return *o.Weeks
}

// GetWeeksOk returns a tuple with the Weeks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexOffset) GetWeeksOk() (*int32, bool) {
	if o == nil || IsNil(o.Weeks) {
		return nil, false
	}
	return o.Weeks, true
}

// HasWeeks returns a boolean if a field has been set.
func (o *IndexOffset) HasWeeks() bool {
	if o != nil && !IsNil(o.Weeks) {
		return true
	}

	return false
}

// SetWeeks gets a reference to the given int32 and assigns it to the Weeks field.
func (o *IndexOffset) SetWeeks(v int32) {
	o.Weeks = &v
}

// GetMinutes returns the Minutes field value if set, zero value otherwise.
func (o *IndexOffset) GetMinutes() int32 {
	if o == nil || IsNil(o.Minutes) {
		var ret int32
		return ret
	}
	return *o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexOffset) GetMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.Minutes) {
		return nil, false
	}
	return o.Minutes, true
}

// HasMinutes returns a boolean if a field has been set.
func (o *IndexOffset) HasMinutes() bool {
	if o != nil && !IsNil(o.Minutes) {
		return true
	}

	return false
}

// SetMinutes gets a reference to the given int32 and assigns it to the Minutes field.
func (o *IndexOffset) SetMinutes(v int32) {
	o.Minutes = &v
}

// GetQuarters returns the Quarters field value if set, zero value otherwise.
func (o *IndexOffset) GetQuarters() int32 {
	if o == nil || IsNil(o.Quarters) {
		var ret int32
		return ret
	}
	return *o.Quarters
}

// GetQuartersOk returns a tuple with the Quarters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexOffset) GetQuartersOk() (*int32, bool) {
	if o == nil || IsNil(o.Quarters) {
		return nil, false
	}
	return o.Quarters, true
}

// HasQuarters returns a boolean if a field has been set.
func (o *IndexOffset) HasQuarters() bool {
	if o != nil && !IsNil(o.Quarters) {
		return true
	}

	return false
}

// SetQuarters gets a reference to the given int32 and assigns it to the Quarters field.
func (o *IndexOffset) SetQuarters(v int32) {
	o.Quarters = &v
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *IndexOffset) GetDays() int32 {
	if o == nil || IsNil(o.Days) {
		var ret int32
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexOffset) GetDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.Days) {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *IndexOffset) HasDays() bool {
	if o != nil && !IsNil(o.Days) {
		return true
	}

	return false
}

// SetDays gets a reference to the given int32 and assigns it to the Days field.
func (o *IndexOffset) SetDays(v int32) {
	o.Days = &v
}

// GetYears returns the Years field value if set, zero value otherwise.
func (o *IndexOffset) GetYears() int32 {
	if o == nil || IsNil(o.Years) {
		var ret int32
		return ret
	}
	return *o.Years
}

// GetYearsOk returns a tuple with the Years field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexOffset) GetYearsOk() (*int32, bool) {
	if o == nil || IsNil(o.Years) {
		return nil, false
	}
	return o.Years, true
}

// HasYears returns a boolean if a field has been set.
func (o *IndexOffset) HasYears() bool {
	if o != nil && !IsNil(o.Years) {
		return true
	}

	return false
}

// SetYears gets a reference to the given int32 and assigns it to the Years field.
func (o *IndexOffset) SetYears(v int32) {
	o.Years = &v
}

func (o IndexOffset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndexOffset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Milliseconds) {
		toSerialize["milliseconds"] = o.Milliseconds
	}
	if !IsNil(o.Hours) {
		toSerialize["hours"] = o.Hours
	}
	if !IsNil(o.Seconds) {
		toSerialize["seconds"] = o.Seconds
	}
	if !IsNil(o.Months) {
		toSerialize["months"] = o.Months
	}
	if !IsNil(o.Weeks) {
		toSerialize["weeks"] = o.Weeks
	}
	if !IsNil(o.Minutes) {
		toSerialize["minutes"] = o.Minutes
	}
	if !IsNil(o.Quarters) {
		toSerialize["quarters"] = o.Quarters
	}
	if !IsNil(o.Days) {
		toSerialize["days"] = o.Days
	}
	if !IsNil(o.Years) {
		toSerialize["years"] = o.Years
	}
	return toSerialize, nil
}

type NullableIndexOffset struct {
	value *IndexOffset
	isSet bool
}

func (v NullableIndexOffset) Get() *IndexOffset {
	return v.value
}

func (v *NullableIndexOffset) Set(val *IndexOffset) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexOffset) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexOffset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexOffset(val *IndexOffset) *NullableIndexOffset {
	return &NullableIndexOffset{value: val, isSet: true}
}

func (v NullableIndexOffset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexOffset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


