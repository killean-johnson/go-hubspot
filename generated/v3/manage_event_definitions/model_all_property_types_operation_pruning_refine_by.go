/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AllPropertyTypesOperationPruningRefineBy - struct for AllPropertyTypesOperationPruningRefineBy
type AllPropertyTypesOperationPruningRefineBy struct {
	AbsoluteComparativeTimestampRefineBy *AbsoluteComparativeTimestampRefineBy
	AbsoluteRangedTimestampRefineBy *AbsoluteRangedTimestampRefineBy
	AllHistoryRefineBy *AllHistoryRefineBy
	RangedTimeOperation *RangedTimeOperation
	RelativeComparativeTimestampRefineBy *RelativeComparativeTimestampRefineBy
	RelativeRangedTimestampRefineBy *RelativeRangedTimestampRefineBy
	TimePointOperation *TimePointOperation
}

// AbsoluteComparativeTimestampRefineByAsAllPropertyTypesOperationPruningRefineBy is a convenience function that returns AbsoluteComparativeTimestampRefineBy wrapped in AllPropertyTypesOperationPruningRefineBy
func AbsoluteComparativeTimestampRefineByAsAllPropertyTypesOperationPruningRefineBy(v *AbsoluteComparativeTimestampRefineBy) AllPropertyTypesOperationPruningRefineBy {
	return AllPropertyTypesOperationPruningRefineBy{
		AbsoluteComparativeTimestampRefineBy: v,
	}
}

// AbsoluteRangedTimestampRefineByAsAllPropertyTypesOperationPruningRefineBy is a convenience function that returns AbsoluteRangedTimestampRefineBy wrapped in AllPropertyTypesOperationPruningRefineBy
func AbsoluteRangedTimestampRefineByAsAllPropertyTypesOperationPruningRefineBy(v *AbsoluteRangedTimestampRefineBy) AllPropertyTypesOperationPruningRefineBy {
	return AllPropertyTypesOperationPruningRefineBy{
		AbsoluteRangedTimestampRefineBy: v,
	}
}

// AllHistoryRefineByAsAllPropertyTypesOperationPruningRefineBy is a convenience function that returns AllHistoryRefineBy wrapped in AllPropertyTypesOperationPruningRefineBy
func AllHistoryRefineByAsAllPropertyTypesOperationPruningRefineBy(v *AllHistoryRefineBy) AllPropertyTypesOperationPruningRefineBy {
	return AllPropertyTypesOperationPruningRefineBy{
		AllHistoryRefineBy: v,
	}
}

// RangedTimeOperationAsAllPropertyTypesOperationPruningRefineBy is a convenience function that returns RangedTimeOperation wrapped in AllPropertyTypesOperationPruningRefineBy
func RangedTimeOperationAsAllPropertyTypesOperationPruningRefineBy(v *RangedTimeOperation) AllPropertyTypesOperationPruningRefineBy {
	return AllPropertyTypesOperationPruningRefineBy{
		RangedTimeOperation: v,
	}
}

// RelativeComparativeTimestampRefineByAsAllPropertyTypesOperationPruningRefineBy is a convenience function that returns RelativeComparativeTimestampRefineBy wrapped in AllPropertyTypesOperationPruningRefineBy
func RelativeComparativeTimestampRefineByAsAllPropertyTypesOperationPruningRefineBy(v *RelativeComparativeTimestampRefineBy) AllPropertyTypesOperationPruningRefineBy {
	return AllPropertyTypesOperationPruningRefineBy{
		RelativeComparativeTimestampRefineBy: v,
	}
}

// RelativeRangedTimestampRefineByAsAllPropertyTypesOperationPruningRefineBy is a convenience function that returns RelativeRangedTimestampRefineBy wrapped in AllPropertyTypesOperationPruningRefineBy
func RelativeRangedTimestampRefineByAsAllPropertyTypesOperationPruningRefineBy(v *RelativeRangedTimestampRefineBy) AllPropertyTypesOperationPruningRefineBy {
	return AllPropertyTypesOperationPruningRefineBy{
		RelativeRangedTimestampRefineBy: v,
	}
}

// TimePointOperationAsAllPropertyTypesOperationPruningRefineBy is a convenience function that returns TimePointOperation wrapped in AllPropertyTypesOperationPruningRefineBy
func TimePointOperationAsAllPropertyTypesOperationPruningRefineBy(v *TimePointOperation) AllPropertyTypesOperationPruningRefineBy {
	return AllPropertyTypesOperationPruningRefineBy{
		TimePointOperation: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AllPropertyTypesOperationPruningRefineBy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AbsoluteComparativeTimestampRefineBy
	err = newStrictDecoder(data).Decode(&dst.AbsoluteComparativeTimestampRefineBy)
	if err == nil {
		jsonAbsoluteComparativeTimestampRefineBy, _ := json.Marshal(dst.AbsoluteComparativeTimestampRefineBy)
		if string(jsonAbsoluteComparativeTimestampRefineBy) == "{}" { // empty struct
			dst.AbsoluteComparativeTimestampRefineBy = nil
		} else {
			if err = validator.Validate(dst.AbsoluteComparativeTimestampRefineBy); err != nil {
				dst.AbsoluteComparativeTimestampRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.AbsoluteComparativeTimestampRefineBy = nil
	}

	// try to unmarshal data into AbsoluteRangedTimestampRefineBy
	err = newStrictDecoder(data).Decode(&dst.AbsoluteRangedTimestampRefineBy)
	if err == nil {
		jsonAbsoluteRangedTimestampRefineBy, _ := json.Marshal(dst.AbsoluteRangedTimestampRefineBy)
		if string(jsonAbsoluteRangedTimestampRefineBy) == "{}" { // empty struct
			dst.AbsoluteRangedTimestampRefineBy = nil
		} else {
			if err = validator.Validate(dst.AbsoluteRangedTimestampRefineBy); err != nil {
				dst.AbsoluteRangedTimestampRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.AbsoluteRangedTimestampRefineBy = nil
	}

	// try to unmarshal data into AllHistoryRefineBy
	err = newStrictDecoder(data).Decode(&dst.AllHistoryRefineBy)
	if err == nil {
		jsonAllHistoryRefineBy, _ := json.Marshal(dst.AllHistoryRefineBy)
		if string(jsonAllHistoryRefineBy) == "{}" { // empty struct
			dst.AllHistoryRefineBy = nil
		} else {
			if err = validator.Validate(dst.AllHistoryRefineBy); err != nil {
				dst.AllHistoryRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.AllHistoryRefineBy = nil
	}

	// try to unmarshal data into RangedTimeOperation
	err = newStrictDecoder(data).Decode(&dst.RangedTimeOperation)
	if err == nil {
		jsonRangedTimeOperation, _ := json.Marshal(dst.RangedTimeOperation)
		if string(jsonRangedTimeOperation) == "{}" { // empty struct
			dst.RangedTimeOperation = nil
		} else {
			if err = validator.Validate(dst.RangedTimeOperation); err != nil {
				dst.RangedTimeOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.RangedTimeOperation = nil
	}

	// try to unmarshal data into RelativeComparativeTimestampRefineBy
	err = newStrictDecoder(data).Decode(&dst.RelativeComparativeTimestampRefineBy)
	if err == nil {
		jsonRelativeComparativeTimestampRefineBy, _ := json.Marshal(dst.RelativeComparativeTimestampRefineBy)
		if string(jsonRelativeComparativeTimestampRefineBy) == "{}" { // empty struct
			dst.RelativeComparativeTimestampRefineBy = nil
		} else {
			if err = validator.Validate(dst.RelativeComparativeTimestampRefineBy); err != nil {
				dst.RelativeComparativeTimestampRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.RelativeComparativeTimestampRefineBy = nil
	}

	// try to unmarshal data into RelativeRangedTimestampRefineBy
	err = newStrictDecoder(data).Decode(&dst.RelativeRangedTimestampRefineBy)
	if err == nil {
		jsonRelativeRangedTimestampRefineBy, _ := json.Marshal(dst.RelativeRangedTimestampRefineBy)
		if string(jsonRelativeRangedTimestampRefineBy) == "{}" { // empty struct
			dst.RelativeRangedTimestampRefineBy = nil
		} else {
			if err = validator.Validate(dst.RelativeRangedTimestampRefineBy); err != nil {
				dst.RelativeRangedTimestampRefineBy = nil
			} else {
				match++
			}
		}
	} else {
		dst.RelativeRangedTimestampRefineBy = nil
	}

	// try to unmarshal data into TimePointOperation
	err = newStrictDecoder(data).Decode(&dst.TimePointOperation)
	if err == nil {
		jsonTimePointOperation, _ := json.Marshal(dst.TimePointOperation)
		if string(jsonTimePointOperation) == "{}" { // empty struct
			dst.TimePointOperation = nil
		} else {
			if err = validator.Validate(dst.TimePointOperation); err != nil {
				dst.TimePointOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimePointOperation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AbsoluteComparativeTimestampRefineBy = nil
		dst.AbsoluteRangedTimestampRefineBy = nil
		dst.AllHistoryRefineBy = nil
		dst.RangedTimeOperation = nil
		dst.RelativeComparativeTimestampRefineBy = nil
		dst.RelativeRangedTimestampRefineBy = nil
		dst.TimePointOperation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AllPropertyTypesOperationPruningRefineBy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AllPropertyTypesOperationPruningRefineBy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AllPropertyTypesOperationPruningRefineBy) MarshalJSON() ([]byte, error) {
	if src.AbsoluteComparativeTimestampRefineBy != nil {
		return json.Marshal(&src.AbsoluteComparativeTimestampRefineBy)
	}

	if src.AbsoluteRangedTimestampRefineBy != nil {
		return json.Marshal(&src.AbsoluteRangedTimestampRefineBy)
	}

	if src.AllHistoryRefineBy != nil {
		return json.Marshal(&src.AllHistoryRefineBy)
	}

	if src.RangedTimeOperation != nil {
		return json.Marshal(&src.RangedTimeOperation)
	}

	if src.RelativeComparativeTimestampRefineBy != nil {
		return json.Marshal(&src.RelativeComparativeTimestampRefineBy)
	}

	if src.RelativeRangedTimestampRefineBy != nil {
		return json.Marshal(&src.RelativeRangedTimestampRefineBy)
	}

	if src.TimePointOperation != nil {
		return json.Marshal(&src.TimePointOperation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AllPropertyTypesOperationPruningRefineBy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AbsoluteComparativeTimestampRefineBy != nil {
		return obj.AbsoluteComparativeTimestampRefineBy
	}

	if obj.AbsoluteRangedTimestampRefineBy != nil {
		return obj.AbsoluteRangedTimestampRefineBy
	}

	if obj.AllHistoryRefineBy != nil {
		return obj.AllHistoryRefineBy
	}

	if obj.RangedTimeOperation != nil {
		return obj.RangedTimeOperation
	}

	if obj.RelativeComparativeTimestampRefineBy != nil {
		return obj.RelativeComparativeTimestampRefineBy
	}

	if obj.RelativeRangedTimestampRefineBy != nil {
		return obj.RelativeRangedTimestampRefineBy
	}

	if obj.TimePointOperation != nil {
		return obj.TimePointOperation
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AllPropertyTypesOperationPruningRefineBy) GetActualInstanceValue() (interface{}) {
	if obj.AbsoluteComparativeTimestampRefineBy != nil {
		return *obj.AbsoluteComparativeTimestampRefineBy
	}

	if obj.AbsoluteRangedTimestampRefineBy != nil {
		return *obj.AbsoluteRangedTimestampRefineBy
	}

	if obj.AllHistoryRefineBy != nil {
		return *obj.AllHistoryRefineBy
	}

	if obj.RangedTimeOperation != nil {
		return *obj.RangedTimeOperation
	}

	if obj.RelativeComparativeTimestampRefineBy != nil {
		return *obj.RelativeComparativeTimestampRefineBy
	}

	if obj.RelativeRangedTimestampRefineBy != nil {
		return *obj.RelativeRangedTimestampRefineBy
	}

	if obj.TimePointOperation != nil {
		return *obj.TimePointOperation
	}

	// all schemas are nil
	return nil
}

type NullableAllPropertyTypesOperationPruningRefineBy struct {
	value *AllPropertyTypesOperationPruningRefineBy
	isSet bool
}

func (v NullableAllPropertyTypesOperationPruningRefineBy) Get() *AllPropertyTypesOperationPruningRefineBy {
	return v.value
}

func (v *NullableAllPropertyTypesOperationPruningRefineBy) Set(val *AllPropertyTypesOperationPruningRefineBy) {
	v.value = val
	v.isSet = true
}

func (v NullableAllPropertyTypesOperationPruningRefineBy) IsSet() bool {
	return v.isSet
}

func (v *NullableAllPropertyTypesOperationPruningRefineBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllPropertyTypesOperationPruningRefineBy(val *AllPropertyTypesOperationPruningRefineBy) *NullableAllPropertyTypesOperationPruningRefineBy {
	return &NullableAllPropertyTypesOperationPruningRefineBy{value: val, isSet: true}
}

func (v NullableAllPropertyTypesOperationPruningRefineBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllPropertyTypesOperationPruningRefineBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


