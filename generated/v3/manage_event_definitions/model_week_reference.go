/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WeekReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WeekReference{}

// WeekReference struct for WeekReference
type WeekReference struct {
	DayOfWeek string `json:"dayOfWeek"`
	Hour *int32 `json:"hour,omitempty"`
	Millisecond *int32 `json:"millisecond,omitempty"`
	ReferenceType string `json:"referenceType"`
	Minute *int32 `json:"minute,omitempty"`
	Second *int32 `json:"second,omitempty"`
}

type _WeekReference WeekReference

// NewWeekReference instantiates a new WeekReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeekReference(dayOfWeek string, referenceType string) *WeekReference {
	this := WeekReference{}
	this.DayOfWeek = dayOfWeek
	this.ReferenceType = referenceType
	return &this
}

// NewWeekReferenceWithDefaults instantiates a new WeekReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeekReferenceWithDefaults() *WeekReference {
	this := WeekReference{}
	var referenceType string = "WEEK"
	this.ReferenceType = referenceType
	return &this
}

// GetDayOfWeek returns the DayOfWeek field value
func (o *WeekReference) GetDayOfWeek() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value
// and a boolean to check if the value has been set.
func (o *WeekReference) GetDayOfWeekOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DayOfWeek, true
}

// SetDayOfWeek sets field value
func (o *WeekReference) SetDayOfWeek(v string) {
	o.DayOfWeek = v
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *WeekReference) GetHour() int32 {
	if o == nil || IsNil(o.Hour) {
		var ret int32
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WeekReference) GetHourOk() (*int32, bool) {
	if o == nil || IsNil(o.Hour) {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *WeekReference) HasHour() bool {
	if o != nil && !IsNil(o.Hour) {
		return true
	}

	return false
}

// SetHour gets a reference to the given int32 and assigns it to the Hour field.
func (o *WeekReference) SetHour(v int32) {
	o.Hour = &v
}

// GetMillisecond returns the Millisecond field value if set, zero value otherwise.
func (o *WeekReference) GetMillisecond() int32 {
	if o == nil || IsNil(o.Millisecond) {
		var ret int32
		return ret
	}
	return *o.Millisecond
}

// GetMillisecondOk returns a tuple with the Millisecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WeekReference) GetMillisecondOk() (*int32, bool) {
	if o == nil || IsNil(o.Millisecond) {
		return nil, false
	}
	return o.Millisecond, true
}

// HasMillisecond returns a boolean if a field has been set.
func (o *WeekReference) HasMillisecond() bool {
	if o != nil && !IsNil(o.Millisecond) {
		return true
	}

	return false
}

// SetMillisecond gets a reference to the given int32 and assigns it to the Millisecond field.
func (o *WeekReference) SetMillisecond(v int32) {
	o.Millisecond = &v
}

// GetReferenceType returns the ReferenceType field value
func (o *WeekReference) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *WeekReference) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *WeekReference) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetMinute returns the Minute field value if set, zero value otherwise.
func (o *WeekReference) GetMinute() int32 {
	if o == nil || IsNil(o.Minute) {
		var ret int32
		return ret
	}
	return *o.Minute
}

// GetMinuteOk returns a tuple with the Minute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WeekReference) GetMinuteOk() (*int32, bool) {
	if o == nil || IsNil(o.Minute) {
		return nil, false
	}
	return o.Minute, true
}

// HasMinute returns a boolean if a field has been set.
func (o *WeekReference) HasMinute() bool {
	if o != nil && !IsNil(o.Minute) {
		return true
	}

	return false
}

// SetMinute gets a reference to the given int32 and assigns it to the Minute field.
func (o *WeekReference) SetMinute(v int32) {
	o.Minute = &v
}

// GetSecond returns the Second field value if set, zero value otherwise.
func (o *WeekReference) GetSecond() int32 {
	if o == nil || IsNil(o.Second) {
		var ret int32
		return ret
	}
	return *o.Second
}

// GetSecondOk returns a tuple with the Second field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WeekReference) GetSecondOk() (*int32, bool) {
	if o == nil || IsNil(o.Second) {
		return nil, false
	}
	return o.Second, true
}

// HasSecond returns a boolean if a field has been set.
func (o *WeekReference) HasSecond() bool {
	if o != nil && !IsNil(o.Second) {
		return true
	}

	return false
}

// SetSecond gets a reference to the given int32 and assigns it to the Second field.
func (o *WeekReference) SetSecond(v int32) {
	o.Second = &v
}

func (o WeekReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WeekReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dayOfWeek"] = o.DayOfWeek
	if !IsNil(o.Hour) {
		toSerialize["hour"] = o.Hour
	}
	if !IsNil(o.Millisecond) {
		toSerialize["millisecond"] = o.Millisecond
	}
	toSerialize["referenceType"] = o.ReferenceType
	if !IsNil(o.Minute) {
		toSerialize["minute"] = o.Minute
	}
	if !IsNil(o.Second) {
		toSerialize["second"] = o.Second
	}
	return toSerialize, nil
}

func (o *WeekReference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dayOfWeek",
		"referenceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWeekReference := _WeekReference{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWeekReference)

	if err != nil {
		return err
	}

	*o = WeekReference(varWeekReference)

	return err
}

type NullableWeekReference struct {
	value *WeekReference
	isSet bool
}

func (v NullableWeekReference) Get() *WeekReference {
	return v.value
}

func (v *NullableWeekReference) Set(val *WeekReference) {
	v.value = val
	v.isSet = true
}

func (v NullableWeekReference) IsSet() bool {
	return v.isSet
}

func (v *NullableWeekReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeekReference(val *WeekReference) *NullableWeekReference {
	return &NullableWeekReference{value: val, isSet: true}
}

func (v NullableWeekReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeekReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


