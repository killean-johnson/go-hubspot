/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimeOffset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeOffset{}

// TimeOffset struct for TimeOffset
type TimeOffset struct {
	Amount int32 `json:"amount"`
	OffsetDirection string `json:"offsetDirection"`
	TimeUnit string `json:"timeUnit"`
}

type _TimeOffset TimeOffset

// NewTimeOffset instantiates a new TimeOffset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeOffset(amount int32, offsetDirection string, timeUnit string) *TimeOffset {
	this := TimeOffset{}
	this.Amount = amount
	this.OffsetDirection = offsetDirection
	this.TimeUnit = timeUnit
	return &this
}

// NewTimeOffsetWithDefaults instantiates a new TimeOffset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeOffsetWithDefaults() *TimeOffset {
	this := TimeOffset{}
	return &this
}

// GetAmount returns the Amount field value
func (o *TimeOffset) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TimeOffset) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TimeOffset) SetAmount(v int32) {
	o.Amount = v
}

// GetOffsetDirection returns the OffsetDirection field value
func (o *TimeOffset) GetOffsetDirection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OffsetDirection
}

// GetOffsetDirectionOk returns a tuple with the OffsetDirection field value
// and a boolean to check if the value has been set.
func (o *TimeOffset) GetOffsetDirectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OffsetDirection, true
}

// SetOffsetDirection sets field value
func (o *TimeOffset) SetOffsetDirection(v string) {
	o.OffsetDirection = v
}

// GetTimeUnit returns the TimeUnit field value
func (o *TimeOffset) GetTimeUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value
// and a boolean to check if the value has been set.
func (o *TimeOffset) GetTimeUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeUnit, true
}

// SetTimeUnit sets field value
func (o *TimeOffset) SetTimeUnit(v string) {
	o.TimeUnit = v
}

func (o TimeOffset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeOffset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["offsetDirection"] = o.OffsetDirection
	toSerialize["timeUnit"] = o.TimeUnit
	return toSerialize, nil
}

func (o *TimeOffset) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"offsetDirection",
		"timeUnit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeOffset := _TimeOffset{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeOffset)

	if err != nil {
		return err
	}

	*o = TimeOffset(varTimeOffset)

	return err
}

type NullableTimeOffset struct {
	value *TimeOffset
	isSet bool
}

func (v NullableTimeOffset) Get() *TimeOffset {
	return v.value
}

func (v *NullableTimeOffset) Set(val *TimeOffset) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeOffset) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeOffset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeOffset(val *TimeOffset) *NullableTimeOffset {
	return &NullableTimeOffset{value: val, isSet: true}
}

func (v NullableTimeOffset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeOffset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


