/*
Events Manage Event Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package manage_event_definitions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RelativeRangedTimestampRefineBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelativeRangedTimestampRefineBy{}

// RelativeRangedTimestampRefineBy struct for RelativeRangedTimestampRefineBy
type RelativeRangedTimestampRefineBy struct {
	UpperBoundOffset TimeOffset `json:"upperBoundOffset"`
	LowerBoundOffset TimeOffset `json:"lowerBoundOffset"`
	RangeType string `json:"rangeType"`
	Type string `json:"type"`
}

type _RelativeRangedTimestampRefineBy RelativeRangedTimestampRefineBy

// NewRelativeRangedTimestampRefineBy instantiates a new RelativeRangedTimestampRefineBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelativeRangedTimestampRefineBy(upperBoundOffset TimeOffset, lowerBoundOffset TimeOffset, rangeType string, type_ string) *RelativeRangedTimestampRefineBy {
	this := RelativeRangedTimestampRefineBy{}
	this.UpperBoundOffset = upperBoundOffset
	this.LowerBoundOffset = lowerBoundOffset
	this.RangeType = rangeType
	this.Type = type_
	return &this
}

// NewRelativeRangedTimestampRefineByWithDefaults instantiates a new RelativeRangedTimestampRefineBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelativeRangedTimestampRefineByWithDefaults() *RelativeRangedTimestampRefineBy {
	this := RelativeRangedTimestampRefineBy{}
	var type_ string = "RelativeRangedTimestampRefineBy"
	this.Type = type_
	return &this
}

// GetUpperBoundOffset returns the UpperBoundOffset field value
func (o *RelativeRangedTimestampRefineBy) GetUpperBoundOffset() TimeOffset {
	if o == nil {
		var ret TimeOffset
		return ret
	}

	return o.UpperBoundOffset
}

// GetUpperBoundOffsetOk returns a tuple with the UpperBoundOffset field value
// and a boolean to check if the value has been set.
func (o *RelativeRangedTimestampRefineBy) GetUpperBoundOffsetOk() (*TimeOffset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpperBoundOffset, true
}

// SetUpperBoundOffset sets field value
func (o *RelativeRangedTimestampRefineBy) SetUpperBoundOffset(v TimeOffset) {
	o.UpperBoundOffset = v
}

// GetLowerBoundOffset returns the LowerBoundOffset field value
func (o *RelativeRangedTimestampRefineBy) GetLowerBoundOffset() TimeOffset {
	if o == nil {
		var ret TimeOffset
		return ret
	}

	return o.LowerBoundOffset
}

// GetLowerBoundOffsetOk returns a tuple with the LowerBoundOffset field value
// and a boolean to check if the value has been set.
func (o *RelativeRangedTimestampRefineBy) GetLowerBoundOffsetOk() (*TimeOffset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowerBoundOffset, true
}

// SetLowerBoundOffset sets field value
func (o *RelativeRangedTimestampRefineBy) SetLowerBoundOffset(v TimeOffset) {
	o.LowerBoundOffset = v
}

// GetRangeType returns the RangeType field value
func (o *RelativeRangedTimestampRefineBy) GetRangeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RangeType
}

// GetRangeTypeOk returns a tuple with the RangeType field value
// and a boolean to check if the value has been set.
func (o *RelativeRangedTimestampRefineBy) GetRangeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RangeType, true
}

// SetRangeType sets field value
func (o *RelativeRangedTimestampRefineBy) SetRangeType(v string) {
	o.RangeType = v
}

// GetType returns the Type field value
func (o *RelativeRangedTimestampRefineBy) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RelativeRangedTimestampRefineBy) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RelativeRangedTimestampRefineBy) SetType(v string) {
	o.Type = v
}

func (o RelativeRangedTimestampRefineBy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelativeRangedTimestampRefineBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["upperBoundOffset"] = o.UpperBoundOffset
	toSerialize["lowerBoundOffset"] = o.LowerBoundOffset
	toSerialize["rangeType"] = o.RangeType
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *RelativeRangedTimestampRefineBy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"upperBoundOffset",
		"lowerBoundOffset",
		"rangeType",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRelativeRangedTimestampRefineBy := _RelativeRangedTimestampRefineBy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRelativeRangedTimestampRefineBy)

	if err != nil {
		return err
	}

	*o = RelativeRangedTimestampRefineBy(varRelativeRangedTimestampRefineBy)

	return err
}

type NullableRelativeRangedTimestampRefineBy struct {
	value *RelativeRangedTimestampRefineBy
	isSet bool
}

func (v NullableRelativeRangedTimestampRefineBy) Get() *RelativeRangedTimestampRefineBy {
	return v.value
}

func (v *NullableRelativeRangedTimestampRefineBy) Set(val *RelativeRangedTimestampRefineBy) {
	v.value = val
	v.isSet = true
}

func (v NullableRelativeRangedTimestampRefineBy) IsSet() bool {
	return v.isSet
}

func (v *NullableRelativeRangedTimestampRefineBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelativeRangedTimestampRefineBy(val *RelativeRangedTimestampRefineBy) *NullableRelativeRangedTimestampRefineBy {
	return &NullableRelativeRangedTimestampRefineBy{value: val, isSet: true}
}

func (v NullableRelativeRangedTimestampRefineBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelativeRangedTimestampRefineBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


