/*
Imports

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package imports

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicImportError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicImportError{}

// PublicImportError struct for PublicImportError
type PublicImportError struct {
	CreatedAt int32 `json:"createdAt"`
	ExtraContext *string `json:"extraContext,omitempty"`
	ObjectTypeId *string `json:"objectTypeId,omitempty"`
	ErrorType string `json:"errorType"`
	InvalidPropertyValue *PropertyValue `json:"invalidPropertyValue,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	KnownColumnNumber *int32 `json:"knownColumnNumber,omitempty"`
	InvalidValueToDisplay *string `json:"invalidValueToDisplay,omitempty"`
	Id string `json:"id"`
	SourceData ImportRowCore `json:"sourceData"`
	ObjectType *string `json:"objectType,omitempty"`
	InvalidValue *string `json:"invalidValue,omitempty"`
}

type _PublicImportError PublicImportError

// NewPublicImportError instantiates a new PublicImportError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicImportError(createdAt int32, errorType string, id string, sourceData ImportRowCore) *PublicImportError {
	this := PublicImportError{}
	this.CreatedAt = createdAt
	this.ErrorType = errorType
	this.Id = id
	this.SourceData = sourceData
	return &this
}

// NewPublicImportErrorWithDefaults instantiates a new PublicImportError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicImportErrorWithDefaults() *PublicImportError {
	this := PublicImportError{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *PublicImportError) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PublicImportError) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

// GetExtraContext returns the ExtraContext field value if set, zero value otherwise.
func (o *PublicImportError) GetExtraContext() string {
	if o == nil || IsNil(o.ExtraContext) {
		var ret string
		return ret
	}
	return *o.ExtraContext
}

// GetExtraContextOk returns a tuple with the ExtraContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetExtraContextOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraContext) {
		return nil, false
	}
	return o.ExtraContext, true
}

// HasExtraContext returns a boolean if a field has been set.
func (o *PublicImportError) HasExtraContext() bool {
	if o != nil && !IsNil(o.ExtraContext) {
		return true
	}

	return false
}

// SetExtraContext gets a reference to the given string and assigns it to the ExtraContext field.
func (o *PublicImportError) SetExtraContext(v string) {
	o.ExtraContext = &v
}

// GetObjectTypeId returns the ObjectTypeId field value if set, zero value otherwise.
func (o *PublicImportError) GetObjectTypeId() string {
	if o == nil || IsNil(o.ObjectTypeId) {
		var ret string
		return ret
	}
	return *o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetObjectTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectTypeId) {
		return nil, false
	}
	return o.ObjectTypeId, true
}

// HasObjectTypeId returns a boolean if a field has been set.
func (o *PublicImportError) HasObjectTypeId() bool {
	if o != nil && !IsNil(o.ObjectTypeId) {
		return true
	}

	return false
}

// SetObjectTypeId gets a reference to the given string and assigns it to the ObjectTypeId field.
func (o *PublicImportError) SetObjectTypeId(v string) {
	o.ObjectTypeId = &v
}

// GetErrorType returns the ErrorType field value
func (o *PublicImportError) GetErrorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetErrorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorType, true
}

// SetErrorType sets field value
func (o *PublicImportError) SetErrorType(v string) {
	o.ErrorType = v
}

// GetInvalidPropertyValue returns the InvalidPropertyValue field value if set, zero value otherwise.
func (o *PublicImportError) GetInvalidPropertyValue() PropertyValue {
	if o == nil || IsNil(o.InvalidPropertyValue) {
		var ret PropertyValue
		return ret
	}
	return *o.InvalidPropertyValue
}

// GetInvalidPropertyValueOk returns a tuple with the InvalidPropertyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetInvalidPropertyValueOk() (*PropertyValue, bool) {
	if o == nil || IsNil(o.InvalidPropertyValue) {
		return nil, false
	}
	return o.InvalidPropertyValue, true
}

// HasInvalidPropertyValue returns a boolean if a field has been set.
func (o *PublicImportError) HasInvalidPropertyValue() bool {
	if o != nil && !IsNil(o.InvalidPropertyValue) {
		return true
	}

	return false
}

// SetInvalidPropertyValue gets a reference to the given PropertyValue and assigns it to the InvalidPropertyValue field.
func (o *PublicImportError) SetInvalidPropertyValue(v PropertyValue) {
	o.InvalidPropertyValue = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *PublicImportError) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *PublicImportError) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *PublicImportError) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetKnownColumnNumber returns the KnownColumnNumber field value if set, zero value otherwise.
func (o *PublicImportError) GetKnownColumnNumber() int32 {
	if o == nil || IsNil(o.KnownColumnNumber) {
		var ret int32
		return ret
	}
	return *o.KnownColumnNumber
}

// GetKnownColumnNumberOk returns a tuple with the KnownColumnNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetKnownColumnNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.KnownColumnNumber) {
		return nil, false
	}
	return o.KnownColumnNumber, true
}

// HasKnownColumnNumber returns a boolean if a field has been set.
func (o *PublicImportError) HasKnownColumnNumber() bool {
	if o != nil && !IsNil(o.KnownColumnNumber) {
		return true
	}

	return false
}

// SetKnownColumnNumber gets a reference to the given int32 and assigns it to the KnownColumnNumber field.
func (o *PublicImportError) SetKnownColumnNumber(v int32) {
	o.KnownColumnNumber = &v
}

// GetInvalidValueToDisplay returns the InvalidValueToDisplay field value if set, zero value otherwise.
func (o *PublicImportError) GetInvalidValueToDisplay() string {
	if o == nil || IsNil(o.InvalidValueToDisplay) {
		var ret string
		return ret
	}
	return *o.InvalidValueToDisplay
}

// GetInvalidValueToDisplayOk returns a tuple with the InvalidValueToDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetInvalidValueToDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidValueToDisplay) {
		return nil, false
	}
	return o.InvalidValueToDisplay, true
}

// HasInvalidValueToDisplay returns a boolean if a field has been set.
func (o *PublicImportError) HasInvalidValueToDisplay() bool {
	if o != nil && !IsNil(o.InvalidValueToDisplay) {
		return true
	}

	return false
}

// SetInvalidValueToDisplay gets a reference to the given string and assigns it to the InvalidValueToDisplay field.
func (o *PublicImportError) SetInvalidValueToDisplay(v string) {
	o.InvalidValueToDisplay = &v
}

// GetId returns the Id field value
func (o *PublicImportError) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicImportError) SetId(v string) {
	o.Id = v
}

// GetSourceData returns the SourceData field value
func (o *PublicImportError) GetSourceData() ImportRowCore {
	if o == nil {
		var ret ImportRowCore
		return ret
	}

	return o.SourceData
}

// GetSourceDataOk returns a tuple with the SourceData field value
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetSourceDataOk() (*ImportRowCore, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceData, true
}

// SetSourceData sets field value
func (o *PublicImportError) SetSourceData(v ImportRowCore) {
	o.SourceData = v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *PublicImportError) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *PublicImportError) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *PublicImportError) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetInvalidValue returns the InvalidValue field value if set, zero value otherwise.
func (o *PublicImportError) GetInvalidValue() string {
	if o == nil || IsNil(o.InvalidValue) {
		var ret string
		return ret
	}
	return *o.InvalidValue
}

// GetInvalidValueOk returns a tuple with the InvalidValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicImportError) GetInvalidValueOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidValue) {
		return nil, false
	}
	return o.InvalidValue, true
}

// HasInvalidValue returns a boolean if a field has been set.
func (o *PublicImportError) HasInvalidValue() bool {
	if o != nil && !IsNil(o.InvalidValue) {
		return true
	}

	return false
}

// SetInvalidValue gets a reference to the given string and assigns it to the InvalidValue field.
func (o *PublicImportError) SetInvalidValue(v string) {
	o.InvalidValue = &v
}

func (o PublicImportError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicImportError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.ExtraContext) {
		toSerialize["extraContext"] = o.ExtraContext
	}
	if !IsNil(o.ObjectTypeId) {
		toSerialize["objectTypeId"] = o.ObjectTypeId
	}
	toSerialize["errorType"] = o.ErrorType
	if !IsNil(o.InvalidPropertyValue) {
		toSerialize["invalidPropertyValue"] = o.InvalidPropertyValue
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.KnownColumnNumber) {
		toSerialize["knownColumnNumber"] = o.KnownColumnNumber
	}
	if !IsNil(o.InvalidValueToDisplay) {
		toSerialize["invalidValueToDisplay"] = o.InvalidValueToDisplay
	}
	toSerialize["id"] = o.Id
	toSerialize["sourceData"] = o.SourceData
	if !IsNil(o.ObjectType) {
		toSerialize["objectType"] = o.ObjectType
	}
	if !IsNil(o.InvalidValue) {
		toSerialize["invalidValue"] = o.InvalidValue
	}
	return toSerialize, nil
}

func (o *PublicImportError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"errorType",
		"id",
		"sourceData",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicImportError := _PublicImportError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicImportError)

	if err != nil {
		return err
	}

	*o = PublicImportError(varPublicImportError)

	return err
}

type NullablePublicImportError struct {
	value *PublicImportError
	isSet bool
}

func (v NullablePublicImportError) Get() *PublicImportError {
	return v.value
}

func (v *NullablePublicImportError) Set(val *PublicImportError) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicImportError) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicImportError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicImportError(val *PublicImportError) *NullablePublicImportError {
	return &NullablePublicImportError{value: val, isSet: true}
}

func (v NullablePublicImportError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicImportError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


