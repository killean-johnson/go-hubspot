/*
Marketing Emails

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_emails

import (
	"encoding/json"
)

// checks if the PublicDividerStyleSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicDividerStyleSettings{}

// PublicDividerStyleSettings struct for PublicDividerStyleSettings
type PublicDividerStyleSettings struct {
	Color map[string]interface{} `json:"color,omitempty"`
	LineType *string `json:"lineType,omitempty"`
	Height *int32 `json:"height,omitempty"`
}

// NewPublicDividerStyleSettings instantiates a new PublicDividerStyleSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicDividerStyleSettings() *PublicDividerStyleSettings {
	this := PublicDividerStyleSettings{}
	return &this
}

// NewPublicDividerStyleSettingsWithDefaults instantiates a new PublicDividerStyleSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicDividerStyleSettingsWithDefaults() *PublicDividerStyleSettings {
	this := PublicDividerStyleSettings{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *PublicDividerStyleSettings) GetColor() map[string]interface{} {
	if o == nil || IsNil(o.Color) {
		var ret map[string]interface{}
		return ret
	}
	return o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicDividerStyleSettings) GetColorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Color) {
		return map[string]interface{}{}, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *PublicDividerStyleSettings) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given map[string]interface{} and assigns it to the Color field.
func (o *PublicDividerStyleSettings) SetColor(v map[string]interface{}) {
	o.Color = v
}

// GetLineType returns the LineType field value if set, zero value otherwise.
func (o *PublicDividerStyleSettings) GetLineType() string {
	if o == nil || IsNil(o.LineType) {
		var ret string
		return ret
	}
	return *o.LineType
}

// GetLineTypeOk returns a tuple with the LineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicDividerStyleSettings) GetLineTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LineType) {
		return nil, false
	}
	return o.LineType, true
}

// HasLineType returns a boolean if a field has been set.
func (o *PublicDividerStyleSettings) HasLineType() bool {
	if o != nil && !IsNil(o.LineType) {
		return true
	}

	return false
}

// SetLineType gets a reference to the given string and assigns it to the LineType field.
func (o *PublicDividerStyleSettings) SetLineType(v string) {
	o.LineType = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *PublicDividerStyleSettings) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicDividerStyleSettings) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *PublicDividerStyleSettings) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *PublicDividerStyleSettings) SetHeight(v int32) {
	o.Height = &v
}

func (o PublicDividerStyleSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicDividerStyleSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.LineType) {
		toSerialize["lineType"] = o.LineType
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	return toSerialize, nil
}

type NullablePublicDividerStyleSettings struct {
	value *PublicDividerStyleSettings
	isSet bool
}

func (v NullablePublicDividerStyleSettings) Get() *PublicDividerStyleSettings {
	return v.value
}

func (v *NullablePublicDividerStyleSettings) Set(val *PublicDividerStyleSettings) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicDividerStyleSettings) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicDividerStyleSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicDividerStyleSettings(val *PublicDividerStyleSettings) *NullablePublicDividerStyleSettings {
	return &NullablePublicDividerStyleSettings{value: val, isSet: true}
}

func (v NullablePublicDividerStyleSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicDividerStyleSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


