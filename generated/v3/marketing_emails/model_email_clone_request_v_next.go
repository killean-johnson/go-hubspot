/*
Marketing Emails

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_emails

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailCloneRequestVNext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailCloneRequestVNext{}

// EmailCloneRequestVNext struct for EmailCloneRequestVNext
type EmailCloneRequestVNext struct {
	// The name to assign to the cloned email.
	CloneName *string `json:"cloneName,omitempty"`
	// The language code for the cloned email, such as 'en' for English.
	Language *string `json:"language,omitempty"`
	// The unique identifier of the email to be cloned.
	Id string `json:"id"`
}

type _EmailCloneRequestVNext EmailCloneRequestVNext

// NewEmailCloneRequestVNext instantiates a new EmailCloneRequestVNext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailCloneRequestVNext(id string) *EmailCloneRequestVNext {
	this := EmailCloneRequestVNext{}
	this.Id = id
	return &this
}

// NewEmailCloneRequestVNextWithDefaults instantiates a new EmailCloneRequestVNext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailCloneRequestVNextWithDefaults() *EmailCloneRequestVNext {
	this := EmailCloneRequestVNext{}
	return &this
}

// GetCloneName returns the CloneName field value if set, zero value otherwise.
func (o *EmailCloneRequestVNext) GetCloneName() string {
	if o == nil || IsNil(o.CloneName) {
		var ret string
		return ret
	}
	return *o.CloneName
}

// GetCloneNameOk returns a tuple with the CloneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCloneRequestVNext) GetCloneNameOk() (*string, bool) {
	if o == nil || IsNil(o.CloneName) {
		return nil, false
	}
	return o.CloneName, true
}

// HasCloneName returns a boolean if a field has been set.
func (o *EmailCloneRequestVNext) HasCloneName() bool {
	if o != nil && !IsNil(o.CloneName) {
		return true
	}

	return false
}

// SetCloneName gets a reference to the given string and assigns it to the CloneName field.
func (o *EmailCloneRequestVNext) SetCloneName(v string) {
	o.CloneName = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *EmailCloneRequestVNext) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCloneRequestVNext) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *EmailCloneRequestVNext) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *EmailCloneRequestVNext) SetLanguage(v string) {
	o.Language = &v
}

// GetId returns the Id field value
func (o *EmailCloneRequestVNext) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EmailCloneRequestVNext) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EmailCloneRequestVNext) SetId(v string) {
	o.Id = v
}

func (o EmailCloneRequestVNext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailCloneRequestVNext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloneName) {
		toSerialize["cloneName"] = o.CloneName
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *EmailCloneRequestVNext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailCloneRequestVNext := _EmailCloneRequestVNext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailCloneRequestVNext)

	if err != nil {
		return err
	}

	*o = EmailCloneRequestVNext(varEmailCloneRequestVNext)

	return err
}

type NullableEmailCloneRequestVNext struct {
	value *EmailCloneRequestVNext
	isSet bool
}

func (v NullableEmailCloneRequestVNext) Get() *EmailCloneRequestVNext {
	return v.value
}

func (v *NullableEmailCloneRequestVNext) Set(val *EmailCloneRequestVNext) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailCloneRequestVNext) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailCloneRequestVNext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailCloneRequestVNext(val *EmailCloneRequestVNext) *NullableEmailCloneRequestVNext {
	return &NullableEmailCloneRequestVNext{value: val, isSet: true}
}

func (v NullableEmailCloneRequestVNext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailCloneRequestVNext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


