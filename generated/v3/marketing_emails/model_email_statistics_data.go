/*
Marketing Emails

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_emails

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailStatisticsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailStatisticsData{}

// EmailStatisticsData struct for EmailStatisticsData
type EmailStatisticsData struct {
	// Statistics by device.
	DeviceBreakdown map[string]map[string]int64 `json:"deviceBreakdown"`
	// Number of emails that were dropped and bounced.
	QualifierStats map[string]map[string]int64 `json:"qualifierStats"`
	// Counters like number of `sent`, `open` or `delivered`.
	Counters map[string]int64 `json:"counters"`
	// Ratios like `openratio` or `clickratio`
	Ratios map[string]float32 `json:"ratios"`
}

type _EmailStatisticsData EmailStatisticsData

// NewEmailStatisticsData instantiates a new EmailStatisticsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailStatisticsData(deviceBreakdown map[string]map[string]int64, qualifierStats map[string]map[string]int64, counters map[string]int64, ratios map[string]float32) *EmailStatisticsData {
	this := EmailStatisticsData{}
	this.DeviceBreakdown = deviceBreakdown
	this.QualifierStats = qualifierStats
	this.Counters = counters
	this.Ratios = ratios
	return &this
}

// NewEmailStatisticsDataWithDefaults instantiates a new EmailStatisticsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailStatisticsDataWithDefaults() *EmailStatisticsData {
	this := EmailStatisticsData{}
	return &this
}

// GetDeviceBreakdown returns the DeviceBreakdown field value
func (o *EmailStatisticsData) GetDeviceBreakdown() map[string]map[string]int64 {
	if o == nil {
		var ret map[string]map[string]int64
		return ret
	}

	return o.DeviceBreakdown
}

// GetDeviceBreakdownOk returns a tuple with the DeviceBreakdown field value
// and a boolean to check if the value has been set.
func (o *EmailStatisticsData) GetDeviceBreakdownOk() (*map[string]map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceBreakdown, true
}

// SetDeviceBreakdown sets field value
func (o *EmailStatisticsData) SetDeviceBreakdown(v map[string]map[string]int64) {
	o.DeviceBreakdown = v
}

// GetQualifierStats returns the QualifierStats field value
func (o *EmailStatisticsData) GetQualifierStats() map[string]map[string]int64 {
	if o == nil {
		var ret map[string]map[string]int64
		return ret
	}

	return o.QualifierStats
}

// GetQualifierStatsOk returns a tuple with the QualifierStats field value
// and a boolean to check if the value has been set.
func (o *EmailStatisticsData) GetQualifierStatsOk() (*map[string]map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QualifierStats, true
}

// SetQualifierStats sets field value
func (o *EmailStatisticsData) SetQualifierStats(v map[string]map[string]int64) {
	o.QualifierStats = v
}

// GetCounters returns the Counters field value
func (o *EmailStatisticsData) GetCounters() map[string]int64 {
	if o == nil {
		var ret map[string]int64
		return ret
	}

	return o.Counters
}

// GetCountersOk returns a tuple with the Counters field value
// and a boolean to check if the value has been set.
func (o *EmailStatisticsData) GetCountersOk() (*map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Counters, true
}

// SetCounters sets field value
func (o *EmailStatisticsData) SetCounters(v map[string]int64) {
	o.Counters = v
}

// GetRatios returns the Ratios field value
func (o *EmailStatisticsData) GetRatios() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.Ratios
}

// GetRatiosOk returns a tuple with the Ratios field value
// and a boolean to check if the value has been set.
func (o *EmailStatisticsData) GetRatiosOk() (*map[string]float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ratios, true
}

// SetRatios sets field value
func (o *EmailStatisticsData) SetRatios(v map[string]float32) {
	o.Ratios = v
}

func (o EmailStatisticsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailStatisticsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceBreakdown"] = o.DeviceBreakdown
	toSerialize["qualifierStats"] = o.QualifierStats
	toSerialize["counters"] = o.Counters
	toSerialize["ratios"] = o.Ratios
	return toSerialize, nil
}

func (o *EmailStatisticsData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceBreakdown",
		"qualifierStats",
		"counters",
		"ratios",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailStatisticsData := _EmailStatisticsData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailStatisticsData)

	if err != nil {
		return err
	}

	*o = EmailStatisticsData(varEmailStatisticsData)

	return err
}

type NullableEmailStatisticsData struct {
	value *EmailStatisticsData
	isSet bool
}

func (v NullableEmailStatisticsData) Get() *EmailStatisticsData {
	return v.value
}

func (v *NullableEmailStatisticsData) Set(val *EmailStatisticsData) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailStatisticsData) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailStatisticsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailStatisticsData(val *EmailStatisticsData) *NullableEmailStatisticsData {
	return &NullableEmailStatisticsData{value: val, isSet: true}
}

func (v NullableEmailStatisticsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailStatisticsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


