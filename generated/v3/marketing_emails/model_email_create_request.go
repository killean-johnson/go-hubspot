/*
Marketing Emails

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_emails

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EmailCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailCreateRequest{}

// EmailCreateRequest Properties of a marketing email you can set when creating a marketing email.
type EmailCreateRequest struct {
	// The ID of the feedback survey linked to the email.
	FeedbackSurveyId *string `json:"feedbackSurveyId,omitempty"`
	RssData *PublicRssEmailDetails `json:"rssData,omitempty"`
	// The subject of the email.
	Subject *string `json:"subject,omitempty"`
	Testing *PublicEmailTestingDetails `json:"testing,omitempty"`
	// The date and time the email is scheduled for, in ISO8601 representation. This is only used in local time or scheduled emails.
	PublishDate *time.Time `json:"publishDate,omitempty"`
	Language *string `json:"language,omitempty"`
	BusinessUnitId *int64 `json:"businessUnitId,omitempty"`
	Content *PublicEmailContent `json:"content,omitempty"`
	Webversion *PublicWebversionDetails `json:"webversion,omitempty"`
	// Determines if the email is archived or not.
	Archived *bool `json:"archived,omitempty"`
	SubscriptionDetails *PublicEmailSubscriptionDetails `json:"subscriptionDetails,omitempty"`
	// The active domain of the email.
	ActiveDomain *string `json:"activeDomain,omitempty"`
	// The name of the email, as displayed on the email dashboard.
	Name string `json:"name"`
	// The ID of the campaign this email is associated to.
	Campaign *string `json:"campaign,omitempty"`
	From *PublicEmailFromDetails `json:"from,omitempty"`
	JitterSendTime *bool `json:"jitterSendTime,omitempty"`
	// The email state.
	State *string `json:"state,omitempty"`
	To *PublicEmailToDetails `json:"to,omitempty"`
	// The email subcategory.
	Subcategory *string `json:"subcategory,omitempty"`
	// Determines whether the email will be sent immediately on publish.
	SendOnPublish *bool `json:"sendOnPublish,omitempty"`
}

type _EmailCreateRequest EmailCreateRequest

// NewEmailCreateRequest instantiates a new EmailCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailCreateRequest(name string) *EmailCreateRequest {
	this := EmailCreateRequest{}
	this.Name = name
	return &this
}

// NewEmailCreateRequestWithDefaults instantiates a new EmailCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailCreateRequestWithDefaults() *EmailCreateRequest {
	this := EmailCreateRequest{}
	return &this
}

// GetFeedbackSurveyId returns the FeedbackSurveyId field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetFeedbackSurveyId() string {
	if o == nil || IsNil(o.FeedbackSurveyId) {
		var ret string
		return ret
	}
	return *o.FeedbackSurveyId
}

// GetFeedbackSurveyIdOk returns a tuple with the FeedbackSurveyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetFeedbackSurveyIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeedbackSurveyId) {
		return nil, false
	}
	return o.FeedbackSurveyId, true
}

// HasFeedbackSurveyId returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasFeedbackSurveyId() bool {
	if o != nil && !IsNil(o.FeedbackSurveyId) {
		return true
	}

	return false
}

// SetFeedbackSurveyId gets a reference to the given string and assigns it to the FeedbackSurveyId field.
func (o *EmailCreateRequest) SetFeedbackSurveyId(v string) {
	o.FeedbackSurveyId = &v
}

// GetRssData returns the RssData field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetRssData() PublicRssEmailDetails {
	if o == nil || IsNil(o.RssData) {
		var ret PublicRssEmailDetails
		return ret
	}
	return *o.RssData
}

// GetRssDataOk returns a tuple with the RssData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetRssDataOk() (*PublicRssEmailDetails, bool) {
	if o == nil || IsNil(o.RssData) {
		return nil, false
	}
	return o.RssData, true
}

// HasRssData returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasRssData() bool {
	if o != nil && !IsNil(o.RssData) {
		return true
	}

	return false
}

// SetRssData gets a reference to the given PublicRssEmailDetails and assigns it to the RssData field.
func (o *EmailCreateRequest) SetRssData(v PublicRssEmailDetails) {
	o.RssData = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *EmailCreateRequest) SetSubject(v string) {
	o.Subject = &v
}

// GetTesting returns the Testing field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetTesting() PublicEmailTestingDetails {
	if o == nil || IsNil(o.Testing) {
		var ret PublicEmailTestingDetails
		return ret
	}
	return *o.Testing
}

// GetTestingOk returns a tuple with the Testing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetTestingOk() (*PublicEmailTestingDetails, bool) {
	if o == nil || IsNil(o.Testing) {
		return nil, false
	}
	return o.Testing, true
}

// HasTesting returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasTesting() bool {
	if o != nil && !IsNil(o.Testing) {
		return true
	}

	return false
}

// SetTesting gets a reference to the given PublicEmailTestingDetails and assigns it to the Testing field.
func (o *EmailCreateRequest) SetTesting(v PublicEmailTestingDetails) {
	o.Testing = &v
}

// GetPublishDate returns the PublishDate field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetPublishDate() time.Time {
	if o == nil || IsNil(o.PublishDate) {
		var ret time.Time
		return ret
	}
	return *o.PublishDate
}

// GetPublishDateOk returns a tuple with the PublishDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetPublishDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishDate) {
		return nil, false
	}
	return o.PublishDate, true
}

// HasPublishDate returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasPublishDate() bool {
	if o != nil && !IsNil(o.PublishDate) {
		return true
	}

	return false
}

// SetPublishDate gets a reference to the given time.Time and assigns it to the PublishDate field.
func (o *EmailCreateRequest) SetPublishDate(v time.Time) {
	o.PublishDate = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *EmailCreateRequest) SetLanguage(v string) {
	o.Language = &v
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetBusinessUnitId() int64 {
	if o == nil || IsNil(o.BusinessUnitId) {
		var ret int64
		return ret
	}
	return *o.BusinessUnitId
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetBusinessUnitIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BusinessUnitId) {
		return nil, false
	}
	return o.BusinessUnitId, true
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasBusinessUnitId() bool {
	if o != nil && !IsNil(o.BusinessUnitId) {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given int64 and assigns it to the BusinessUnitId field.
func (o *EmailCreateRequest) SetBusinessUnitId(v int64) {
	o.BusinessUnitId = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetContent() PublicEmailContent {
	if o == nil || IsNil(o.Content) {
		var ret PublicEmailContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetContentOk() (*PublicEmailContent, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given PublicEmailContent and assigns it to the Content field.
func (o *EmailCreateRequest) SetContent(v PublicEmailContent) {
	o.Content = &v
}

// GetWebversion returns the Webversion field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetWebversion() PublicWebversionDetails {
	if o == nil || IsNil(o.Webversion) {
		var ret PublicWebversionDetails
		return ret
	}
	return *o.Webversion
}

// GetWebversionOk returns a tuple with the Webversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetWebversionOk() (*PublicWebversionDetails, bool) {
	if o == nil || IsNil(o.Webversion) {
		return nil, false
	}
	return o.Webversion, true
}

// HasWebversion returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasWebversion() bool {
	if o != nil && !IsNil(o.Webversion) {
		return true
	}

	return false
}

// SetWebversion gets a reference to the given PublicWebversionDetails and assigns it to the Webversion field.
func (o *EmailCreateRequest) SetWebversion(v PublicWebversionDetails) {
	o.Webversion = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *EmailCreateRequest) SetArchived(v bool) {
	o.Archived = &v
}

// GetSubscriptionDetails returns the SubscriptionDetails field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetSubscriptionDetails() PublicEmailSubscriptionDetails {
	if o == nil || IsNil(o.SubscriptionDetails) {
		var ret PublicEmailSubscriptionDetails
		return ret
	}
	return *o.SubscriptionDetails
}

// GetSubscriptionDetailsOk returns a tuple with the SubscriptionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetSubscriptionDetailsOk() (*PublicEmailSubscriptionDetails, bool) {
	if o == nil || IsNil(o.SubscriptionDetails) {
		return nil, false
	}
	return o.SubscriptionDetails, true
}

// HasSubscriptionDetails returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasSubscriptionDetails() bool {
	if o != nil && !IsNil(o.SubscriptionDetails) {
		return true
	}

	return false
}

// SetSubscriptionDetails gets a reference to the given PublicEmailSubscriptionDetails and assigns it to the SubscriptionDetails field.
func (o *EmailCreateRequest) SetSubscriptionDetails(v PublicEmailSubscriptionDetails) {
	o.SubscriptionDetails = &v
}

// GetActiveDomain returns the ActiveDomain field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetActiveDomain() string {
	if o == nil || IsNil(o.ActiveDomain) {
		var ret string
		return ret
	}
	return *o.ActiveDomain
}

// GetActiveDomainOk returns a tuple with the ActiveDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetActiveDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveDomain) {
		return nil, false
	}
	return o.ActiveDomain, true
}

// HasActiveDomain returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasActiveDomain() bool {
	if o != nil && !IsNil(o.ActiveDomain) {
		return true
	}

	return false
}

// SetActiveDomain gets a reference to the given string and assigns it to the ActiveDomain field.
func (o *EmailCreateRequest) SetActiveDomain(v string) {
	o.ActiveDomain = &v
}

// GetName returns the Name field value
func (o *EmailCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EmailCreateRequest) SetName(v string) {
	o.Name = v
}

// GetCampaign returns the Campaign field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetCampaign() string {
	if o == nil || IsNil(o.Campaign) {
		var ret string
		return ret
	}
	return *o.Campaign
}

// GetCampaignOk returns a tuple with the Campaign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetCampaignOk() (*string, bool) {
	if o == nil || IsNil(o.Campaign) {
		return nil, false
	}
	return o.Campaign, true
}

// HasCampaign returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasCampaign() bool {
	if o != nil && !IsNil(o.Campaign) {
		return true
	}

	return false
}

// SetCampaign gets a reference to the given string and assigns it to the Campaign field.
func (o *EmailCreateRequest) SetCampaign(v string) {
	o.Campaign = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetFrom() PublicEmailFromDetails {
	if o == nil || IsNil(o.From) {
		var ret PublicEmailFromDetails
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetFromOk() (*PublicEmailFromDetails, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given PublicEmailFromDetails and assigns it to the From field.
func (o *EmailCreateRequest) SetFrom(v PublicEmailFromDetails) {
	o.From = &v
}

// GetJitterSendTime returns the JitterSendTime field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetJitterSendTime() bool {
	if o == nil || IsNil(o.JitterSendTime) {
		var ret bool
		return ret
	}
	return *o.JitterSendTime
}

// GetJitterSendTimeOk returns a tuple with the JitterSendTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetJitterSendTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.JitterSendTime) {
		return nil, false
	}
	return o.JitterSendTime, true
}

// HasJitterSendTime returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasJitterSendTime() bool {
	if o != nil && !IsNil(o.JitterSendTime) {
		return true
	}

	return false
}

// SetJitterSendTime gets a reference to the given bool and assigns it to the JitterSendTime field.
func (o *EmailCreateRequest) SetJitterSendTime(v bool) {
	o.JitterSendTime = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *EmailCreateRequest) SetState(v string) {
	o.State = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetTo() PublicEmailToDetails {
	if o == nil || IsNil(o.To) {
		var ret PublicEmailToDetails
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetToOk() (*PublicEmailToDetails, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given PublicEmailToDetails and assigns it to the To field.
func (o *EmailCreateRequest) SetTo(v PublicEmailToDetails) {
	o.To = &v
}

// GetSubcategory returns the Subcategory field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetSubcategory() string {
	if o == nil || IsNil(o.Subcategory) {
		var ret string
		return ret
	}
	return *o.Subcategory
}

// GetSubcategoryOk returns a tuple with the Subcategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetSubcategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Subcategory) {
		return nil, false
	}
	return o.Subcategory, true
}

// HasSubcategory returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasSubcategory() bool {
	if o != nil && !IsNil(o.Subcategory) {
		return true
	}

	return false
}

// SetSubcategory gets a reference to the given string and assigns it to the Subcategory field.
func (o *EmailCreateRequest) SetSubcategory(v string) {
	o.Subcategory = &v
}

// GetSendOnPublish returns the SendOnPublish field value if set, zero value otherwise.
func (o *EmailCreateRequest) GetSendOnPublish() bool {
	if o == nil || IsNil(o.SendOnPublish) {
		var ret bool
		return ret
	}
	return *o.SendOnPublish
}

// GetSendOnPublishOk returns a tuple with the SendOnPublish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailCreateRequest) GetSendOnPublishOk() (*bool, bool) {
	if o == nil || IsNil(o.SendOnPublish) {
		return nil, false
	}
	return o.SendOnPublish, true
}

// HasSendOnPublish returns a boolean if a field has been set.
func (o *EmailCreateRequest) HasSendOnPublish() bool {
	if o != nil && !IsNil(o.SendOnPublish) {
		return true
	}

	return false
}

// SetSendOnPublish gets a reference to the given bool and assigns it to the SendOnPublish field.
func (o *EmailCreateRequest) SetSendOnPublish(v bool) {
	o.SendOnPublish = &v
}

func (o EmailCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeedbackSurveyId) {
		toSerialize["feedbackSurveyId"] = o.FeedbackSurveyId
	}
	if !IsNil(o.RssData) {
		toSerialize["rssData"] = o.RssData
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Testing) {
		toSerialize["testing"] = o.Testing
	}
	if !IsNil(o.PublishDate) {
		toSerialize["publishDate"] = o.PublishDate
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.BusinessUnitId) {
		toSerialize["businessUnitId"] = o.BusinessUnitId
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Webversion) {
		toSerialize["webversion"] = o.Webversion
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.SubscriptionDetails) {
		toSerialize["subscriptionDetails"] = o.SubscriptionDetails
	}
	if !IsNil(o.ActiveDomain) {
		toSerialize["activeDomain"] = o.ActiveDomain
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Campaign) {
		toSerialize["campaign"] = o.Campaign
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.JitterSendTime) {
		toSerialize["jitterSendTime"] = o.JitterSendTime
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Subcategory) {
		toSerialize["subcategory"] = o.Subcategory
	}
	if !IsNil(o.SendOnPublish) {
		toSerialize["sendOnPublish"] = o.SendOnPublish
	}
	return toSerialize, nil
}

func (o *EmailCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailCreateRequest := _EmailCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailCreateRequest)

	if err != nil {
		return err
	}

	*o = EmailCreateRequest(varEmailCreateRequest)

	return err
}

type NullableEmailCreateRequest struct {
	value *EmailCreateRequest
	isSet bool
}

func (v NullableEmailCreateRequest) Get() *EmailCreateRequest {
	return v.value
}

func (v *NullableEmailCreateRequest) Set(val *EmailCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailCreateRequest(val *EmailCreateRequest) *NullableEmailCreateRequest {
	return &NullableEmailCreateRequest{value: val, isSet: true}
}

func (v NullableEmailCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


