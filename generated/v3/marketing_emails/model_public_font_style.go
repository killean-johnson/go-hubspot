/*
Marketing Emails

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_emails

import (
	"encoding/json"
)

// checks if the PublicFontStyle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicFontStyle{}

// PublicFontStyle struct for PublicFontStyle
type PublicFontStyle struct {
	Size *int32 `json:"size,omitempty"`
	Color *string `json:"color,omitempty"`
	Underline *bool `json:"underline,omitempty"`
	Bold *bool `json:"bold,omitempty"`
	Italic *bool `json:"italic,omitempty"`
	Font *string `json:"font,omitempty"`
}

// NewPublicFontStyle instantiates a new PublicFontStyle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicFontStyle() *PublicFontStyle {
	this := PublicFontStyle{}
	return &this
}

// NewPublicFontStyleWithDefaults instantiates a new PublicFontStyle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicFontStyleWithDefaults() *PublicFontStyle {
	this := PublicFontStyle{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PublicFontStyle) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFontStyle) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PublicFontStyle) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *PublicFontStyle) SetSize(v int32) {
	o.Size = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *PublicFontStyle) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFontStyle) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *PublicFontStyle) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *PublicFontStyle) SetColor(v string) {
	o.Color = &v
}

// GetUnderline returns the Underline field value if set, zero value otherwise.
func (o *PublicFontStyle) GetUnderline() bool {
	if o == nil || IsNil(o.Underline) {
		var ret bool
		return ret
	}
	return *o.Underline
}

// GetUnderlineOk returns a tuple with the Underline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFontStyle) GetUnderlineOk() (*bool, bool) {
	if o == nil || IsNil(o.Underline) {
		return nil, false
	}
	return o.Underline, true
}

// HasUnderline returns a boolean if a field has been set.
func (o *PublicFontStyle) HasUnderline() bool {
	if o != nil && !IsNil(o.Underline) {
		return true
	}

	return false
}

// SetUnderline gets a reference to the given bool and assigns it to the Underline field.
func (o *PublicFontStyle) SetUnderline(v bool) {
	o.Underline = &v
}

// GetBold returns the Bold field value if set, zero value otherwise.
func (o *PublicFontStyle) GetBold() bool {
	if o == nil || IsNil(o.Bold) {
		var ret bool
		return ret
	}
	return *o.Bold
}

// GetBoldOk returns a tuple with the Bold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFontStyle) GetBoldOk() (*bool, bool) {
	if o == nil || IsNil(o.Bold) {
		return nil, false
	}
	return o.Bold, true
}

// HasBold returns a boolean if a field has been set.
func (o *PublicFontStyle) HasBold() bool {
	if o != nil && !IsNil(o.Bold) {
		return true
	}

	return false
}

// SetBold gets a reference to the given bool and assigns it to the Bold field.
func (o *PublicFontStyle) SetBold(v bool) {
	o.Bold = &v
}

// GetItalic returns the Italic field value if set, zero value otherwise.
func (o *PublicFontStyle) GetItalic() bool {
	if o == nil || IsNil(o.Italic) {
		var ret bool
		return ret
	}
	return *o.Italic
}

// GetItalicOk returns a tuple with the Italic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFontStyle) GetItalicOk() (*bool, bool) {
	if o == nil || IsNil(o.Italic) {
		return nil, false
	}
	return o.Italic, true
}

// HasItalic returns a boolean if a field has been set.
func (o *PublicFontStyle) HasItalic() bool {
	if o != nil && !IsNil(o.Italic) {
		return true
	}

	return false
}

// SetItalic gets a reference to the given bool and assigns it to the Italic field.
func (o *PublicFontStyle) SetItalic(v bool) {
	o.Italic = &v
}

// GetFont returns the Font field value if set, zero value otherwise.
func (o *PublicFontStyle) GetFont() string {
	if o == nil || IsNil(o.Font) {
		var ret string
		return ret
	}
	return *o.Font
}

// GetFontOk returns a tuple with the Font field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFontStyle) GetFontOk() (*string, bool) {
	if o == nil || IsNil(o.Font) {
		return nil, false
	}
	return o.Font, true
}

// HasFont returns a boolean if a field has been set.
func (o *PublicFontStyle) HasFont() bool {
	if o != nil && !IsNil(o.Font) {
		return true
	}

	return false
}

// SetFont gets a reference to the given string and assigns it to the Font field.
func (o *PublicFontStyle) SetFont(v string) {
	o.Font = &v
}

func (o PublicFontStyle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicFontStyle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Underline) {
		toSerialize["underline"] = o.Underline
	}
	if !IsNil(o.Bold) {
		toSerialize["bold"] = o.Bold
	}
	if !IsNil(o.Italic) {
		toSerialize["italic"] = o.Italic
	}
	if !IsNil(o.Font) {
		toSerialize["font"] = o.Font
	}
	return toSerialize, nil
}

type NullablePublicFontStyle struct {
	value *PublicFontStyle
	isSet bool
}

func (v NullablePublicFontStyle) Get() *PublicFontStyle {
	return v.value
}

func (v *NullablePublicFontStyle) Set(val *PublicFontStyle) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicFontStyle) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicFontStyle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicFontStyle(val *PublicFontStyle) *NullablePublicFontStyle {
	return &NullablePublicFontStyle{value: val, isSet: true}
}

func (v NullablePublicFontStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicFontStyle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


