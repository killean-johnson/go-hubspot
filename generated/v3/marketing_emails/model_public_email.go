/*
Marketing Emails

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_emails

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublicEmail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicEmail{}

// PublicEmail A marketing email
type PublicEmail struct {
	// The ID of the feedback survey linked to the email.
	FeedbackSurveyId *string `json:"feedbackSurveyId,omitempty"`
	// The subject of the email.
	Subject string `json:"subject"`
	PublishedByEmail *string `json:"publishedByEmail,omitempty"`
	// The date and time the email is scheduled for, in ISO8601 representation. This is only used in local time or scheduled emails.
	PublishDate *time.Time `json:"publishDate,omitempty"`
	// Returns whether the email is a transactional email or not. This is read only.
	IsTransactional *bool `json:"isTransactional,omitempty"`
	Language *string `json:"language,omitempty"`
	// The email type, this is derived from other properties on the email such as subcategory.
	Type *string `json:"type,omitempty"`
	CampaignUtm *string `json:"campaignUtm,omitempty"`
	Content PublicEmailContent `json:"content"`
	BusinessUnitId *string `json:"businessUnitId,omitempty"`
	Webversion *PublicWebversionDetails `json:"webversion,omitempty"`
	// Names of workflows in which the email is used within a \"send email\" action.
	WorkflowNames []string `json:"workflowNames,omitempty"`
	// Determines if the email is archived or not.
	Archived *bool `json:"archived,omitempty"`
	PublishedByName *string `json:"publishedByName,omitempty"`
	// The date and time of the email's creation, in ISO8601 representation.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Stats *EmailStatisticsData `json:"stats,omitempty"`
	JitterSendTime *bool `json:"jitterSendTime,omitempty"`
	From PublicEmailFromDetails `json:"from"`
	AllEmailCampaignIds []string `json:"allEmailCampaignIds,omitempty"`
	// The email ID.
	Id string `json:"id"`
	// The email state.
	State string `json:"state"`
	// The id of the user who created the email.
	CreatedById *string `json:"createdById,omitempty"`
	// The date and time of the last update to the email, in ISO8601 representation.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// The ID of the email this email was cloned from.
	ClonedFrom *string `json:"clonedFrom,omitempty"`
	RssData *PublicRssEmailDetails `json:"rssData,omitempty"`
	// The date and time the email was published at, in ISO8601 representation.
	PublishedAt *time.Time `json:"publishedAt,omitempty"`
	// The ID of the user who published the email.
	PublishedById *string `json:"publishedById,omitempty"`
	// Returns the published status of the email. This is read only.
	IsPublished *bool `json:"isPublished,omitempty"`
	Testing *PublicEmailTestingDetails `json:"testing,omitempty"`
	// The ID of the user who last updated the email.
	UpdatedById *string `json:"updatedById,omitempty"`
	FolderId *int64 `json:"folderId,omitempty"`
	EmailCampaignGroupId *string `json:"emailCampaignGroupId,omitempty"`
	SubscriptionDetails *PublicEmailSubscriptionDetails `json:"subscriptionDetails,omitempty"`
	// The date and time the email was deleted at, in ISO8601 representation.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// The name of the email, as displayed on the email dashboard.
	Name string `json:"name"`
	// The active domain of the email.
	ActiveDomain *string `json:"activeDomain,omitempty"`
	// The campaign GUID on the email.
	Campaign *string `json:"campaign,omitempty"`
	To PublicEmailToDetails `json:"to"`
	// The email subcategory.
	Subcategory string `json:"subcategory"`
	// The name of the campaign. 
	CampaignName *string `json:"campaignName,omitempty"`
	// Determines whether the email will be sent immediately on publish.
	SendOnPublish bool `json:"sendOnPublish"`
}

type _PublicEmail PublicEmail

// NewPublicEmail instantiates a new PublicEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicEmail(subject string, content PublicEmailContent, from PublicEmailFromDetails, id string, state string, name string, to PublicEmailToDetails, subcategory string, sendOnPublish bool) *PublicEmail {
	this := PublicEmail{}
	this.Subject = subject
	this.Content = content
	this.From = from
	this.Id = id
	this.State = state
	this.Name = name
	this.To = to
	this.Subcategory = subcategory
	this.SendOnPublish = sendOnPublish
	return &this
}

// NewPublicEmailWithDefaults instantiates a new PublicEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicEmailWithDefaults() *PublicEmail {
	this := PublicEmail{}
	return &this
}

// GetFeedbackSurveyId returns the FeedbackSurveyId field value if set, zero value otherwise.
func (o *PublicEmail) GetFeedbackSurveyId() string {
	if o == nil || IsNil(o.FeedbackSurveyId) {
		var ret string
		return ret
	}
	return *o.FeedbackSurveyId
}

// GetFeedbackSurveyIdOk returns a tuple with the FeedbackSurveyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetFeedbackSurveyIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeedbackSurveyId) {
		return nil, false
	}
	return o.FeedbackSurveyId, true
}

// HasFeedbackSurveyId returns a boolean if a field has been set.
func (o *PublicEmail) HasFeedbackSurveyId() bool {
	if o != nil && !IsNil(o.FeedbackSurveyId) {
		return true
	}

	return false
}

// SetFeedbackSurveyId gets a reference to the given string and assigns it to the FeedbackSurveyId field.
func (o *PublicEmail) SetFeedbackSurveyId(v string) {
	o.FeedbackSurveyId = &v
}

// GetSubject returns the Subject field value
func (o *PublicEmail) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *PublicEmail) SetSubject(v string) {
	o.Subject = v
}

// GetPublishedByEmail returns the PublishedByEmail field value if set, zero value otherwise.
func (o *PublicEmail) GetPublishedByEmail() string {
	if o == nil || IsNil(o.PublishedByEmail) {
		var ret string
		return ret
	}
	return *o.PublishedByEmail
}

// GetPublishedByEmailOk returns a tuple with the PublishedByEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetPublishedByEmailOk() (*string, bool) {
	if o == nil || IsNil(o.PublishedByEmail) {
		return nil, false
	}
	return o.PublishedByEmail, true
}

// HasPublishedByEmail returns a boolean if a field has been set.
func (o *PublicEmail) HasPublishedByEmail() bool {
	if o != nil && !IsNil(o.PublishedByEmail) {
		return true
	}

	return false
}

// SetPublishedByEmail gets a reference to the given string and assigns it to the PublishedByEmail field.
func (o *PublicEmail) SetPublishedByEmail(v string) {
	o.PublishedByEmail = &v
}

// GetPublishDate returns the PublishDate field value if set, zero value otherwise.
func (o *PublicEmail) GetPublishDate() time.Time {
	if o == nil || IsNil(o.PublishDate) {
		var ret time.Time
		return ret
	}
	return *o.PublishDate
}

// GetPublishDateOk returns a tuple with the PublishDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetPublishDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishDate) {
		return nil, false
	}
	return o.PublishDate, true
}

// HasPublishDate returns a boolean if a field has been set.
func (o *PublicEmail) HasPublishDate() bool {
	if o != nil && !IsNil(o.PublishDate) {
		return true
	}

	return false
}

// SetPublishDate gets a reference to the given time.Time and assigns it to the PublishDate field.
func (o *PublicEmail) SetPublishDate(v time.Time) {
	o.PublishDate = &v
}

// GetIsTransactional returns the IsTransactional field value if set, zero value otherwise.
func (o *PublicEmail) GetIsTransactional() bool {
	if o == nil || IsNil(o.IsTransactional) {
		var ret bool
		return ret
	}
	return *o.IsTransactional
}

// GetIsTransactionalOk returns a tuple with the IsTransactional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetIsTransactionalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTransactional) {
		return nil, false
	}
	return o.IsTransactional, true
}

// HasIsTransactional returns a boolean if a field has been set.
func (o *PublicEmail) HasIsTransactional() bool {
	if o != nil && !IsNil(o.IsTransactional) {
		return true
	}

	return false
}

// SetIsTransactional gets a reference to the given bool and assigns it to the IsTransactional field.
func (o *PublicEmail) SetIsTransactional(v bool) {
	o.IsTransactional = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *PublicEmail) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *PublicEmail) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *PublicEmail) SetLanguage(v string) {
	o.Language = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PublicEmail) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PublicEmail) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PublicEmail) SetType(v string) {
	o.Type = &v
}

// GetCampaignUtm returns the CampaignUtm field value if set, zero value otherwise.
func (o *PublicEmail) GetCampaignUtm() string {
	if o == nil || IsNil(o.CampaignUtm) {
		var ret string
		return ret
	}
	return *o.CampaignUtm
}

// GetCampaignUtmOk returns a tuple with the CampaignUtm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetCampaignUtmOk() (*string, bool) {
	if o == nil || IsNil(o.CampaignUtm) {
		return nil, false
	}
	return o.CampaignUtm, true
}

// HasCampaignUtm returns a boolean if a field has been set.
func (o *PublicEmail) HasCampaignUtm() bool {
	if o != nil && !IsNil(o.CampaignUtm) {
		return true
	}

	return false
}

// SetCampaignUtm gets a reference to the given string and assigns it to the CampaignUtm field.
func (o *PublicEmail) SetCampaignUtm(v string) {
	o.CampaignUtm = &v
}

// GetContent returns the Content field value
func (o *PublicEmail) GetContent() PublicEmailContent {
	if o == nil {
		var ret PublicEmailContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetContentOk() (*PublicEmailContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *PublicEmail) SetContent(v PublicEmailContent) {
	o.Content = v
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise.
func (o *PublicEmail) GetBusinessUnitId() string {
	if o == nil || IsNil(o.BusinessUnitId) {
		var ret string
		return ret
	}
	return *o.BusinessUnitId
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetBusinessUnitIdOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessUnitId) {
		return nil, false
	}
	return o.BusinessUnitId, true
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *PublicEmail) HasBusinessUnitId() bool {
	if o != nil && !IsNil(o.BusinessUnitId) {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given string and assigns it to the BusinessUnitId field.
func (o *PublicEmail) SetBusinessUnitId(v string) {
	o.BusinessUnitId = &v
}

// GetWebversion returns the Webversion field value if set, zero value otherwise.
func (o *PublicEmail) GetWebversion() PublicWebversionDetails {
	if o == nil || IsNil(o.Webversion) {
		var ret PublicWebversionDetails
		return ret
	}
	return *o.Webversion
}

// GetWebversionOk returns a tuple with the Webversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetWebversionOk() (*PublicWebversionDetails, bool) {
	if o == nil || IsNil(o.Webversion) {
		return nil, false
	}
	return o.Webversion, true
}

// HasWebversion returns a boolean if a field has been set.
func (o *PublicEmail) HasWebversion() bool {
	if o != nil && !IsNil(o.Webversion) {
		return true
	}

	return false
}

// SetWebversion gets a reference to the given PublicWebversionDetails and assigns it to the Webversion field.
func (o *PublicEmail) SetWebversion(v PublicWebversionDetails) {
	o.Webversion = &v
}

// GetWorkflowNames returns the WorkflowNames field value if set, zero value otherwise.
func (o *PublicEmail) GetWorkflowNames() []string {
	if o == nil || IsNil(o.WorkflowNames) {
		var ret []string
		return ret
	}
	return o.WorkflowNames
}

// GetWorkflowNamesOk returns a tuple with the WorkflowNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetWorkflowNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.WorkflowNames) {
		return nil, false
	}
	return o.WorkflowNames, true
}

// HasWorkflowNames returns a boolean if a field has been set.
func (o *PublicEmail) HasWorkflowNames() bool {
	if o != nil && !IsNil(o.WorkflowNames) {
		return true
	}

	return false
}

// SetWorkflowNames gets a reference to the given []string and assigns it to the WorkflowNames field.
func (o *PublicEmail) SetWorkflowNames(v []string) {
	o.WorkflowNames = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *PublicEmail) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *PublicEmail) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *PublicEmail) SetArchived(v bool) {
	o.Archived = &v
}

// GetPublishedByName returns the PublishedByName field value if set, zero value otherwise.
func (o *PublicEmail) GetPublishedByName() string {
	if o == nil || IsNil(o.PublishedByName) {
		var ret string
		return ret
	}
	return *o.PublishedByName
}

// GetPublishedByNameOk returns a tuple with the PublishedByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetPublishedByNameOk() (*string, bool) {
	if o == nil || IsNil(o.PublishedByName) {
		return nil, false
	}
	return o.PublishedByName, true
}

// HasPublishedByName returns a boolean if a field has been set.
func (o *PublicEmail) HasPublishedByName() bool {
	if o != nil && !IsNil(o.PublishedByName) {
		return true
	}

	return false
}

// SetPublishedByName gets a reference to the given string and assigns it to the PublishedByName field.
func (o *PublicEmail) SetPublishedByName(v string) {
	o.PublishedByName = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PublicEmail) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PublicEmail) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PublicEmail) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *PublicEmail) GetStats() EmailStatisticsData {
	if o == nil || IsNil(o.Stats) {
		var ret EmailStatisticsData
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetStatsOk() (*EmailStatisticsData, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *PublicEmail) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given EmailStatisticsData and assigns it to the Stats field.
func (o *PublicEmail) SetStats(v EmailStatisticsData) {
	o.Stats = &v
}

// GetJitterSendTime returns the JitterSendTime field value if set, zero value otherwise.
func (o *PublicEmail) GetJitterSendTime() bool {
	if o == nil || IsNil(o.JitterSendTime) {
		var ret bool
		return ret
	}
	return *o.JitterSendTime
}

// GetJitterSendTimeOk returns a tuple with the JitterSendTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetJitterSendTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.JitterSendTime) {
		return nil, false
	}
	return o.JitterSendTime, true
}

// HasJitterSendTime returns a boolean if a field has been set.
func (o *PublicEmail) HasJitterSendTime() bool {
	if o != nil && !IsNil(o.JitterSendTime) {
		return true
	}

	return false
}

// SetJitterSendTime gets a reference to the given bool and assigns it to the JitterSendTime field.
func (o *PublicEmail) SetJitterSendTime(v bool) {
	o.JitterSendTime = &v
}

// GetFrom returns the From field value
func (o *PublicEmail) GetFrom() PublicEmailFromDetails {
	if o == nil {
		var ret PublicEmailFromDetails
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetFromOk() (*PublicEmailFromDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *PublicEmail) SetFrom(v PublicEmailFromDetails) {
	o.From = v
}

// GetAllEmailCampaignIds returns the AllEmailCampaignIds field value if set, zero value otherwise.
func (o *PublicEmail) GetAllEmailCampaignIds() []string {
	if o == nil || IsNil(o.AllEmailCampaignIds) {
		var ret []string
		return ret
	}
	return o.AllEmailCampaignIds
}

// GetAllEmailCampaignIdsOk returns a tuple with the AllEmailCampaignIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetAllEmailCampaignIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllEmailCampaignIds) {
		return nil, false
	}
	return o.AllEmailCampaignIds, true
}

// HasAllEmailCampaignIds returns a boolean if a field has been set.
func (o *PublicEmail) HasAllEmailCampaignIds() bool {
	if o != nil && !IsNil(o.AllEmailCampaignIds) {
		return true
	}

	return false
}

// SetAllEmailCampaignIds gets a reference to the given []string and assigns it to the AllEmailCampaignIds field.
func (o *PublicEmail) SetAllEmailCampaignIds(v []string) {
	o.AllEmailCampaignIds = v
}

// GetId returns the Id field value
func (o *PublicEmail) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicEmail) SetId(v string) {
	o.Id = v
}

// GetState returns the State field value
func (o *PublicEmail) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *PublicEmail) SetState(v string) {
	o.State = v
}

// GetCreatedById returns the CreatedById field value if set, zero value otherwise.
func (o *PublicEmail) GetCreatedById() string {
	if o == nil || IsNil(o.CreatedById) {
		var ret string
		return ret
	}
	return *o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetCreatedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedById) {
		return nil, false
	}
	return o.CreatedById, true
}

// HasCreatedById returns a boolean if a field has been set.
func (o *PublicEmail) HasCreatedById() bool {
	if o != nil && !IsNil(o.CreatedById) {
		return true
	}

	return false
}

// SetCreatedById gets a reference to the given string and assigns it to the CreatedById field.
func (o *PublicEmail) SetCreatedById(v string) {
	o.CreatedById = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PublicEmail) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PublicEmail) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PublicEmail) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetClonedFrom returns the ClonedFrom field value if set, zero value otherwise.
func (o *PublicEmail) GetClonedFrom() string {
	if o == nil || IsNil(o.ClonedFrom) {
		var ret string
		return ret
	}
	return *o.ClonedFrom
}

// GetClonedFromOk returns a tuple with the ClonedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetClonedFromOk() (*string, bool) {
	if o == nil || IsNil(o.ClonedFrom) {
		return nil, false
	}
	return o.ClonedFrom, true
}

// HasClonedFrom returns a boolean if a field has been set.
func (o *PublicEmail) HasClonedFrom() bool {
	if o != nil && !IsNil(o.ClonedFrom) {
		return true
	}

	return false
}

// SetClonedFrom gets a reference to the given string and assigns it to the ClonedFrom field.
func (o *PublicEmail) SetClonedFrom(v string) {
	o.ClonedFrom = &v
}

// GetRssData returns the RssData field value if set, zero value otherwise.
func (o *PublicEmail) GetRssData() PublicRssEmailDetails {
	if o == nil || IsNil(o.RssData) {
		var ret PublicRssEmailDetails
		return ret
	}
	return *o.RssData
}

// GetRssDataOk returns a tuple with the RssData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetRssDataOk() (*PublicRssEmailDetails, bool) {
	if o == nil || IsNil(o.RssData) {
		return nil, false
	}
	return o.RssData, true
}

// HasRssData returns a boolean if a field has been set.
func (o *PublicEmail) HasRssData() bool {
	if o != nil && !IsNil(o.RssData) {
		return true
	}

	return false
}

// SetRssData gets a reference to the given PublicRssEmailDetails and assigns it to the RssData field.
func (o *PublicEmail) SetRssData(v PublicRssEmailDetails) {
	o.RssData = &v
}

// GetPublishedAt returns the PublishedAt field value if set, zero value otherwise.
func (o *PublicEmail) GetPublishedAt() time.Time {
	if o == nil || IsNil(o.PublishedAt) {
		var ret time.Time
		return ret
	}
	return *o.PublishedAt
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetPublishedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishedAt) {
		return nil, false
	}
	return o.PublishedAt, true
}

// HasPublishedAt returns a boolean if a field has been set.
func (o *PublicEmail) HasPublishedAt() bool {
	if o != nil && !IsNil(o.PublishedAt) {
		return true
	}

	return false
}

// SetPublishedAt gets a reference to the given time.Time and assigns it to the PublishedAt field.
func (o *PublicEmail) SetPublishedAt(v time.Time) {
	o.PublishedAt = &v
}

// GetPublishedById returns the PublishedById field value if set, zero value otherwise.
func (o *PublicEmail) GetPublishedById() string {
	if o == nil || IsNil(o.PublishedById) {
		var ret string
		return ret
	}
	return *o.PublishedById
}

// GetPublishedByIdOk returns a tuple with the PublishedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetPublishedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.PublishedById) {
		return nil, false
	}
	return o.PublishedById, true
}

// HasPublishedById returns a boolean if a field has been set.
func (o *PublicEmail) HasPublishedById() bool {
	if o != nil && !IsNil(o.PublishedById) {
		return true
	}

	return false
}

// SetPublishedById gets a reference to the given string and assigns it to the PublishedById field.
func (o *PublicEmail) SetPublishedById(v string) {
	o.PublishedById = &v
}

// GetIsPublished returns the IsPublished field value if set, zero value otherwise.
func (o *PublicEmail) GetIsPublished() bool {
	if o == nil || IsNil(o.IsPublished) {
		var ret bool
		return ret
	}
	return *o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetIsPublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublished) {
		return nil, false
	}
	return o.IsPublished, true
}

// HasIsPublished returns a boolean if a field has been set.
func (o *PublicEmail) HasIsPublished() bool {
	if o != nil && !IsNil(o.IsPublished) {
		return true
	}

	return false
}

// SetIsPublished gets a reference to the given bool and assigns it to the IsPublished field.
func (o *PublicEmail) SetIsPublished(v bool) {
	o.IsPublished = &v
}

// GetTesting returns the Testing field value if set, zero value otherwise.
func (o *PublicEmail) GetTesting() PublicEmailTestingDetails {
	if o == nil || IsNil(o.Testing) {
		var ret PublicEmailTestingDetails
		return ret
	}
	return *o.Testing
}

// GetTestingOk returns a tuple with the Testing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetTestingOk() (*PublicEmailTestingDetails, bool) {
	if o == nil || IsNil(o.Testing) {
		return nil, false
	}
	return o.Testing, true
}

// HasTesting returns a boolean if a field has been set.
func (o *PublicEmail) HasTesting() bool {
	if o != nil && !IsNil(o.Testing) {
		return true
	}

	return false
}

// SetTesting gets a reference to the given PublicEmailTestingDetails and assigns it to the Testing field.
func (o *PublicEmail) SetTesting(v PublicEmailTestingDetails) {
	o.Testing = &v
}

// GetUpdatedById returns the UpdatedById field value if set, zero value otherwise.
func (o *PublicEmail) GetUpdatedById() string {
	if o == nil || IsNil(o.UpdatedById) {
		var ret string
		return ret
	}
	return *o.UpdatedById
}

// GetUpdatedByIdOk returns a tuple with the UpdatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetUpdatedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedById) {
		return nil, false
	}
	return o.UpdatedById, true
}

// HasUpdatedById returns a boolean if a field has been set.
func (o *PublicEmail) HasUpdatedById() bool {
	if o != nil && !IsNil(o.UpdatedById) {
		return true
	}

	return false
}

// SetUpdatedById gets a reference to the given string and assigns it to the UpdatedById field.
func (o *PublicEmail) SetUpdatedById(v string) {
	o.UpdatedById = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *PublicEmail) GetFolderId() int64 {
	if o == nil || IsNil(o.FolderId) {
		var ret int64
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetFolderIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *PublicEmail) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given int64 and assigns it to the FolderId field.
func (o *PublicEmail) SetFolderId(v int64) {
	o.FolderId = &v
}

// GetEmailCampaignGroupId returns the EmailCampaignGroupId field value if set, zero value otherwise.
func (o *PublicEmail) GetEmailCampaignGroupId() string {
	if o == nil || IsNil(o.EmailCampaignGroupId) {
		var ret string
		return ret
	}
	return *o.EmailCampaignGroupId
}

// GetEmailCampaignGroupIdOk returns a tuple with the EmailCampaignGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetEmailCampaignGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.EmailCampaignGroupId) {
		return nil, false
	}
	return o.EmailCampaignGroupId, true
}

// HasEmailCampaignGroupId returns a boolean if a field has been set.
func (o *PublicEmail) HasEmailCampaignGroupId() bool {
	if o != nil && !IsNil(o.EmailCampaignGroupId) {
		return true
	}

	return false
}

// SetEmailCampaignGroupId gets a reference to the given string and assigns it to the EmailCampaignGroupId field.
func (o *PublicEmail) SetEmailCampaignGroupId(v string) {
	o.EmailCampaignGroupId = &v
}

// GetSubscriptionDetails returns the SubscriptionDetails field value if set, zero value otherwise.
func (o *PublicEmail) GetSubscriptionDetails() PublicEmailSubscriptionDetails {
	if o == nil || IsNil(o.SubscriptionDetails) {
		var ret PublicEmailSubscriptionDetails
		return ret
	}
	return *o.SubscriptionDetails
}

// GetSubscriptionDetailsOk returns a tuple with the SubscriptionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetSubscriptionDetailsOk() (*PublicEmailSubscriptionDetails, bool) {
	if o == nil || IsNil(o.SubscriptionDetails) {
		return nil, false
	}
	return o.SubscriptionDetails, true
}

// HasSubscriptionDetails returns a boolean if a field has been set.
func (o *PublicEmail) HasSubscriptionDetails() bool {
	if o != nil && !IsNil(o.SubscriptionDetails) {
		return true
	}

	return false
}

// SetSubscriptionDetails gets a reference to the given PublicEmailSubscriptionDetails and assigns it to the SubscriptionDetails field.
func (o *PublicEmail) SetSubscriptionDetails(v PublicEmailSubscriptionDetails) {
	o.SubscriptionDetails = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *PublicEmail) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *PublicEmail) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *PublicEmail) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetName returns the Name field value
func (o *PublicEmail) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicEmail) SetName(v string) {
	o.Name = v
}

// GetActiveDomain returns the ActiveDomain field value if set, zero value otherwise.
func (o *PublicEmail) GetActiveDomain() string {
	if o == nil || IsNil(o.ActiveDomain) {
		var ret string
		return ret
	}
	return *o.ActiveDomain
}

// GetActiveDomainOk returns a tuple with the ActiveDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetActiveDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveDomain) {
		return nil, false
	}
	return o.ActiveDomain, true
}

// HasActiveDomain returns a boolean if a field has been set.
func (o *PublicEmail) HasActiveDomain() bool {
	if o != nil && !IsNil(o.ActiveDomain) {
		return true
	}

	return false
}

// SetActiveDomain gets a reference to the given string and assigns it to the ActiveDomain field.
func (o *PublicEmail) SetActiveDomain(v string) {
	o.ActiveDomain = &v
}

// GetCampaign returns the Campaign field value if set, zero value otherwise.
func (o *PublicEmail) GetCampaign() string {
	if o == nil || IsNil(o.Campaign) {
		var ret string
		return ret
	}
	return *o.Campaign
}

// GetCampaignOk returns a tuple with the Campaign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetCampaignOk() (*string, bool) {
	if o == nil || IsNil(o.Campaign) {
		return nil, false
	}
	return o.Campaign, true
}

// HasCampaign returns a boolean if a field has been set.
func (o *PublicEmail) HasCampaign() bool {
	if o != nil && !IsNil(o.Campaign) {
		return true
	}

	return false
}

// SetCampaign gets a reference to the given string and assigns it to the Campaign field.
func (o *PublicEmail) SetCampaign(v string) {
	o.Campaign = &v
}

// GetTo returns the To field value
func (o *PublicEmail) GetTo() PublicEmailToDetails {
	if o == nil {
		var ret PublicEmailToDetails
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetToOk() (*PublicEmailToDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *PublicEmail) SetTo(v PublicEmailToDetails) {
	o.To = v
}

// GetSubcategory returns the Subcategory field value
func (o *PublicEmail) GetSubcategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subcategory
}

// GetSubcategoryOk returns a tuple with the Subcategory field value
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetSubcategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subcategory, true
}

// SetSubcategory sets field value
func (o *PublicEmail) SetSubcategory(v string) {
	o.Subcategory = v
}

// GetCampaignName returns the CampaignName field value if set, zero value otherwise.
func (o *PublicEmail) GetCampaignName() string {
	if o == nil || IsNil(o.CampaignName) {
		var ret string
		return ret
	}
	return *o.CampaignName
}

// GetCampaignNameOk returns a tuple with the CampaignName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetCampaignNameOk() (*string, bool) {
	if o == nil || IsNil(o.CampaignName) {
		return nil, false
	}
	return o.CampaignName, true
}

// HasCampaignName returns a boolean if a field has been set.
func (o *PublicEmail) HasCampaignName() bool {
	if o != nil && !IsNil(o.CampaignName) {
		return true
	}

	return false
}

// SetCampaignName gets a reference to the given string and assigns it to the CampaignName field.
func (o *PublicEmail) SetCampaignName(v string) {
	o.CampaignName = &v
}

// GetSendOnPublish returns the SendOnPublish field value
func (o *PublicEmail) GetSendOnPublish() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SendOnPublish
}

// GetSendOnPublishOk returns a tuple with the SendOnPublish field value
// and a boolean to check if the value has been set.
func (o *PublicEmail) GetSendOnPublishOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SendOnPublish, true
}

// SetSendOnPublish sets field value
func (o *PublicEmail) SetSendOnPublish(v bool) {
	o.SendOnPublish = v
}

func (o PublicEmail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicEmail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeedbackSurveyId) {
		toSerialize["feedbackSurveyId"] = o.FeedbackSurveyId
	}
	toSerialize["subject"] = o.Subject
	if !IsNil(o.PublishedByEmail) {
		toSerialize["publishedByEmail"] = o.PublishedByEmail
	}
	if !IsNil(o.PublishDate) {
		toSerialize["publishDate"] = o.PublishDate
	}
	if !IsNil(o.IsTransactional) {
		toSerialize["isTransactional"] = o.IsTransactional
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.CampaignUtm) {
		toSerialize["campaignUtm"] = o.CampaignUtm
	}
	toSerialize["content"] = o.Content
	if !IsNil(o.BusinessUnitId) {
		toSerialize["businessUnitId"] = o.BusinessUnitId
	}
	if !IsNil(o.Webversion) {
		toSerialize["webversion"] = o.Webversion
	}
	if !IsNil(o.WorkflowNames) {
		toSerialize["workflowNames"] = o.WorkflowNames
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.PublishedByName) {
		toSerialize["publishedByName"] = o.PublishedByName
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if !IsNil(o.JitterSendTime) {
		toSerialize["jitterSendTime"] = o.JitterSendTime
	}
	toSerialize["from"] = o.From
	if !IsNil(o.AllEmailCampaignIds) {
		toSerialize["allEmailCampaignIds"] = o.AllEmailCampaignIds
	}
	toSerialize["id"] = o.Id
	toSerialize["state"] = o.State
	if !IsNil(o.CreatedById) {
		toSerialize["createdById"] = o.CreatedById
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.ClonedFrom) {
		toSerialize["clonedFrom"] = o.ClonedFrom
	}
	if !IsNil(o.RssData) {
		toSerialize["rssData"] = o.RssData
	}
	if !IsNil(o.PublishedAt) {
		toSerialize["publishedAt"] = o.PublishedAt
	}
	if !IsNil(o.PublishedById) {
		toSerialize["publishedById"] = o.PublishedById
	}
	if !IsNil(o.IsPublished) {
		toSerialize["isPublished"] = o.IsPublished
	}
	if !IsNil(o.Testing) {
		toSerialize["testing"] = o.Testing
	}
	if !IsNil(o.UpdatedById) {
		toSerialize["updatedById"] = o.UpdatedById
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !IsNil(o.EmailCampaignGroupId) {
		toSerialize["emailCampaignGroupId"] = o.EmailCampaignGroupId
	}
	if !IsNil(o.SubscriptionDetails) {
		toSerialize["subscriptionDetails"] = o.SubscriptionDetails
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.ActiveDomain) {
		toSerialize["activeDomain"] = o.ActiveDomain
	}
	if !IsNil(o.Campaign) {
		toSerialize["campaign"] = o.Campaign
	}
	toSerialize["to"] = o.To
	toSerialize["subcategory"] = o.Subcategory
	if !IsNil(o.CampaignName) {
		toSerialize["campaignName"] = o.CampaignName
	}
	toSerialize["sendOnPublish"] = o.SendOnPublish
	return toSerialize, nil
}

func (o *PublicEmail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subject",
		"content",
		"from",
		"id",
		"state",
		"name",
		"to",
		"subcategory",
		"sendOnPublish",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicEmail := _PublicEmail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicEmail)

	if err != nil {
		return err
	}

	*o = PublicEmail(varPublicEmail)

	return err
}

type NullablePublicEmail struct {
	value *PublicEmail
	isSet bool
}

func (v NullablePublicEmail) Get() *PublicEmail {
	return v.value
}

func (v *NullablePublicEmail) Set(val *PublicEmail) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicEmail) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicEmail(val *PublicEmail) *NullablePublicEmail {
	return &NullablePublicEmail{value: val, isSet: true}
}

func (v NullablePublicEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


