/*
Marketing Emails

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_emails

import (
	"encoding/json"
)

// checks if the AggregateEmailStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregateEmailStatistics{}

// AggregateEmailStatistics Aggregated statistics for the given interval, plus the IDs of emails that were sent during that interval.
type AggregateEmailStatistics struct {
	// List of email IDs that were sent during the time span.
	Emails []int64 `json:"emails,omitempty"`
	// The aggregated statistics per campaign.
	CampaignAggregations *map[string]EmailStatisticsData `json:"campaignAggregations,omitempty"`
	Aggregate *EmailStatisticsData `json:"aggregate,omitempty"`
}

// NewAggregateEmailStatistics instantiates a new AggregateEmailStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregateEmailStatistics() *AggregateEmailStatistics {
	this := AggregateEmailStatistics{}
	return &this
}

// NewAggregateEmailStatisticsWithDefaults instantiates a new AggregateEmailStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregateEmailStatisticsWithDefaults() *AggregateEmailStatistics {
	this := AggregateEmailStatistics{}
	return &this
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *AggregateEmailStatistics) GetEmails() []int64 {
	if o == nil || IsNil(o.Emails) {
		var ret []int64
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEmailStatistics) GetEmailsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *AggregateEmailStatistics) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []int64 and assigns it to the Emails field.
func (o *AggregateEmailStatistics) SetEmails(v []int64) {
	o.Emails = v
}

// GetCampaignAggregations returns the CampaignAggregations field value if set, zero value otherwise.
func (o *AggregateEmailStatistics) GetCampaignAggregations() map[string]EmailStatisticsData {
	if o == nil || IsNil(o.CampaignAggregations) {
		var ret map[string]EmailStatisticsData
		return ret
	}
	return *o.CampaignAggregations
}

// GetCampaignAggregationsOk returns a tuple with the CampaignAggregations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEmailStatistics) GetCampaignAggregationsOk() (*map[string]EmailStatisticsData, bool) {
	if o == nil || IsNil(o.CampaignAggregations) {
		return nil, false
	}
	return o.CampaignAggregations, true
}

// HasCampaignAggregations returns a boolean if a field has been set.
func (o *AggregateEmailStatistics) HasCampaignAggregations() bool {
	if o != nil && !IsNil(o.CampaignAggregations) {
		return true
	}

	return false
}

// SetCampaignAggregations gets a reference to the given map[string]EmailStatisticsData and assigns it to the CampaignAggregations field.
func (o *AggregateEmailStatistics) SetCampaignAggregations(v map[string]EmailStatisticsData) {
	o.CampaignAggregations = &v
}

// GetAggregate returns the Aggregate field value if set, zero value otherwise.
func (o *AggregateEmailStatistics) GetAggregate() EmailStatisticsData {
	if o == nil || IsNil(o.Aggregate) {
		var ret EmailStatisticsData
		return ret
	}
	return *o.Aggregate
}

// GetAggregateOk returns a tuple with the Aggregate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEmailStatistics) GetAggregateOk() (*EmailStatisticsData, bool) {
	if o == nil || IsNil(o.Aggregate) {
		return nil, false
	}
	return o.Aggregate, true
}

// HasAggregate returns a boolean if a field has been set.
func (o *AggregateEmailStatistics) HasAggregate() bool {
	if o != nil && !IsNil(o.Aggregate) {
		return true
	}

	return false
}

// SetAggregate gets a reference to the given EmailStatisticsData and assigns it to the Aggregate field.
func (o *AggregateEmailStatistics) SetAggregate(v EmailStatisticsData) {
	o.Aggregate = &v
}

func (o AggregateEmailStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregateEmailStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	if !IsNil(o.CampaignAggregations) {
		toSerialize["campaignAggregations"] = o.CampaignAggregations
	}
	if !IsNil(o.Aggregate) {
		toSerialize["aggregate"] = o.Aggregate
	}
	return toSerialize, nil
}

type NullableAggregateEmailStatistics struct {
	value *AggregateEmailStatistics
	isSet bool
}

func (v NullableAggregateEmailStatistics) Get() *AggregateEmailStatistics {
	return v.value
}

func (v *NullableAggregateEmailStatistics) Set(val *AggregateEmailStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateEmailStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateEmailStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateEmailStatistics(val *AggregateEmailStatistics) *NullableAggregateEmailStatistics {
	return &NullableAggregateEmailStatistics{value: val, isSet: true}
}

func (v NullableAggregateEmailStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateEmailStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


