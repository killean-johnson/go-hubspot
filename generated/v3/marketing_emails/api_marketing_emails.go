/*
Marketing Emails

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_emails

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
	"reflect"
	"time"
)


// MarketingEmailsAPIService MarketingEmailsAPI service
type MarketingEmailsAPIService service

type ApiDeleteMarketingV3EmailsEmailIdArchiveRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	archived *bool
}

// Whether to return only results that have been archived.
func (r ApiDeleteMarketingV3EmailsEmailIdArchiveRequest) Archived(archived bool) ApiDeleteMarketingV3EmailsEmailIdArchiveRequest {
	r.archived = &archived
	return r
}

func (r ApiDeleteMarketingV3EmailsEmailIdArchiveRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingV3EmailsEmailIdArchiveExecute(r)
}

/*
DeleteMarketingV3EmailsEmailIdArchive Delete a marketing email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The ID of the marketing email to delete.
 @return ApiDeleteMarketingV3EmailsEmailIdArchiveRequest
*/
func (a *MarketingEmailsAPIService) DeleteMarketingV3EmailsEmailIdArchive(ctx context.Context, emailId string) ApiDeleteMarketingV3EmailsEmailIdArchiveRequest {
	return ApiDeleteMarketingV3EmailsEmailIdArchiveRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
func (a *MarketingEmailsAPIService) DeleteMarketingV3EmailsEmailIdArchiveExecute(r ApiDeleteMarketingV3EmailsEmailIdArchiveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.DeleteMarketingV3EmailsEmailIdArchive")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsEmailIdAbTestGetVariationGetAbTestVariationRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
}

func (r ApiGetMarketingV3EmailsEmailIdAbTestGetVariationGetAbTestVariationRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsEmailIdAbTestGetVariationGetAbTestVariationExecute(r)
}

/*
GetMarketingV3EmailsEmailIdAbTestGetVariationGetAbTestVariation Get the variation of a an A/B marketing email

This endpoint lets you obtain the variation of an A/B marketing email. If the email is variation A (master) it will return variation B (variant) and vice versa.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The ID of an A/B marketing email.
 @return ApiGetMarketingV3EmailsEmailIdAbTestGetVariationGetAbTestVariationRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdAbTestGetVariationGetAbTestVariation(ctx context.Context, emailId string) ApiGetMarketingV3EmailsEmailIdAbTestGetVariationGetAbTestVariationRequest {
	return ApiGetMarketingV3EmailsEmailIdAbTestGetVariationGetAbTestVariationRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdAbTestGetVariationGetAbTestVariationExecute(r ApiGetMarketingV3EmailsEmailIdAbTestGetVariationGetAbTestVariationRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3EmailsEmailIdAbTestGetVariationGetAbTestVariation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/ab-test/get-variation"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsEmailIdDraftGetDraftRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
}

func (r ApiGetMarketingV3EmailsEmailIdDraftGetDraftRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsEmailIdDraftGetDraftExecute(r)
}

/*
GetMarketingV3EmailsEmailIdDraftGetDraft Get draft version of a marketing email

Get the draft version of an email (if it exists). If no draft version exists, the published email is returned.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @return ApiGetMarketingV3EmailsEmailIdDraftGetDraftRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdDraftGetDraft(ctx context.Context, emailId string) ApiGetMarketingV3EmailsEmailIdDraftGetDraftRequest {
	return ApiGetMarketingV3EmailsEmailIdDraftGetDraftRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdDraftGetDraftExecute(r ApiGetMarketingV3EmailsEmailIdDraftGetDraftRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3EmailsEmailIdDraftGetDraft")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/draft"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsEmailIdGetByIdRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	includeStats *bool
	marketingCampaignNames *bool
	workflowNames *bool
	includedProperties *[]string
	archived *bool
}

// Include statistics with email.
func (r ApiGetMarketingV3EmailsEmailIdGetByIdRequest) IncludeStats(includeStats bool) ApiGetMarketingV3EmailsEmailIdGetByIdRequest {
	r.includeStats = &includeStats
	return r
}

// If set to true, loads &#x60;campaignName&#x60; and &#x60;campaignUtm&#x60;.
func (r ApiGetMarketingV3EmailsEmailIdGetByIdRequest) MarketingCampaignNames(marketingCampaignNames bool) ApiGetMarketingV3EmailsEmailIdGetByIdRequest {
	r.marketingCampaignNames = &marketingCampaignNames
	return r
}

// If set to true, loads workflows in which the email is used within a \&quot;send email\&quot; action. 
func (r ApiGetMarketingV3EmailsEmailIdGetByIdRequest) WorkflowNames(workflowNames bool) ApiGetMarketingV3EmailsEmailIdGetByIdRequest {
	r.workflowNames = &workflowNames
	return r
}

func (r ApiGetMarketingV3EmailsEmailIdGetByIdRequest) IncludedProperties(includedProperties []string) ApiGetMarketingV3EmailsEmailIdGetByIdRequest {
	r.includedProperties = &includedProperties
	return r
}

// Whether to return only results that have been archived.
func (r ApiGetMarketingV3EmailsEmailIdGetByIdRequest) Archived(archived bool) ApiGetMarketingV3EmailsEmailIdGetByIdRequest {
	r.archived = &archived
	return r
}

func (r ApiGetMarketingV3EmailsEmailIdGetByIdRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsEmailIdGetByIdExecute(r)
}

/*
GetMarketingV3EmailsEmailIdGetById Get the details of a specified marketing email.

Get the details for a marketing email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @return ApiGetMarketingV3EmailsEmailIdGetByIdRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdGetById(ctx context.Context, emailId string) ApiGetMarketingV3EmailsEmailIdGetByIdRequest {
	return ApiGetMarketingV3EmailsEmailIdGetByIdRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdGetByIdExecute(r ApiGetMarketingV3EmailsEmailIdGetByIdRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3EmailsEmailIdGetById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeStats != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeStats", r.includeStats, "form", "")
	}
	if r.marketingCampaignNames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marketingCampaignNames", r.marketingCampaignNames, "form", "")
	}
	if r.workflowNames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workflowNames", r.workflowNames, "form", "")
	}
	if r.includedProperties != nil {
		t := *r.includedProperties
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "includedProperties", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "includedProperties", t, "form", "multi")
		}
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	after *string
	before *string
	limit *int32
}

// The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest) After(after string) ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest {
	r.after = &after
	return r
}

// The cursor token value to get the previous set of results. You can get this from the &#x60;paging.prev.before&#x60; JSON property of a paged response containing more results.
func (r ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest) Before(before string) ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest {
	r.before = &before
	return r
}

// The maximum number of results to return. Default is 10.
func (r ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest) Limit(limit int32) ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest {
	r.limit = &limit
	return r
}

func (r ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest) Execute() (*CollectionResponseWithTotalVersionPublicEmail, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsEmailIdRevisionsGetRevisionsExecute(r)
}

/*
GetMarketingV3EmailsEmailIdRevisionsGetRevisions Get revisions of a marketing email

Get a list of all versions of a marketing email, with each entry including the full state of that particular version. The current revision has the ID -1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @return ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdRevisionsGetRevisions(ctx context.Context, emailId string) ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest {
	return ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return CollectionResponseWithTotalVersionPublicEmail
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdRevisionsGetRevisionsExecute(r ApiGetMarketingV3EmailsEmailIdRevisionsGetRevisionsRequest) (*CollectionResponseWithTotalVersionPublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseWithTotalVersionPublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3EmailsEmailIdRevisionsGetRevisions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/revisions"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdGetRevisionByIdRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	revisionId string
}

func (r ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdGetRevisionByIdRequest) Execute() (*VersionPublicEmail, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsEmailIdRevisionsRevisionIdGetRevisionByIdExecute(r)
}

/*
GetMarketingV3EmailsEmailIdRevisionsRevisionIdGetRevisionById Get a revision of a marketing email.

Get a specific revision of a marketing email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @param revisionId The ID of a revision.
 @return ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdGetRevisionByIdRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdRevisionsRevisionIdGetRevisionById(ctx context.Context, emailId string, revisionId string) ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdGetRevisionByIdRequest {
	return ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdGetRevisionByIdRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
		revisionId: revisionId,
	}
}

// Execute executes the request
//  @return VersionPublicEmail
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsEmailIdRevisionsRevisionIdGetRevisionByIdExecute(r ApiGetMarketingV3EmailsEmailIdRevisionsRevisionIdGetRevisionByIdRequest) (*VersionPublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VersionPublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3EmailsEmailIdRevisionsRevisionIdGetRevisionById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/revisions/{revisionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"revisionId"+"}", url.PathEscape(parameterValueToString(r.revisionId, "revisionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3EmailsGetPageRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	createdAt *time.Time
	createdAfter *time.Time
	createdBefore *time.Time
	updatedAt *time.Time
	updatedAfter *time.Time
	updatedBefore *time.Time
	sort *[]string
	after *string
	limit *int32
	includeStats *bool
	marketingCampaignNames *bool
	workflowNames *bool
	type_ *string
	isPublished *bool
	includedProperties *[]string
	campaign *string
	archived *bool
}

// Only return emails created at exactly the specified time.
func (r ApiGetMarketingV3EmailsGetPageRequest) CreatedAt(createdAt time.Time) ApiGetMarketingV3EmailsGetPageRequest {
	r.createdAt = &createdAt
	return r
}

// Only return emails created after the specified time.
func (r ApiGetMarketingV3EmailsGetPageRequest) CreatedAfter(createdAfter time.Time) ApiGetMarketingV3EmailsGetPageRequest {
	r.createdAfter = &createdAfter
	return r
}

// Only return emails created before the specified time.
func (r ApiGetMarketingV3EmailsGetPageRequest) CreatedBefore(createdBefore time.Time) ApiGetMarketingV3EmailsGetPageRequest {
	r.createdBefore = &createdBefore
	return r
}

// Only return emails last updated at exactly the specified time.
func (r ApiGetMarketingV3EmailsGetPageRequest) UpdatedAt(updatedAt time.Time) ApiGetMarketingV3EmailsGetPageRequest {
	r.updatedAt = &updatedAt
	return r
}

// Only return emails last updated after the specified time.
func (r ApiGetMarketingV3EmailsGetPageRequest) UpdatedAfter(updatedAfter time.Time) ApiGetMarketingV3EmailsGetPageRequest {
	r.updatedAfter = &updatedAfter
	return r
}

// Only return emails last updated before the specified time.
func (r ApiGetMarketingV3EmailsGetPageRequest) UpdatedBefore(updatedBefore time.Time) ApiGetMarketingV3EmailsGetPageRequest {
	r.updatedBefore = &updatedBefore
	return r
}

// Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default.
func (r ApiGetMarketingV3EmailsGetPageRequest) Sort(sort []string) ApiGetMarketingV3EmailsGetPageRequest {
	r.sort = &sort
	return r
}

// The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetMarketingV3EmailsGetPageRequest) After(after string) ApiGetMarketingV3EmailsGetPageRequest {
	r.after = &after
	return r
}

// The maximum number of results to return. Default is 10.
func (r ApiGetMarketingV3EmailsGetPageRequest) Limit(limit int32) ApiGetMarketingV3EmailsGetPageRequest {
	r.limit = &limit
	return r
}

// Include statistics with emails.
func (r ApiGetMarketingV3EmailsGetPageRequest) IncludeStats(includeStats bool) ApiGetMarketingV3EmailsGetPageRequest {
	r.includeStats = &includeStats
	return r
}

func (r ApiGetMarketingV3EmailsGetPageRequest) MarketingCampaignNames(marketingCampaignNames bool) ApiGetMarketingV3EmailsGetPageRequest {
	r.marketingCampaignNames = &marketingCampaignNames
	return r
}

func (r ApiGetMarketingV3EmailsGetPageRequest) WorkflowNames(workflowNames bool) ApiGetMarketingV3EmailsGetPageRequest {
	r.workflowNames = &workflowNames
	return r
}

// Email types to be filtered by. Multiple types can be included. All emails will be returned if not present.
func (r ApiGetMarketingV3EmailsGetPageRequest) Type_(type_ string) ApiGetMarketingV3EmailsGetPageRequest {
	r.type_ = &type_
	return r
}

// Filter by published/draft emails. All emails will be returned if not present.
func (r ApiGetMarketingV3EmailsGetPageRequest) IsPublished(isPublished bool) ApiGetMarketingV3EmailsGetPageRequest {
	r.isPublished = &isPublished
	return r
}

func (r ApiGetMarketingV3EmailsGetPageRequest) IncludedProperties(includedProperties []string) ApiGetMarketingV3EmailsGetPageRequest {
	r.includedProperties = &includedProperties
	return r
}

// Filter by campaign GUID. All emails will be returned if not present.
func (r ApiGetMarketingV3EmailsGetPageRequest) Campaign(campaign string) ApiGetMarketingV3EmailsGetPageRequest {
	r.campaign = &campaign
	return r
}

// Specifies whether to return archived emails. Defaults to &#x60;false&#x60;.
func (r ApiGetMarketingV3EmailsGetPageRequest) Archived(archived bool) ApiGetMarketingV3EmailsGetPageRequest {
	r.archived = &archived
	return r
}

func (r ApiGetMarketingV3EmailsGetPageRequest) Execute() (*CollectionResponseWithTotalPublicEmailForwardPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3EmailsGetPageExecute(r)
}

/*
GetMarketingV3EmailsGetPage Get all marketing emails for a HubSpot account.

The results can be filtered, allowing you to find a specific set of emails. See the table below for a full list of filtering options.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingV3EmailsGetPageRequest
*/
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsGetPage(ctx context.Context) ApiGetMarketingV3EmailsGetPageRequest {
	return ApiGetMarketingV3EmailsGetPageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseWithTotalPublicEmailForwardPaging
func (a *MarketingEmailsAPIService) GetMarketingV3EmailsGetPageExecute(r ApiGetMarketingV3EmailsGetPageRequest) (*CollectionResponseWithTotalPublicEmailForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseWithTotalPublicEmailForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.GetMarketingV3EmailsGetPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.createdAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdAt", r.createdAt, "form", "")
	}
	if r.createdAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdAfter", r.createdAfter, "form", "")
	}
	if r.createdBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdBefore", r.createdBefore, "form", "")
	}
	if r.updatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedAt", r.updatedAt, "form", "")
	}
	if r.updatedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedAfter", r.updatedAfter, "form", "")
	}
	if r.updatedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedBefore", r.updatedBefore, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.includeStats != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeStats", r.includeStats, "form", "")
	}
	if r.marketingCampaignNames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marketingCampaignNames", r.marketingCampaignNames, "form", "")
	}
	if r.workflowNames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workflowNames", r.workflowNames, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.isPublished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isPublished", r.isPublished, "form", "")
	}
	if r.includedProperties != nil {
		t := *r.includedProperties
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "includedProperties", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "includedProperties", t, "form", "multi")
		}
	}
	if r.campaign != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "campaign", r.campaign, "form", "")
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingV3EmailsEmailIdDraftUpsertDraftRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	emailUpdateRequest *EmailUpdateRequest
}

// A marketing email object with properties that should overwrite the corresponding properties in the email&#39;s current draft.
func (r ApiPatchMarketingV3EmailsEmailIdDraftUpsertDraftRequest) EmailUpdateRequest(emailUpdateRequest EmailUpdateRequest) ApiPatchMarketingV3EmailsEmailIdDraftUpsertDraftRequest {
	r.emailUpdateRequest = &emailUpdateRequest
	return r
}

func (r ApiPatchMarketingV3EmailsEmailIdDraftUpsertDraftRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.PatchMarketingV3EmailsEmailIdDraftUpsertDraftExecute(r)
}

/*
PatchMarketingV3EmailsEmailIdDraftUpsertDraft Create or update draft version

Create or update the draft version of a marketing email. If no draft exists, the system creates a draft from the current “live” email then applies the request body to that draft. The draft version only lives on the buffer—the email is not cloned.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @return ApiPatchMarketingV3EmailsEmailIdDraftUpsertDraftRequest
*/
func (a *MarketingEmailsAPIService) PatchMarketingV3EmailsEmailIdDraftUpsertDraft(ctx context.Context, emailId string) ApiPatchMarketingV3EmailsEmailIdDraftUpsertDraftRequest {
	return ApiPatchMarketingV3EmailsEmailIdDraftUpsertDraftRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) PatchMarketingV3EmailsEmailIdDraftUpsertDraftExecute(r ApiPatchMarketingV3EmailsEmailIdDraftUpsertDraftRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PatchMarketingV3EmailsEmailIdDraftUpsertDraft")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/draft"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("emailUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.emailUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingV3EmailsEmailIdUpdateRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	emailUpdateRequest *EmailUpdateRequest
	archived *bool
}

// A marketing email object with properties that should overwrite the corresponding properties of the marketing email.
func (r ApiPatchMarketingV3EmailsEmailIdUpdateRequest) EmailUpdateRequest(emailUpdateRequest EmailUpdateRequest) ApiPatchMarketingV3EmailsEmailIdUpdateRequest {
	r.emailUpdateRequest = &emailUpdateRequest
	return r
}

// Whether to return only results that have been archived.
func (r ApiPatchMarketingV3EmailsEmailIdUpdateRequest) Archived(archived bool) ApiPatchMarketingV3EmailsEmailIdUpdateRequest {
	r.archived = &archived
	return r
}

func (r ApiPatchMarketingV3EmailsEmailIdUpdateRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.PatchMarketingV3EmailsEmailIdUpdateExecute(r)
}

/*
PatchMarketingV3EmailsEmailIdUpdate Update a marketing email.

Change properties of a marketing email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The ID of the marketing email that should get updated
 @return ApiPatchMarketingV3EmailsEmailIdUpdateRequest
*/
func (a *MarketingEmailsAPIService) PatchMarketingV3EmailsEmailIdUpdate(ctx context.Context, emailId string) ApiPatchMarketingV3EmailsEmailIdUpdateRequest {
	return ApiPatchMarketingV3EmailsEmailIdUpdateRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) PatchMarketingV3EmailsEmailIdUpdateExecute(r ApiPatchMarketingV3EmailsEmailIdUpdateRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PatchMarketingV3EmailsEmailIdUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("emailUpdateRequest is required and must be specified")
	}

	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.emailUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariationRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	abTestCreateRequestVNext *AbTestCreateRequestVNext
}

func (r ApiPostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariationRequest) AbTestCreateRequestVNext(abTestCreateRequestVNext AbTestCreateRequestVNext) ApiPostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariationRequest {
	r.abTestCreateRequestVNext = &abTestCreateRequestVNext
	return r
}

func (r ApiPostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariationRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariationExecute(r)
}

/*
PostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariation Create an A/B test variation of a marketing email.

Create a variation of a marketing email for an A/B test. The new variation will be created as a draft. If an active variation already exists, a new one won't be created.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariationRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariation(ctx context.Context) ApiPostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariationRequest {
	return ApiPostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariationExecute(r ApiPostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariationRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3EmailsAbTestCreateVariationCreateAbTestVariation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/ab-test/create-variation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.abTestCreateRequestVNext == nil {
		return localVarReturnValue, nil, reportError("abTestCreateRequestVNext is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.abTestCreateRequestVNext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsCloneCloneRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailCloneRequestVNext *EmailCloneRequestVNext
}

func (r ApiPostMarketingV3EmailsCloneCloneRequest) EmailCloneRequestVNext(emailCloneRequestVNext EmailCloneRequestVNext) ApiPostMarketingV3EmailsCloneCloneRequest {
	r.emailCloneRequestVNext = &emailCloneRequestVNext
	return r
}

func (r ApiPostMarketingV3EmailsCloneCloneRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsCloneCloneExecute(r)
}

/*
PostMarketingV3EmailsCloneClone Clone a marketing email.

This will create a duplicate email with the same properties as the original, with the exception of a unique ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3EmailsCloneCloneRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsCloneClone(ctx context.Context) ApiPostMarketingV3EmailsCloneCloneRequest {
	return ApiPostMarketingV3EmailsCloneCloneRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsCloneCloneExecute(r ApiPostMarketingV3EmailsCloneCloneRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3EmailsCloneClone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/clone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailCloneRequestVNext == nil {
		return localVarReturnValue, nil, reportError("emailCloneRequestVNext is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.emailCloneRequestVNext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsCreateRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailCreateRequest *EmailCreateRequest
}

func (r ApiPostMarketingV3EmailsCreateRequest) EmailCreateRequest(emailCreateRequest EmailCreateRequest) ApiPostMarketingV3EmailsCreateRequest {
	r.emailCreateRequest = &emailCreateRequest
	return r
}

func (r ApiPostMarketingV3EmailsCreateRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsCreateExecute(r)
}

/*
PostMarketingV3EmailsCreate Create a new marketing email.

Use this endpoint to create a new marketing email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3EmailsCreateRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsCreate(ctx context.Context) ApiPostMarketingV3EmailsCreateRequest {
	return ApiPostMarketingV3EmailsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsCreateExecute(r ApiPostMarketingV3EmailsCreateRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3EmailsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailCreateRequest == nil {
		return localVarReturnValue, nil, reportError("emailCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.emailCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsEmailIdDraftResetResetDraftRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
}

func (r ApiPostMarketingV3EmailsEmailIdDraftResetResetDraftRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsEmailIdDraftResetResetDraftExecute(r)
}

/*
PostMarketingV3EmailsEmailIdDraftResetResetDraft Reset Draft

Resets the draft back to a copy of the live object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @return ApiPostMarketingV3EmailsEmailIdDraftResetResetDraftRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdDraftResetResetDraft(ctx context.Context, emailId string) ApiPostMarketingV3EmailsEmailIdDraftResetResetDraftRequest {
	return ApiPostMarketingV3EmailsEmailIdDraftResetResetDraftRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdDraftResetResetDraftExecute(r ApiPostMarketingV3EmailsEmailIdDraftResetResetDraftRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3EmailsEmailIdDraftResetResetDraft")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/draft/reset"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsEmailIdPublishPublishOrSendRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
}

func (r ApiPostMarketingV3EmailsEmailIdPublishPublishOrSendRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsEmailIdPublishPublishOrSendExecute(r)
}

/*
PostMarketingV3EmailsEmailIdPublishPublishOrSend Publish or send a marketing email.

If you have a Marketing Hub Enterprise account or the transactional email add-on, you can use this endpoint to publish an automated email or send/schedule a regular email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @return ApiPostMarketingV3EmailsEmailIdPublishPublishOrSendRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdPublishPublishOrSend(ctx context.Context, emailId string) ApiPostMarketingV3EmailsEmailIdPublishPublishOrSendRequest {
	return ApiPostMarketingV3EmailsEmailIdPublishPublishOrSendRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdPublishPublishOrSendExecute(r ApiPostMarketingV3EmailsEmailIdPublishPublishOrSendRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3EmailsEmailIdPublishPublishOrSend")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/publish"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRestoreRevisionRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	revisionId string
}

func (r ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRestoreRevisionRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRestoreRevisionExecute(r)
}

/*
PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRestoreRevision Restore a revision of a marketing email

Restores a previous revision of a marketing email. The current revision becomes old, and the restored revision is given a new version number.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @param revisionId The ID of a revision.
 @return ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRestoreRevisionRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRestoreRevision(ctx context.Context, emailId string, revisionId string) ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRestoreRevisionRequest {
	return ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRestoreRevisionRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
		revisionId: revisionId,
	}
}

// Execute executes the request
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRestoreRevisionExecute(r ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRestoreRevisionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreRestoreRevision")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/revisions/{revisionId}/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"revisionId"+"}", url.PathEscape(parameterValueToString(r.revisionId, "revisionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRestoreDraftRevisionRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
	revisionId int64
}

func (r ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRestoreDraftRevisionRequest) Execute() (*PublicEmail, *http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRestoreDraftRevisionExecute(r)
}

/*
PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRestoreDraftRevision Restore a revision of a marketing email to DRAFT state

Restores a previous revision of a marketing email to DRAFT state. If there is currently something in the draft for that object, it is overwritten. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId The marketing email ID.
 @param revisionId The ID of a revision.
 @return ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRestoreDraftRevisionRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRestoreDraftRevision(ctx context.Context, emailId string, revisionId int64) ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRestoreDraftRevisionRequest {
	return ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRestoreDraftRevisionRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
		revisionId: revisionId,
	}
}

// Execute executes the request
//  @return PublicEmail
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRestoreDraftRevisionExecute(r ApiPostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRestoreDraftRevisionRequest) (*PublicEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3EmailsEmailIdRevisionsRevisionIdRestoreToDraftRestoreDraftRevision")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/revisions/{revisionId}/restore-to-draft"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"revisionId"+"}", url.PathEscape(parameterValueToString(r.revisionId, "revisionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3EmailsEmailIdUnpublishUnpublishOrCancelRequest struct {
	ctx context.Context
	ApiService *MarketingEmailsAPIService
	emailId string
}

func (r ApiPostMarketingV3EmailsEmailIdUnpublishUnpublishOrCancelRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostMarketingV3EmailsEmailIdUnpublishUnpublishOrCancelExecute(r)
}

/*
PostMarketingV3EmailsEmailIdUnpublishUnpublishOrCancel Unpublish or cancel a marketing email.

If you have a Marketing Hub Enterprise account or the transactional email add-on, you can use this endpoint to unpublish an automated email or cancel a regular email. If the email is already in the process of being sent, canceling might not be possible.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailId
 @return ApiPostMarketingV3EmailsEmailIdUnpublishUnpublishOrCancelRequest
*/
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdUnpublishUnpublishOrCancel(ctx context.Context, emailId string) ApiPostMarketingV3EmailsEmailIdUnpublishUnpublishOrCancelRequest {
	return ApiPostMarketingV3EmailsEmailIdUnpublishUnpublishOrCancelRequest{
		ApiService: a,
		ctx: ctx,
		emailId: emailId,
	}
}

// Execute executes the request
func (a *MarketingEmailsAPIService) PostMarketingV3EmailsEmailIdUnpublishUnpublishOrCancelExecute(r ApiPostMarketingV3EmailsEmailIdUnpublishUnpublishOrCancelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingEmailsAPIService.PostMarketingV3EmailsEmailIdUnpublishUnpublishOrCancel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/emails/{emailId}/unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"emailId"+"}", url.PathEscape(parameterValueToString(r.emailId, "emailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
