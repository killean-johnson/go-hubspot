/*
User Provisioning

Add, manage, and remove users from your account

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_provisioning

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicUser{}

// PublicUser A user
type PublicUser struct {
	FirstName *string `json:"firstName,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	// The user's primary team
	PrimaryTeamId *string `json:"primaryTeamId,omitempty"`
	RoleIds []string `json:"roleIds,omitempty"`
	SendWelcomeEmail *bool `json:"sendWelcomeEmail,omitempty"`
	// The user's role
	RoleId *string `json:"roleId,omitempty"`
	// The user's additional teams
	SecondaryTeamIds []string `json:"secondaryTeamIds,omitempty"`
	// The user's unique ID
	Id string `json:"id"`
	SuperAdmin *bool `json:"superAdmin,omitempty"`
	// The user's email
	Email string `json:"email"`
}

type _PublicUser PublicUser

// NewPublicUser instantiates a new PublicUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicUser(id string, email string) *PublicUser {
	this := PublicUser{}
	this.Id = id
	this.Email = email
	return &this
}

// NewPublicUserWithDefaults instantiates a new PublicUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicUserWithDefaults() *PublicUser {
	this := PublicUser{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *PublicUser) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUser) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *PublicUser) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *PublicUser) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *PublicUser) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUser) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *PublicUser) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *PublicUser) SetLastName(v string) {
	o.LastName = &v
}

// GetPrimaryTeamId returns the PrimaryTeamId field value if set, zero value otherwise.
func (o *PublicUser) GetPrimaryTeamId() string {
	if o == nil || IsNil(o.PrimaryTeamId) {
		var ret string
		return ret
	}
	return *o.PrimaryTeamId
}

// GetPrimaryTeamIdOk returns a tuple with the PrimaryTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUser) GetPrimaryTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryTeamId) {
		return nil, false
	}
	return o.PrimaryTeamId, true
}

// HasPrimaryTeamId returns a boolean if a field has been set.
func (o *PublicUser) HasPrimaryTeamId() bool {
	if o != nil && !IsNil(o.PrimaryTeamId) {
		return true
	}

	return false
}

// SetPrimaryTeamId gets a reference to the given string and assigns it to the PrimaryTeamId field.
func (o *PublicUser) SetPrimaryTeamId(v string) {
	o.PrimaryTeamId = &v
}

// GetRoleIds returns the RoleIds field value if set, zero value otherwise.
func (o *PublicUser) GetRoleIds() []string {
	if o == nil || IsNil(o.RoleIds) {
		var ret []string
		return ret
	}
	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUser) GetRoleIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.RoleIds) {
		return nil, false
	}
	return o.RoleIds, true
}

// HasRoleIds returns a boolean if a field has been set.
func (o *PublicUser) HasRoleIds() bool {
	if o != nil && !IsNil(o.RoleIds) {
		return true
	}

	return false
}

// SetRoleIds gets a reference to the given []string and assigns it to the RoleIds field.
func (o *PublicUser) SetRoleIds(v []string) {
	o.RoleIds = v
}

// GetSendWelcomeEmail returns the SendWelcomeEmail field value if set, zero value otherwise.
func (o *PublicUser) GetSendWelcomeEmail() bool {
	if o == nil || IsNil(o.SendWelcomeEmail) {
		var ret bool
		return ret
	}
	return *o.SendWelcomeEmail
}

// GetSendWelcomeEmailOk returns a tuple with the SendWelcomeEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUser) GetSendWelcomeEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.SendWelcomeEmail) {
		return nil, false
	}
	return o.SendWelcomeEmail, true
}

// HasSendWelcomeEmail returns a boolean if a field has been set.
func (o *PublicUser) HasSendWelcomeEmail() bool {
	if o != nil && !IsNil(o.SendWelcomeEmail) {
		return true
	}

	return false
}

// SetSendWelcomeEmail gets a reference to the given bool and assigns it to the SendWelcomeEmail field.
func (o *PublicUser) SetSendWelcomeEmail(v bool) {
	o.SendWelcomeEmail = &v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *PublicUser) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUser) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *PublicUser) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *PublicUser) SetRoleId(v string) {
	o.RoleId = &v
}

// GetSecondaryTeamIds returns the SecondaryTeamIds field value if set, zero value otherwise.
func (o *PublicUser) GetSecondaryTeamIds() []string {
	if o == nil || IsNil(o.SecondaryTeamIds) {
		var ret []string
		return ret
	}
	return o.SecondaryTeamIds
}

// GetSecondaryTeamIdsOk returns a tuple with the SecondaryTeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUser) GetSecondaryTeamIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SecondaryTeamIds) {
		return nil, false
	}
	return o.SecondaryTeamIds, true
}

// HasSecondaryTeamIds returns a boolean if a field has been set.
func (o *PublicUser) HasSecondaryTeamIds() bool {
	if o != nil && !IsNil(o.SecondaryTeamIds) {
		return true
	}

	return false
}

// SetSecondaryTeamIds gets a reference to the given []string and assigns it to the SecondaryTeamIds field.
func (o *PublicUser) SetSecondaryTeamIds(v []string) {
	o.SecondaryTeamIds = v
}

// GetId returns the Id field value
func (o *PublicUser) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicUser) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicUser) SetId(v string) {
	o.Id = v
}

// GetSuperAdmin returns the SuperAdmin field value if set, zero value otherwise.
func (o *PublicUser) GetSuperAdmin() bool {
	if o == nil || IsNil(o.SuperAdmin) {
		var ret bool
		return ret
	}
	return *o.SuperAdmin
}

// GetSuperAdminOk returns a tuple with the SuperAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUser) GetSuperAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.SuperAdmin) {
		return nil, false
	}
	return o.SuperAdmin, true
}

// HasSuperAdmin returns a boolean if a field has been set.
func (o *PublicUser) HasSuperAdmin() bool {
	if o != nil && !IsNil(o.SuperAdmin) {
		return true
	}

	return false
}

// SetSuperAdmin gets a reference to the given bool and assigns it to the SuperAdmin field.
func (o *PublicUser) SetSuperAdmin(v bool) {
	o.SuperAdmin = &v
}

// GetEmail returns the Email field value
func (o *PublicUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *PublicUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *PublicUser) SetEmail(v string) {
	o.Email = v
}

func (o PublicUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.PrimaryTeamId) {
		toSerialize["primaryTeamId"] = o.PrimaryTeamId
	}
	if !IsNil(o.RoleIds) {
		toSerialize["roleIds"] = o.RoleIds
	}
	if !IsNil(o.SendWelcomeEmail) {
		toSerialize["sendWelcomeEmail"] = o.SendWelcomeEmail
	}
	if !IsNil(o.RoleId) {
		toSerialize["roleId"] = o.RoleId
	}
	if !IsNil(o.SecondaryTeamIds) {
		toSerialize["secondaryTeamIds"] = o.SecondaryTeamIds
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.SuperAdmin) {
		toSerialize["superAdmin"] = o.SuperAdmin
	}
	toSerialize["email"] = o.Email
	return toSerialize, nil
}

func (o *PublicUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicUser := _PublicUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicUser)

	if err != nil {
		return err
	}

	*o = PublicUser(varPublicUser)

	return err
}

type NullablePublicUser struct {
	value *PublicUser
	isSet bool
}

func (v NullablePublicUser) Get() *PublicUser {
	return v.value
}

func (v *NullablePublicUser) Set(val *PublicUser) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicUser) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicUser(val *PublicUser) *NullablePublicUser {
	return &NullablePublicUser{value: val, isSet: true}
}

func (v NullablePublicUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


