/*
User Provisioning

Add, manage, and remove users from your account

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_provisioning

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicPermissionSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicPermissionSet{}

// PublicPermissionSet A role that can be assigned to a user
type PublicPermissionSet struct {
	// Whether this role has a paid seat and requires the billing-write scope to assign/unassign to users
	RequiresBillingWrite bool `json:"requiresBillingWrite"`
	// The role's name
	Name string `json:"name"`
	// The role's unique ID
	Id string `json:"id"`
}

type _PublicPermissionSet PublicPermissionSet

// NewPublicPermissionSet instantiates a new PublicPermissionSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicPermissionSet(requiresBillingWrite bool, name string, id string) *PublicPermissionSet {
	this := PublicPermissionSet{}
	this.RequiresBillingWrite = requiresBillingWrite
	this.Name = name
	this.Id = id
	return &this
}

// NewPublicPermissionSetWithDefaults instantiates a new PublicPermissionSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicPermissionSetWithDefaults() *PublicPermissionSet {
	this := PublicPermissionSet{}
	return &this
}

// GetRequiresBillingWrite returns the RequiresBillingWrite field value
func (o *PublicPermissionSet) GetRequiresBillingWrite() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RequiresBillingWrite
}

// GetRequiresBillingWriteOk returns a tuple with the RequiresBillingWrite field value
// and a boolean to check if the value has been set.
func (o *PublicPermissionSet) GetRequiresBillingWriteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequiresBillingWrite, true
}

// SetRequiresBillingWrite sets field value
func (o *PublicPermissionSet) SetRequiresBillingWrite(v bool) {
	o.RequiresBillingWrite = v
}

// GetName returns the Name field value
func (o *PublicPermissionSet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicPermissionSet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicPermissionSet) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *PublicPermissionSet) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicPermissionSet) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicPermissionSet) SetId(v string) {
	o.Id = v
}

func (o PublicPermissionSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicPermissionSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["requiresBillingWrite"] = o.RequiresBillingWrite
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *PublicPermissionSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"requiresBillingWrite",
		"name",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicPermissionSet := _PublicPermissionSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicPermissionSet)

	if err != nil {
		return err
	}

	*o = PublicPermissionSet(varPublicPermissionSet)

	return err
}

type NullablePublicPermissionSet struct {
	value *PublicPermissionSet
	isSet bool
}

func (v NullablePublicPermissionSet) Get() *PublicPermissionSet {
	return v.value
}

func (v *NullablePublicPermissionSet) Set(val *PublicPermissionSet) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicPermissionSet) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicPermissionSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicPermissionSet(val *PublicPermissionSet) *NullablePublicPermissionSet {
	return &NullablePublicPermissionSet{value: val, isSet: true}
}

func (v NullablePublicPermissionSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicPermissionSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


