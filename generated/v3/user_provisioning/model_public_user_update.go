/*
User Provisioning

Add, manage, and remove users from your account

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_provisioning

import (
	"encoding/json"
)

// checks if the PublicUserUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicUserUpdate{}

// PublicUserUpdate A user to update
type PublicUserUpdate struct {
	FirstName *string `json:"firstName,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	// The user's primary team
	PrimaryTeamId *string `json:"primaryTeamId,omitempty"`
	// The user's role
	RoleId *string `json:"roleId,omitempty"`
	// The user's additional teams
	SecondaryTeamIds []string `json:"secondaryTeamIds,omitempty"`
}

// NewPublicUserUpdate instantiates a new PublicUserUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicUserUpdate() *PublicUserUpdate {
	this := PublicUserUpdate{}
	return &this
}

// NewPublicUserUpdateWithDefaults instantiates a new PublicUserUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicUserUpdateWithDefaults() *PublicUserUpdate {
	this := PublicUserUpdate{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *PublicUserUpdate) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUserUpdate) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *PublicUserUpdate) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *PublicUserUpdate) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *PublicUserUpdate) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUserUpdate) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *PublicUserUpdate) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *PublicUserUpdate) SetLastName(v string) {
	o.LastName = &v
}

// GetPrimaryTeamId returns the PrimaryTeamId field value if set, zero value otherwise.
func (o *PublicUserUpdate) GetPrimaryTeamId() string {
	if o == nil || IsNil(o.PrimaryTeamId) {
		var ret string
		return ret
	}
	return *o.PrimaryTeamId
}

// GetPrimaryTeamIdOk returns a tuple with the PrimaryTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUserUpdate) GetPrimaryTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryTeamId) {
		return nil, false
	}
	return o.PrimaryTeamId, true
}

// HasPrimaryTeamId returns a boolean if a field has been set.
func (o *PublicUserUpdate) HasPrimaryTeamId() bool {
	if o != nil && !IsNil(o.PrimaryTeamId) {
		return true
	}

	return false
}

// SetPrimaryTeamId gets a reference to the given string and assigns it to the PrimaryTeamId field.
func (o *PublicUserUpdate) SetPrimaryTeamId(v string) {
	o.PrimaryTeamId = &v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *PublicUserUpdate) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUserUpdate) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *PublicUserUpdate) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *PublicUserUpdate) SetRoleId(v string) {
	o.RoleId = &v
}

// GetSecondaryTeamIds returns the SecondaryTeamIds field value if set, zero value otherwise.
func (o *PublicUserUpdate) GetSecondaryTeamIds() []string {
	if o == nil || IsNil(o.SecondaryTeamIds) {
		var ret []string
		return ret
	}
	return o.SecondaryTeamIds
}

// GetSecondaryTeamIdsOk returns a tuple with the SecondaryTeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUserUpdate) GetSecondaryTeamIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SecondaryTeamIds) {
		return nil, false
	}
	return o.SecondaryTeamIds, true
}

// HasSecondaryTeamIds returns a boolean if a field has been set.
func (o *PublicUserUpdate) HasSecondaryTeamIds() bool {
	if o != nil && !IsNil(o.SecondaryTeamIds) {
		return true
	}

	return false
}

// SetSecondaryTeamIds gets a reference to the given []string and assigns it to the SecondaryTeamIds field.
func (o *PublicUserUpdate) SetSecondaryTeamIds(v []string) {
	o.SecondaryTeamIds = v
}

func (o PublicUserUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicUserUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.PrimaryTeamId) {
		toSerialize["primaryTeamId"] = o.PrimaryTeamId
	}
	if !IsNil(o.RoleId) {
		toSerialize["roleId"] = o.RoleId
	}
	if !IsNil(o.SecondaryTeamIds) {
		toSerialize["secondaryTeamIds"] = o.SecondaryTeamIds
	}
	return toSerialize, nil
}

type NullablePublicUserUpdate struct {
	value *PublicUserUpdate
	isSet bool
}

func (v NullablePublicUserUpdate) Get() *PublicUserUpdate {
	return v.value
}

func (v *NullablePublicUserUpdate) Set(val *PublicUserUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicUserUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicUserUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicUserUpdate(val *PublicUserUpdate) *NullablePublicUserUpdate {
	return &NullablePublicUserUpdate{value: val, isSet: true}
}

func (v NullablePublicUserUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicUserUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


