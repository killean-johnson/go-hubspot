/*
Forms

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forms

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DependentFieldDependentField - struct for DependentFieldDependentField
type DependentFieldDependentField struct {
	DatepickerField *DatepickerField
	DropdownField *DropdownField
	EmailField *EmailField
	FileField *FileField
	MobilePhoneField *MobilePhoneField
	MultiLineTextField *MultiLineTextField
	MultipleCheckboxesField *MultipleCheckboxesField
	NumberField *NumberField
	PaymentLinkRadioField *PaymentLinkRadioField
	PhoneField *PhoneField
	RadioField *RadioField
	SingleCheckboxField *SingleCheckboxField
	SingleLineTextField *SingleLineTextField
}

// DatepickerFieldAsDependentFieldDependentField is a convenience function that returns DatepickerField wrapped in DependentFieldDependentField
func DatepickerFieldAsDependentFieldDependentField(v *DatepickerField) DependentFieldDependentField {
	return DependentFieldDependentField{
		DatepickerField: v,
	}
}

// DropdownFieldAsDependentFieldDependentField is a convenience function that returns DropdownField wrapped in DependentFieldDependentField
func DropdownFieldAsDependentFieldDependentField(v *DropdownField) DependentFieldDependentField {
	return DependentFieldDependentField{
		DropdownField: v,
	}
}

// EmailFieldAsDependentFieldDependentField is a convenience function that returns EmailField wrapped in DependentFieldDependentField
func EmailFieldAsDependentFieldDependentField(v *EmailField) DependentFieldDependentField {
	return DependentFieldDependentField{
		EmailField: v,
	}
}

// FileFieldAsDependentFieldDependentField is a convenience function that returns FileField wrapped in DependentFieldDependentField
func FileFieldAsDependentFieldDependentField(v *FileField) DependentFieldDependentField {
	return DependentFieldDependentField{
		FileField: v,
	}
}

// MobilePhoneFieldAsDependentFieldDependentField is a convenience function that returns MobilePhoneField wrapped in DependentFieldDependentField
func MobilePhoneFieldAsDependentFieldDependentField(v *MobilePhoneField) DependentFieldDependentField {
	return DependentFieldDependentField{
		MobilePhoneField: v,
	}
}

// MultiLineTextFieldAsDependentFieldDependentField is a convenience function that returns MultiLineTextField wrapped in DependentFieldDependentField
func MultiLineTextFieldAsDependentFieldDependentField(v *MultiLineTextField) DependentFieldDependentField {
	return DependentFieldDependentField{
		MultiLineTextField: v,
	}
}

// MultipleCheckboxesFieldAsDependentFieldDependentField is a convenience function that returns MultipleCheckboxesField wrapped in DependentFieldDependentField
func MultipleCheckboxesFieldAsDependentFieldDependentField(v *MultipleCheckboxesField) DependentFieldDependentField {
	return DependentFieldDependentField{
		MultipleCheckboxesField: v,
	}
}

// NumberFieldAsDependentFieldDependentField is a convenience function that returns NumberField wrapped in DependentFieldDependentField
func NumberFieldAsDependentFieldDependentField(v *NumberField) DependentFieldDependentField {
	return DependentFieldDependentField{
		NumberField: v,
	}
}

// PaymentLinkRadioFieldAsDependentFieldDependentField is a convenience function that returns PaymentLinkRadioField wrapped in DependentFieldDependentField
func PaymentLinkRadioFieldAsDependentFieldDependentField(v *PaymentLinkRadioField) DependentFieldDependentField {
	return DependentFieldDependentField{
		PaymentLinkRadioField: v,
	}
}

// PhoneFieldAsDependentFieldDependentField is a convenience function that returns PhoneField wrapped in DependentFieldDependentField
func PhoneFieldAsDependentFieldDependentField(v *PhoneField) DependentFieldDependentField {
	return DependentFieldDependentField{
		PhoneField: v,
	}
}

// RadioFieldAsDependentFieldDependentField is a convenience function that returns RadioField wrapped in DependentFieldDependentField
func RadioFieldAsDependentFieldDependentField(v *RadioField) DependentFieldDependentField {
	return DependentFieldDependentField{
		RadioField: v,
	}
}

// SingleCheckboxFieldAsDependentFieldDependentField is a convenience function that returns SingleCheckboxField wrapped in DependentFieldDependentField
func SingleCheckboxFieldAsDependentFieldDependentField(v *SingleCheckboxField) DependentFieldDependentField {
	return DependentFieldDependentField{
		SingleCheckboxField: v,
	}
}

// SingleLineTextFieldAsDependentFieldDependentField is a convenience function that returns SingleLineTextField wrapped in DependentFieldDependentField
func SingleLineTextFieldAsDependentFieldDependentField(v *SingleLineTextField) DependentFieldDependentField {
	return DependentFieldDependentField{
		SingleLineTextField: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DependentFieldDependentField) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DatepickerField
	err = newStrictDecoder(data).Decode(&dst.DatepickerField)
	if err == nil {
		jsonDatepickerField, _ := json.Marshal(dst.DatepickerField)
		if string(jsonDatepickerField) == "{}" { // empty struct
			dst.DatepickerField = nil
		} else {
			if err = validator.Validate(dst.DatepickerField); err != nil {
				dst.DatepickerField = nil
			} else {
				match++
			}
		}
	} else {
		dst.DatepickerField = nil
	}

	// try to unmarshal data into DropdownField
	err = newStrictDecoder(data).Decode(&dst.DropdownField)
	if err == nil {
		jsonDropdownField, _ := json.Marshal(dst.DropdownField)
		if string(jsonDropdownField) == "{}" { // empty struct
			dst.DropdownField = nil
		} else {
			if err = validator.Validate(dst.DropdownField); err != nil {
				dst.DropdownField = nil
			} else {
				match++
			}
		}
	} else {
		dst.DropdownField = nil
	}

	// try to unmarshal data into EmailField
	err = newStrictDecoder(data).Decode(&dst.EmailField)
	if err == nil {
		jsonEmailField, _ := json.Marshal(dst.EmailField)
		if string(jsonEmailField) == "{}" { // empty struct
			dst.EmailField = nil
		} else {
			if err = validator.Validate(dst.EmailField); err != nil {
				dst.EmailField = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmailField = nil
	}

	// try to unmarshal data into FileField
	err = newStrictDecoder(data).Decode(&dst.FileField)
	if err == nil {
		jsonFileField, _ := json.Marshal(dst.FileField)
		if string(jsonFileField) == "{}" { // empty struct
			dst.FileField = nil
		} else {
			if err = validator.Validate(dst.FileField); err != nil {
				dst.FileField = nil
			} else {
				match++
			}
		}
	} else {
		dst.FileField = nil
	}

	// try to unmarshal data into MobilePhoneField
	err = newStrictDecoder(data).Decode(&dst.MobilePhoneField)
	if err == nil {
		jsonMobilePhoneField, _ := json.Marshal(dst.MobilePhoneField)
		if string(jsonMobilePhoneField) == "{}" { // empty struct
			dst.MobilePhoneField = nil
		} else {
			if err = validator.Validate(dst.MobilePhoneField); err != nil {
				dst.MobilePhoneField = nil
			} else {
				match++
			}
		}
	} else {
		dst.MobilePhoneField = nil
	}

	// try to unmarshal data into MultiLineTextField
	err = newStrictDecoder(data).Decode(&dst.MultiLineTextField)
	if err == nil {
		jsonMultiLineTextField, _ := json.Marshal(dst.MultiLineTextField)
		if string(jsonMultiLineTextField) == "{}" { // empty struct
			dst.MultiLineTextField = nil
		} else {
			if err = validator.Validate(dst.MultiLineTextField); err != nil {
				dst.MultiLineTextField = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultiLineTextField = nil
	}

	// try to unmarshal data into MultipleCheckboxesField
	err = newStrictDecoder(data).Decode(&dst.MultipleCheckboxesField)
	if err == nil {
		jsonMultipleCheckboxesField, _ := json.Marshal(dst.MultipleCheckboxesField)
		if string(jsonMultipleCheckboxesField) == "{}" { // empty struct
			dst.MultipleCheckboxesField = nil
		} else {
			if err = validator.Validate(dst.MultipleCheckboxesField); err != nil {
				dst.MultipleCheckboxesField = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultipleCheckboxesField = nil
	}

	// try to unmarshal data into NumberField
	err = newStrictDecoder(data).Decode(&dst.NumberField)
	if err == nil {
		jsonNumberField, _ := json.Marshal(dst.NumberField)
		if string(jsonNumberField) == "{}" { // empty struct
			dst.NumberField = nil
		} else {
			if err = validator.Validate(dst.NumberField); err != nil {
				dst.NumberField = nil
			} else {
				match++
			}
		}
	} else {
		dst.NumberField = nil
	}

	// try to unmarshal data into PaymentLinkRadioField
	err = newStrictDecoder(data).Decode(&dst.PaymentLinkRadioField)
	if err == nil {
		jsonPaymentLinkRadioField, _ := json.Marshal(dst.PaymentLinkRadioField)
		if string(jsonPaymentLinkRadioField) == "{}" { // empty struct
			dst.PaymentLinkRadioField = nil
		} else {
			if err = validator.Validate(dst.PaymentLinkRadioField); err != nil {
				dst.PaymentLinkRadioField = nil
			} else {
				match++
			}
		}
	} else {
		dst.PaymentLinkRadioField = nil
	}

	// try to unmarshal data into PhoneField
	err = newStrictDecoder(data).Decode(&dst.PhoneField)
	if err == nil {
		jsonPhoneField, _ := json.Marshal(dst.PhoneField)
		if string(jsonPhoneField) == "{}" { // empty struct
			dst.PhoneField = nil
		} else {
			if err = validator.Validate(dst.PhoneField); err != nil {
				dst.PhoneField = nil
			} else {
				match++
			}
		}
	} else {
		dst.PhoneField = nil
	}

	// try to unmarshal data into RadioField
	err = newStrictDecoder(data).Decode(&dst.RadioField)
	if err == nil {
		jsonRadioField, _ := json.Marshal(dst.RadioField)
		if string(jsonRadioField) == "{}" { // empty struct
			dst.RadioField = nil
		} else {
			if err = validator.Validate(dst.RadioField); err != nil {
				dst.RadioField = nil
			} else {
				match++
			}
		}
	} else {
		dst.RadioField = nil
	}

	// try to unmarshal data into SingleCheckboxField
	err = newStrictDecoder(data).Decode(&dst.SingleCheckboxField)
	if err == nil {
		jsonSingleCheckboxField, _ := json.Marshal(dst.SingleCheckboxField)
		if string(jsonSingleCheckboxField) == "{}" { // empty struct
			dst.SingleCheckboxField = nil
		} else {
			if err = validator.Validate(dst.SingleCheckboxField); err != nil {
				dst.SingleCheckboxField = nil
			} else {
				match++
			}
		}
	} else {
		dst.SingleCheckboxField = nil
	}

	// try to unmarshal data into SingleLineTextField
	err = newStrictDecoder(data).Decode(&dst.SingleLineTextField)
	if err == nil {
		jsonSingleLineTextField, _ := json.Marshal(dst.SingleLineTextField)
		if string(jsonSingleLineTextField) == "{}" { // empty struct
			dst.SingleLineTextField = nil
		} else {
			if err = validator.Validate(dst.SingleLineTextField); err != nil {
				dst.SingleLineTextField = nil
			} else {
				match++
			}
		}
	} else {
		dst.SingleLineTextField = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DatepickerField = nil
		dst.DropdownField = nil
		dst.EmailField = nil
		dst.FileField = nil
		dst.MobilePhoneField = nil
		dst.MultiLineTextField = nil
		dst.MultipleCheckboxesField = nil
		dst.NumberField = nil
		dst.PaymentLinkRadioField = nil
		dst.PhoneField = nil
		dst.RadioField = nil
		dst.SingleCheckboxField = nil
		dst.SingleLineTextField = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DependentFieldDependentField)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DependentFieldDependentField)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DependentFieldDependentField) MarshalJSON() ([]byte, error) {
	if src.DatepickerField != nil {
		return json.Marshal(&src.DatepickerField)
	}

	if src.DropdownField != nil {
		return json.Marshal(&src.DropdownField)
	}

	if src.EmailField != nil {
		return json.Marshal(&src.EmailField)
	}

	if src.FileField != nil {
		return json.Marshal(&src.FileField)
	}

	if src.MobilePhoneField != nil {
		return json.Marshal(&src.MobilePhoneField)
	}

	if src.MultiLineTextField != nil {
		return json.Marshal(&src.MultiLineTextField)
	}

	if src.MultipleCheckboxesField != nil {
		return json.Marshal(&src.MultipleCheckboxesField)
	}

	if src.NumberField != nil {
		return json.Marshal(&src.NumberField)
	}

	if src.PaymentLinkRadioField != nil {
		return json.Marshal(&src.PaymentLinkRadioField)
	}

	if src.PhoneField != nil {
		return json.Marshal(&src.PhoneField)
	}

	if src.RadioField != nil {
		return json.Marshal(&src.RadioField)
	}

	if src.SingleCheckboxField != nil {
		return json.Marshal(&src.SingleCheckboxField)
	}

	if src.SingleLineTextField != nil {
		return json.Marshal(&src.SingleLineTextField)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DependentFieldDependentField) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DatepickerField != nil {
		return obj.DatepickerField
	}

	if obj.DropdownField != nil {
		return obj.DropdownField
	}

	if obj.EmailField != nil {
		return obj.EmailField
	}

	if obj.FileField != nil {
		return obj.FileField
	}

	if obj.MobilePhoneField != nil {
		return obj.MobilePhoneField
	}

	if obj.MultiLineTextField != nil {
		return obj.MultiLineTextField
	}

	if obj.MultipleCheckboxesField != nil {
		return obj.MultipleCheckboxesField
	}

	if obj.NumberField != nil {
		return obj.NumberField
	}

	if obj.PaymentLinkRadioField != nil {
		return obj.PaymentLinkRadioField
	}

	if obj.PhoneField != nil {
		return obj.PhoneField
	}

	if obj.RadioField != nil {
		return obj.RadioField
	}

	if obj.SingleCheckboxField != nil {
		return obj.SingleCheckboxField
	}

	if obj.SingleLineTextField != nil {
		return obj.SingleLineTextField
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DependentFieldDependentField) GetActualInstanceValue() (interface{}) {
	if obj.DatepickerField != nil {
		return *obj.DatepickerField
	}

	if obj.DropdownField != nil {
		return *obj.DropdownField
	}

	if obj.EmailField != nil {
		return *obj.EmailField
	}

	if obj.FileField != nil {
		return *obj.FileField
	}

	if obj.MobilePhoneField != nil {
		return *obj.MobilePhoneField
	}

	if obj.MultiLineTextField != nil {
		return *obj.MultiLineTextField
	}

	if obj.MultipleCheckboxesField != nil {
		return *obj.MultipleCheckboxesField
	}

	if obj.NumberField != nil {
		return *obj.NumberField
	}

	if obj.PaymentLinkRadioField != nil {
		return *obj.PaymentLinkRadioField
	}

	if obj.PhoneField != nil {
		return *obj.PhoneField
	}

	if obj.RadioField != nil {
		return *obj.RadioField
	}

	if obj.SingleCheckboxField != nil {
		return *obj.SingleCheckboxField
	}

	if obj.SingleLineTextField != nil {
		return *obj.SingleLineTextField
	}

	// all schemas are nil
	return nil
}

type NullableDependentFieldDependentField struct {
	value *DependentFieldDependentField
	isSet bool
}

func (v NullableDependentFieldDependentField) Get() *DependentFieldDependentField {
	return v.value
}

func (v *NullableDependentFieldDependentField) Set(val *DependentFieldDependentField) {
	v.value = val
	v.isSet = true
}

func (v NullableDependentFieldDependentField) IsSet() bool {
	return v.isSet
}

func (v *NullableDependentFieldDependentField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependentFieldDependentField(val *DependentFieldDependentField) *NullableDependentFieldDependentField {
	return &NullableDependentFieldDependentField{value: val, isSet: true}
}

func (v NullableDependentFieldDependentField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependentFieldDependentField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


