/*
Forms

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forms

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DependentField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DependentField{}

// DependentField A form field that will be displayed based on what the customer entered in another field.
type DependentField struct {
	DependentCondition DependentFieldFilter `json:"dependentCondition"`
	DependentField DependentFieldDependentField `json:"dependentField"`
}

type _DependentField DependentField

// NewDependentField instantiates a new DependentField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependentField(dependentCondition DependentFieldFilter, dependentField DependentFieldDependentField) *DependentField {
	this := DependentField{}
	this.DependentCondition = dependentCondition
	this.DependentField = dependentField
	return &this
}

// NewDependentFieldWithDefaults instantiates a new DependentField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependentFieldWithDefaults() *DependentField {
	this := DependentField{}
	return &this
}

// GetDependentCondition returns the DependentCondition field value
func (o *DependentField) GetDependentCondition() DependentFieldFilter {
	if o == nil {
		var ret DependentFieldFilter
		return ret
	}

	return o.DependentCondition
}

// GetDependentConditionOk returns a tuple with the DependentCondition field value
// and a boolean to check if the value has been set.
func (o *DependentField) GetDependentConditionOk() (*DependentFieldFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DependentCondition, true
}

// SetDependentCondition sets field value
func (o *DependentField) SetDependentCondition(v DependentFieldFilter) {
	o.DependentCondition = v
}

// GetDependentField returns the DependentField field value
func (o *DependentField) GetDependentField() DependentFieldDependentField {
	if o == nil {
		var ret DependentFieldDependentField
		return ret
	}

	return o.DependentField
}

// GetDependentFieldOk returns a tuple with the DependentField field value
// and a boolean to check if the value has been set.
func (o *DependentField) GetDependentFieldOk() (*DependentFieldDependentField, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DependentField, true
}

// SetDependentField sets field value
func (o *DependentField) SetDependentField(v DependentFieldDependentField) {
	o.DependentField = v
}

func (o DependentField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DependentField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dependentCondition"] = o.DependentCondition
	toSerialize["dependentField"] = o.DependentField
	return toSerialize, nil
}

func (o *DependentField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dependentCondition",
		"dependentField",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDependentField := _DependentField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDependentField)

	if err != nil {
		return err
	}

	*o = DependentField(varDependentField)

	return err
}

type NullableDependentField struct {
	value *DependentField
	isSet bool
}

func (v NullableDependentField) Get() *DependentField {
	return v.value
}

func (v *NullableDependentField) Set(val *DependentField) {
	v.value = val
	v.isSet = true
}

func (v NullableDependentField) IsSet() bool {
	return v.isSet
}

func (v *NullableDependentField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependentField(val *DependentField) *NullableDependentField {
	return &NullableDependentField{value: val, isSet: true}
}

func (v NullableDependentField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependentField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


