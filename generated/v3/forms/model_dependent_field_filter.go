/*
Forms

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forms

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DependentFieldFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DependentFieldFilter{}

// DependentFieldFilter A condition based on customer input
type DependentFieldFilter struct {
	// 
	RangeStart string `json:"rangeStart"`
	// 
	Values []string `json:"values"`
	// 
	Value string `json:"value"`
	// 
	Operator string `json:"operator"`
	// 
	RangeEnd string `json:"rangeEnd"`
}

type _DependentFieldFilter DependentFieldFilter

// NewDependentFieldFilter instantiates a new DependentFieldFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependentFieldFilter(rangeStart string, values []string, value string, operator string, rangeEnd string) *DependentFieldFilter {
	this := DependentFieldFilter{}
	this.RangeStart = rangeStart
	this.Values = values
	this.Value = value
	this.Operator = operator
	this.RangeEnd = rangeEnd
	return &this
}

// NewDependentFieldFilterWithDefaults instantiates a new DependentFieldFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependentFieldFilterWithDefaults() *DependentFieldFilter {
	this := DependentFieldFilter{}
	return &this
}

// GetRangeStart returns the RangeStart field value
func (o *DependentFieldFilter) GetRangeStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RangeStart
}

// GetRangeStartOk returns a tuple with the RangeStart field value
// and a boolean to check if the value has been set.
func (o *DependentFieldFilter) GetRangeStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RangeStart, true
}

// SetRangeStart sets field value
func (o *DependentFieldFilter) SetRangeStart(v string) {
	o.RangeStart = v
}

// GetValues returns the Values field value
func (o *DependentFieldFilter) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *DependentFieldFilter) GetValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *DependentFieldFilter) SetValues(v []string) {
	o.Values = v
}

// GetValue returns the Value field value
func (o *DependentFieldFilter) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DependentFieldFilter) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DependentFieldFilter) SetValue(v string) {
	o.Value = v
}

// GetOperator returns the Operator field value
func (o *DependentFieldFilter) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *DependentFieldFilter) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *DependentFieldFilter) SetOperator(v string) {
	o.Operator = v
}

// GetRangeEnd returns the RangeEnd field value
func (o *DependentFieldFilter) GetRangeEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RangeEnd
}

// GetRangeEndOk returns a tuple with the RangeEnd field value
// and a boolean to check if the value has been set.
func (o *DependentFieldFilter) GetRangeEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RangeEnd, true
}

// SetRangeEnd sets field value
func (o *DependentFieldFilter) SetRangeEnd(v string) {
	o.RangeEnd = v
}

func (o DependentFieldFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DependentFieldFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rangeStart"] = o.RangeStart
	toSerialize["values"] = o.Values
	toSerialize["value"] = o.Value
	toSerialize["operator"] = o.Operator
	toSerialize["rangeEnd"] = o.RangeEnd
	return toSerialize, nil
}

func (o *DependentFieldFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rangeStart",
		"values",
		"value",
		"operator",
		"rangeEnd",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDependentFieldFilter := _DependentFieldFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDependentFieldFilter)

	if err != nil {
		return err
	}

	*o = DependentFieldFilter(varDependentFieldFilter)

	return err
}

type NullableDependentFieldFilter struct {
	value *DependentFieldFilter
	isSet bool
}

func (v NullableDependentFieldFilter) Get() *DependentFieldFilter {
	return v.value
}

func (v *NullableDependentFieldFilter) Set(val *DependentFieldFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableDependentFieldFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableDependentFieldFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependentFieldFilter(val *DependentFieldFilter) *NullableDependentFieldFilter {
	return &NullableDependentFieldFilter{value: val, isSet: true}
}

func (v NullableDependentFieldFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependentFieldFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


