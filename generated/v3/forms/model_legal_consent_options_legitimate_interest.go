/*
Forms

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forms

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LegalConsentOptionsLegitimateInterest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegalConsentOptionsLegitimateInterest{}

// LegalConsentOptionsLegitimateInterest struct for LegalConsentOptionsLegitimateInterest
type LegalConsentOptionsLegitimateInterest struct {
	// 
	SubscriptionTypeIds []int64 `json:"subscriptionTypeIds"`
	// 
	LawfulBasis string `json:"lawfulBasis"`
	// 
	Type string `json:"type"`
	// 
	PrivacyText string `json:"privacyText"`
}

type _LegalConsentOptionsLegitimateInterest LegalConsentOptionsLegitimateInterest

// NewLegalConsentOptionsLegitimateInterest instantiates a new LegalConsentOptionsLegitimateInterest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegalConsentOptionsLegitimateInterest(subscriptionTypeIds []int64, lawfulBasis string, type_ string, privacyText string) *LegalConsentOptionsLegitimateInterest {
	this := LegalConsentOptionsLegitimateInterest{}
	this.SubscriptionTypeIds = subscriptionTypeIds
	this.LawfulBasis = lawfulBasis
	this.Type = type_
	this.PrivacyText = privacyText
	return &this
}

// NewLegalConsentOptionsLegitimateInterestWithDefaults instantiates a new LegalConsentOptionsLegitimateInterest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegalConsentOptionsLegitimateInterestWithDefaults() *LegalConsentOptionsLegitimateInterest {
	this := LegalConsentOptionsLegitimateInterest{}
	var type_ string = "legitimate_interest"
	this.Type = type_
	return &this
}

// GetSubscriptionTypeIds returns the SubscriptionTypeIds field value
func (o *LegalConsentOptionsLegitimateInterest) GetSubscriptionTypeIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.SubscriptionTypeIds
}

// GetSubscriptionTypeIdsOk returns a tuple with the SubscriptionTypeIds field value
// and a boolean to check if the value has been set.
func (o *LegalConsentOptionsLegitimateInterest) GetSubscriptionTypeIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscriptionTypeIds, true
}

// SetSubscriptionTypeIds sets field value
func (o *LegalConsentOptionsLegitimateInterest) SetSubscriptionTypeIds(v []int64) {
	o.SubscriptionTypeIds = v
}

// GetLawfulBasis returns the LawfulBasis field value
func (o *LegalConsentOptionsLegitimateInterest) GetLawfulBasis() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LawfulBasis
}

// GetLawfulBasisOk returns a tuple with the LawfulBasis field value
// and a boolean to check if the value has been set.
func (o *LegalConsentOptionsLegitimateInterest) GetLawfulBasisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LawfulBasis, true
}

// SetLawfulBasis sets field value
func (o *LegalConsentOptionsLegitimateInterest) SetLawfulBasis(v string) {
	o.LawfulBasis = v
}

// GetType returns the Type field value
func (o *LegalConsentOptionsLegitimateInterest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LegalConsentOptionsLegitimateInterest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LegalConsentOptionsLegitimateInterest) SetType(v string) {
	o.Type = v
}

// GetPrivacyText returns the PrivacyText field value
func (o *LegalConsentOptionsLegitimateInterest) GetPrivacyText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivacyText
}

// GetPrivacyTextOk returns a tuple with the PrivacyText field value
// and a boolean to check if the value has been set.
func (o *LegalConsentOptionsLegitimateInterest) GetPrivacyTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivacyText, true
}

// SetPrivacyText sets field value
func (o *LegalConsentOptionsLegitimateInterest) SetPrivacyText(v string) {
	o.PrivacyText = v
}

func (o LegalConsentOptionsLegitimateInterest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegalConsentOptionsLegitimateInterest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriptionTypeIds"] = o.SubscriptionTypeIds
	toSerialize["lawfulBasis"] = o.LawfulBasis
	toSerialize["type"] = o.Type
	toSerialize["privacyText"] = o.PrivacyText
	return toSerialize, nil
}

func (o *LegalConsentOptionsLegitimateInterest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscriptionTypeIds",
		"lawfulBasis",
		"type",
		"privacyText",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLegalConsentOptionsLegitimateInterest := _LegalConsentOptionsLegitimateInterest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLegalConsentOptionsLegitimateInterest)

	if err != nil {
		return err
	}

	*o = LegalConsentOptionsLegitimateInterest(varLegalConsentOptionsLegitimateInterest)

	return err
}

type NullableLegalConsentOptionsLegitimateInterest struct {
	value *LegalConsentOptionsLegitimateInterest
	isSet bool
}

func (v NullableLegalConsentOptionsLegitimateInterest) Get() *LegalConsentOptionsLegitimateInterest {
	return v.value
}

func (v *NullableLegalConsentOptionsLegitimateInterest) Set(val *LegalConsentOptionsLegitimateInterest) {
	v.value = val
	v.isSet = true
}

func (v NullableLegalConsentOptionsLegitimateInterest) IsSet() bool {
	return v.isSet
}

func (v *NullableLegalConsentOptionsLegitimateInterest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegalConsentOptionsLegitimateInterest(val *LegalConsentOptionsLegitimateInterest) *NullableLegalConsentOptionsLegitimateInterest {
	return &NullableLegalConsentOptionsLegitimateInterest{value: val, isSet: true}
}

func (v NullableLegalConsentOptionsLegitimateInterest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegalConsentOptionsLegitimateInterest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


