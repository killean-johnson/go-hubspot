/*
Forms

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forms

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FormDisplayOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormDisplayOptions{}

// FormDisplayOptions Options for styling the form.
type FormDisplayOptions struct {
	// Whether the form will render as raw HTML as opposed to inside an iFrame.
	RenderRawHtml bool `json:"renderRawHtml"`
	// 
	CssClass *string `json:"cssClass,omitempty"`
	// The theme used for styling the input fields. This will not apply if the form is added to a HubSpot CMS page.
	Theme string `json:"theme"`
	// The text displayed on the form submit button.
	SubmitButtonText string `json:"submitButtonText"`
	Style FormStyle `json:"style"`
}

type _FormDisplayOptions FormDisplayOptions

// NewFormDisplayOptions instantiates a new FormDisplayOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormDisplayOptions(renderRawHtml bool, theme string, submitButtonText string, style FormStyle) *FormDisplayOptions {
	this := FormDisplayOptions{}
	this.RenderRawHtml = renderRawHtml
	this.Theme = theme
	this.SubmitButtonText = submitButtonText
	this.Style = style
	return &this
}

// NewFormDisplayOptionsWithDefaults instantiates a new FormDisplayOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormDisplayOptionsWithDefaults() *FormDisplayOptions {
	this := FormDisplayOptions{}
	return &this
}

// GetRenderRawHtml returns the RenderRawHtml field value
func (o *FormDisplayOptions) GetRenderRawHtml() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RenderRawHtml
}

// GetRenderRawHtmlOk returns a tuple with the RenderRawHtml field value
// and a boolean to check if the value has been set.
func (o *FormDisplayOptions) GetRenderRawHtmlOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RenderRawHtml, true
}

// SetRenderRawHtml sets field value
func (o *FormDisplayOptions) SetRenderRawHtml(v bool) {
	o.RenderRawHtml = v
}

// GetCssClass returns the CssClass field value if set, zero value otherwise.
func (o *FormDisplayOptions) GetCssClass() string {
	if o == nil || IsNil(o.CssClass) {
		var ret string
		return ret
	}
	return *o.CssClass
}

// GetCssClassOk returns a tuple with the CssClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDisplayOptions) GetCssClassOk() (*string, bool) {
	if o == nil || IsNil(o.CssClass) {
		return nil, false
	}
	return o.CssClass, true
}

// HasCssClass returns a boolean if a field has been set.
func (o *FormDisplayOptions) HasCssClass() bool {
	if o != nil && !IsNil(o.CssClass) {
		return true
	}

	return false
}

// SetCssClass gets a reference to the given string and assigns it to the CssClass field.
func (o *FormDisplayOptions) SetCssClass(v string) {
	o.CssClass = &v
}

// GetTheme returns the Theme field value
func (o *FormDisplayOptions) GetTheme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Theme
}

// GetThemeOk returns a tuple with the Theme field value
// and a boolean to check if the value has been set.
func (o *FormDisplayOptions) GetThemeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Theme, true
}

// SetTheme sets field value
func (o *FormDisplayOptions) SetTheme(v string) {
	o.Theme = v
}

// GetSubmitButtonText returns the SubmitButtonText field value
func (o *FormDisplayOptions) GetSubmitButtonText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubmitButtonText
}

// GetSubmitButtonTextOk returns a tuple with the SubmitButtonText field value
// and a boolean to check if the value has been set.
func (o *FormDisplayOptions) GetSubmitButtonTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubmitButtonText, true
}

// SetSubmitButtonText sets field value
func (o *FormDisplayOptions) SetSubmitButtonText(v string) {
	o.SubmitButtonText = v
}

// GetStyle returns the Style field value
func (o *FormDisplayOptions) GetStyle() FormStyle {
	if o == nil {
		var ret FormStyle
		return ret
	}

	return o.Style
}

// GetStyleOk returns a tuple with the Style field value
// and a boolean to check if the value has been set.
func (o *FormDisplayOptions) GetStyleOk() (*FormStyle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Style, true
}

// SetStyle sets field value
func (o *FormDisplayOptions) SetStyle(v FormStyle) {
	o.Style = v
}

func (o FormDisplayOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormDisplayOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["renderRawHtml"] = o.RenderRawHtml
	if !IsNil(o.CssClass) {
		toSerialize["cssClass"] = o.CssClass
	}
	toSerialize["theme"] = o.Theme
	toSerialize["submitButtonText"] = o.SubmitButtonText
	toSerialize["style"] = o.Style
	return toSerialize, nil
}

func (o *FormDisplayOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"renderRawHtml",
		"theme",
		"submitButtonText",
		"style",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFormDisplayOptions := _FormDisplayOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFormDisplayOptions)

	if err != nil {
		return err
	}

	*o = FormDisplayOptions(varFormDisplayOptions)

	return err
}

type NullableFormDisplayOptions struct {
	value *FormDisplayOptions
	isSet bool
}

func (v NullableFormDisplayOptions) Get() *FormDisplayOptions {
	return v.value
}

func (v *NullableFormDisplayOptions) Set(val *FormDisplayOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableFormDisplayOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableFormDisplayOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormDisplayOptions(val *FormDisplayOptions) *NullableFormDisplayOptions {
	return &NullableFormDisplayOptions{value: val, isSet: true}
}

func (v NullableFormDisplayOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormDisplayOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


