/*
Forms

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forms

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EnumeratedFieldOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnumeratedFieldOption{}

// EnumeratedFieldOption struct for EnumeratedFieldOption
type EnumeratedFieldOption struct {
	// The order the choices will be displayed in.
	DisplayOrder int32 `json:"displayOrder"`
	// 
	Description *string `json:"description,omitempty"`
	// The visible label for this choice.
	Label string `json:"label"`
	// The value which will be submitted if this choice is selected.
	Value string `json:"value"`
}

type _EnumeratedFieldOption EnumeratedFieldOption

// NewEnumeratedFieldOption instantiates a new EnumeratedFieldOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnumeratedFieldOption(displayOrder int32, label string, value string) *EnumeratedFieldOption {
	this := EnumeratedFieldOption{}
	this.DisplayOrder = displayOrder
	this.Label = label
	this.Value = value
	return &this
}

// NewEnumeratedFieldOptionWithDefaults instantiates a new EnumeratedFieldOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnumeratedFieldOptionWithDefaults() *EnumeratedFieldOption {
	this := EnumeratedFieldOption{}
	return &this
}

// GetDisplayOrder returns the DisplayOrder field value
func (o *EnumeratedFieldOption) GetDisplayOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value
// and a boolean to check if the value has been set.
func (o *EnumeratedFieldOption) GetDisplayOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayOrder, true
}

// SetDisplayOrder sets field value
func (o *EnumeratedFieldOption) SetDisplayOrder(v int32) {
	o.DisplayOrder = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EnumeratedFieldOption) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumeratedFieldOption) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EnumeratedFieldOption) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EnumeratedFieldOption) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value
func (o *EnumeratedFieldOption) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *EnumeratedFieldOption) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *EnumeratedFieldOption) SetLabel(v string) {
	o.Label = v
}

// GetValue returns the Value field value
func (o *EnumeratedFieldOption) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *EnumeratedFieldOption) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *EnumeratedFieldOption) SetValue(v string) {
	o.Value = v
}

func (o EnumeratedFieldOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnumeratedFieldOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayOrder"] = o.DisplayOrder
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["label"] = o.Label
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *EnumeratedFieldOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayOrder",
		"label",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnumeratedFieldOption := _EnumeratedFieldOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnumeratedFieldOption)

	if err != nil {
		return err
	}

	*o = EnumeratedFieldOption(varEnumeratedFieldOption)

	return err
}

type NullableEnumeratedFieldOption struct {
	value *EnumeratedFieldOption
	isSet bool
}

func (v NullableEnumeratedFieldOption) Get() *EnumeratedFieldOption {
	return v.value
}

func (v *NullableEnumeratedFieldOption) Set(val *EnumeratedFieldOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumeratedFieldOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumeratedFieldOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumeratedFieldOption(val *EnumeratedFieldOption) *NullableEnumeratedFieldOption {
	return &NullableEnumeratedFieldOption{value: val, isSet: true}
}

func (v NullableEnumeratedFieldOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumeratedFieldOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


