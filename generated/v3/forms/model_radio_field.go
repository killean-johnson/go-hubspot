/*
Forms

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forms

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RadioField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RadioField{}

// RadioField A form field consisting of a set of radio options, out of which one can be selected at a time.
type RadioField struct {
	// A unique ID for this field's CRM object type. For example a CONTACT field will have the object type ID 0-1.
	ObjectTypeId string `json:"objectTypeId"`
	// Whether a field should be hidden or not. Hidden fields won't appear on the form, but can be used to pass a value to a property without requiring the customer to fill it in.
	Hidden bool `json:"hidden"`
	// The identifier of the field. In combination with the object type ID, it must be unique.
	Name string `json:"name"`
	// The list of available choices for this field.
	Options []EnumeratedFieldOption `json:"options"`
	// Additional text helping the customer to complete the field.
	Description *string `json:"description,omitempty"`
	// The values selected by default. Those values will be submitted unless the customer modifies them.
	DefaultValues []string `json:"defaultValues"`
	// A list of other fields to make visible based on the value filled in for this field.
	DependentFields []DependentField `json:"dependentFields"`
	// The main label for the form field.
	Label string `json:"label"`
	// The prompt text showing when the field isn't filled in.
	Placeholder *string `json:"placeholder,omitempty"`
	// Determines how the field will be displayed and validated.
	FieldType string `json:"fieldType"`
	// Whether a value for this field is required when submitting the form.
	Required bool `json:"required"`
}

type _RadioField RadioField

// NewRadioField instantiates a new RadioField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRadioField(objectTypeId string, hidden bool, name string, options []EnumeratedFieldOption, defaultValues []string, dependentFields []DependentField, label string, fieldType string, required bool) *RadioField {
	this := RadioField{}
	this.ObjectTypeId = objectTypeId
	this.Hidden = hidden
	this.Name = name
	this.Options = options
	this.DefaultValues = defaultValues
	this.DependentFields = dependentFields
	this.Label = label
	this.FieldType = fieldType
	this.Required = required
	return &this
}

// NewRadioFieldWithDefaults instantiates a new RadioField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRadioFieldWithDefaults() *RadioField {
	this := RadioField{}
	var fieldType string = "radio"
	this.FieldType = fieldType
	return &this
}

// GetObjectTypeId returns the ObjectTypeId field value
func (o *RadioField) GetObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *RadioField) GetObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectTypeId, true
}

// SetObjectTypeId sets field value
func (o *RadioField) SetObjectTypeId(v string) {
	o.ObjectTypeId = v
}

// GetHidden returns the Hidden field value
func (o *RadioField) GetHidden() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value
// and a boolean to check if the value has been set.
func (o *RadioField) GetHiddenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hidden, true
}

// SetHidden sets field value
func (o *RadioField) SetHidden(v bool) {
	o.Hidden = v
}

// GetName returns the Name field value
func (o *RadioField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RadioField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RadioField) SetName(v string) {
	o.Name = v
}

// GetOptions returns the Options field value
func (o *RadioField) GetOptions() []EnumeratedFieldOption {
	if o == nil {
		var ret []EnumeratedFieldOption
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *RadioField) GetOptionsOk() ([]EnumeratedFieldOption, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *RadioField) SetOptions(v []EnumeratedFieldOption) {
	o.Options = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RadioField) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadioField) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RadioField) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RadioField) SetDescription(v string) {
	o.Description = &v
}

// GetDefaultValues returns the DefaultValues field value
func (o *RadioField) GetDefaultValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DefaultValues
}

// GetDefaultValuesOk returns a tuple with the DefaultValues field value
// and a boolean to check if the value has been set.
func (o *RadioField) GetDefaultValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValues, true
}

// SetDefaultValues sets field value
func (o *RadioField) SetDefaultValues(v []string) {
	o.DefaultValues = v
}

// GetDependentFields returns the DependentFields field value
func (o *RadioField) GetDependentFields() []DependentField {
	if o == nil {
		var ret []DependentField
		return ret
	}

	return o.DependentFields
}

// GetDependentFieldsOk returns a tuple with the DependentFields field value
// and a boolean to check if the value has been set.
func (o *RadioField) GetDependentFieldsOk() ([]DependentField, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependentFields, true
}

// SetDependentFields sets field value
func (o *RadioField) SetDependentFields(v []DependentField) {
	o.DependentFields = v
}

// GetLabel returns the Label field value
func (o *RadioField) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *RadioField) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *RadioField) SetLabel(v string) {
	o.Label = v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *RadioField) GetPlaceholder() string {
	if o == nil || IsNil(o.Placeholder) {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadioField) GetPlaceholderOk() (*string, bool) {
	if o == nil || IsNil(o.Placeholder) {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *RadioField) HasPlaceholder() bool {
	if o != nil && !IsNil(o.Placeholder) {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *RadioField) SetPlaceholder(v string) {
	o.Placeholder = &v
}

// GetFieldType returns the FieldType field value
func (o *RadioField) GetFieldType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value
// and a boolean to check if the value has been set.
func (o *RadioField) GetFieldTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldType, true
}

// SetFieldType sets field value
func (o *RadioField) SetFieldType(v string) {
	o.FieldType = v
}

// GetRequired returns the Required field value
func (o *RadioField) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *RadioField) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *RadioField) SetRequired(v bool) {
	o.Required = v
}

func (o RadioField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RadioField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["objectTypeId"] = o.ObjectTypeId
	toSerialize["hidden"] = o.Hidden
	toSerialize["name"] = o.Name
	toSerialize["options"] = o.Options
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["defaultValues"] = o.DefaultValues
	toSerialize["dependentFields"] = o.DependentFields
	toSerialize["label"] = o.Label
	if !IsNil(o.Placeholder) {
		toSerialize["placeholder"] = o.Placeholder
	}
	toSerialize["fieldType"] = o.FieldType
	toSerialize["required"] = o.Required
	return toSerialize, nil
}

func (o *RadioField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectTypeId",
		"hidden",
		"name",
		"options",
		"defaultValues",
		"dependentFields",
		"label",
		"fieldType",
		"required",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRadioField := _RadioField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRadioField)

	if err != nil {
		return err
	}

	*o = RadioField(varRadioField)

	return err
}

type NullableRadioField struct {
	value *RadioField
	isSet bool
}

func (v NullableRadioField) Get() *RadioField {
	return v.value
}

func (v *NullableRadioField) Set(val *RadioField) {
	v.value = val
	v.isSet = true
}

func (v NullableRadioField) IsSet() bool {
	return v.isSet
}

func (v *NullableRadioField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRadioField(val *RadioField) *NullableRadioField {
	return &NullableRadioField{value: val, isSet: true}
}

func (v NullableRadioField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRadioField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


