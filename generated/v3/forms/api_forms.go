/*
Forms

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forms

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
	"reflect"
)


// FormsAPIService FormsAPI service
type FormsAPIService service

type ApiDeleteMarketingV3FormsFormIdArchiveRequest struct {
	ctx context.Context
	ApiService *FormsAPIService
	formId string
}

func (r ApiDeleteMarketingV3FormsFormIdArchiveRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingV3FormsFormIdArchiveExecute(r)
}

/*
DeleteMarketingV3FormsFormIdArchive Archive a form definition

Archive a form definition. New submissions will not be accepted and the form definition will be permanently deleted after 3 months.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param formId The ID of the form to archive.
 @return ApiDeleteMarketingV3FormsFormIdArchiveRequest
*/
func (a *FormsAPIService) DeleteMarketingV3FormsFormIdArchive(ctx context.Context, formId string) ApiDeleteMarketingV3FormsFormIdArchiveRequest {
	return ApiDeleteMarketingV3FormsFormIdArchiveRequest{
		ApiService: a,
		ctx: ctx,
		formId: formId,
	}
}

// Execute executes the request
func (a *FormsAPIService) DeleteMarketingV3FormsFormIdArchiveExecute(r ApiDeleteMarketingV3FormsFormIdArchiveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FormsAPIService.DeleteMarketingV3FormsFormIdArchive")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/forms/{formId}"
	localVarPath = strings.Replace(localVarPath, "{"+"formId"+"}", url.PathEscape(parameterValueToString(r.formId, "formId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingV3FormsFormIdGetByIdRequest struct {
	ctx context.Context
	ApiService *FormsAPIService
	formId string
	archived *bool
}

// Whether to return only results that have been archived.
func (r ApiGetMarketingV3FormsFormIdGetByIdRequest) Archived(archived bool) ApiGetMarketingV3FormsFormIdGetByIdRequest {
	r.archived = &archived
	return r
}

func (r ApiGetMarketingV3FormsFormIdGetByIdRequest) Execute() (*FormDefinitionBase, *http.Response, error) {
	return r.ApiService.GetMarketingV3FormsFormIdGetByIdExecute(r)
}

/*
GetMarketingV3FormsFormIdGetById Get a form definition

Returns a form based on the form ID provided.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param formId The unique identifier of the form
 @return ApiGetMarketingV3FormsFormIdGetByIdRequest
*/
func (a *FormsAPIService) GetMarketingV3FormsFormIdGetById(ctx context.Context, formId string) ApiGetMarketingV3FormsFormIdGetByIdRequest {
	return ApiGetMarketingV3FormsFormIdGetByIdRequest{
		ApiService: a,
		ctx: ctx,
		formId: formId,
	}
}

// Execute executes the request
//  @return FormDefinitionBase
func (a *FormsAPIService) GetMarketingV3FormsFormIdGetByIdExecute(r ApiGetMarketingV3FormsFormIdGetByIdRequest) (*FormDefinitionBase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FormDefinitionBase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FormsAPIService.GetMarketingV3FormsFormIdGetById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/forms/{formId}"
	localVarPath = strings.Replace(localVarPath, "{"+"formId"+"}", url.PathEscape(parameterValueToString(r.formId, "formId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3FormsGetPageRequest struct {
	ctx context.Context
	ApiService *FormsAPIService
	after *string
	limit *int32
	archived *bool
	formTypes *[]string
}

// The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetMarketingV3FormsGetPageRequest) After(after string) ApiGetMarketingV3FormsGetPageRequest {
	r.after = &after
	return r
}

// The maximum number of results to display per page.
func (r ApiGetMarketingV3FormsGetPageRequest) Limit(limit int32) ApiGetMarketingV3FormsGetPageRequest {
	r.limit = &limit
	return r
}

// Whether to return only results that have been archived.
func (r ApiGetMarketingV3FormsGetPageRequest) Archived(archived bool) ApiGetMarketingV3FormsGetPageRequest {
	r.archived = &archived
	return r
}

// The form types to be included in the results.
func (r ApiGetMarketingV3FormsGetPageRequest) FormTypes(formTypes []string) ApiGetMarketingV3FormsGetPageRequest {
	r.formTypes = &formTypes
	return r
}

func (r ApiGetMarketingV3FormsGetPageRequest) Execute() (*CollectionResponseFormDefinitionBaseForwardPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3FormsGetPageExecute(r)
}

/*
GetMarketingV3FormsGetPage Get a list of forms

Returns a list of forms based on the search filters. By default, it returns the first 20 `hubspot` forms

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingV3FormsGetPageRequest
*/
func (a *FormsAPIService) GetMarketingV3FormsGetPage(ctx context.Context) ApiGetMarketingV3FormsGetPageRequest {
	return ApiGetMarketingV3FormsGetPageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseFormDefinitionBaseForwardPaging
func (a *FormsAPIService) GetMarketingV3FormsGetPageExecute(r ApiGetMarketingV3FormsGetPageRequest) (*CollectionResponseFormDefinitionBaseForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseFormDefinitionBaseForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FormsAPIService.GetMarketingV3FormsGetPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/forms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	if r.formTypes != nil {
		t := *r.formTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "formTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "formTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingV3FormsFormIdUpdateRequest struct {
	ctx context.Context
	ApiService *FormsAPIService
	formId string
	hubSpotFormDefinitionPatchRequest *HubSpotFormDefinitionPatchRequest
}

func (r ApiPatchMarketingV3FormsFormIdUpdateRequest) HubSpotFormDefinitionPatchRequest(hubSpotFormDefinitionPatchRequest HubSpotFormDefinitionPatchRequest) ApiPatchMarketingV3FormsFormIdUpdateRequest {
	r.hubSpotFormDefinitionPatchRequest = &hubSpotFormDefinitionPatchRequest
	return r
}

func (r ApiPatchMarketingV3FormsFormIdUpdateRequest) Execute() (*FormDefinitionBase, *http.Response, error) {
	return r.ApiService.PatchMarketingV3FormsFormIdUpdateExecute(r)
}

/*
PatchMarketingV3FormsFormIdUpdate Partially update a form definition

Update some of the form definition components

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param formId The ID of the form to update.
 @return ApiPatchMarketingV3FormsFormIdUpdateRequest
*/
func (a *FormsAPIService) PatchMarketingV3FormsFormIdUpdate(ctx context.Context, formId string) ApiPatchMarketingV3FormsFormIdUpdateRequest {
	return ApiPatchMarketingV3FormsFormIdUpdateRequest{
		ApiService: a,
		ctx: ctx,
		formId: formId,
	}
}

// Execute executes the request
//  @return FormDefinitionBase
func (a *FormsAPIService) PatchMarketingV3FormsFormIdUpdateExecute(r ApiPatchMarketingV3FormsFormIdUpdateRequest) (*FormDefinitionBase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FormDefinitionBase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FormsAPIService.PatchMarketingV3FormsFormIdUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/forms/{formId}"
	localVarPath = strings.Replace(localVarPath, "{"+"formId"+"}", url.PathEscape(parameterValueToString(r.formId, "formId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hubSpotFormDefinitionPatchRequest == nil {
		return localVarReturnValue, nil, reportError("hubSpotFormDefinitionPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hubSpotFormDefinitionPatchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3FormsCreateRequest struct {
	ctx context.Context
	ApiService *FormsAPIService
	formDefinitionCreateRequestBase *FormDefinitionCreateRequestBase
}

func (r ApiPostMarketingV3FormsCreateRequest) FormDefinitionCreateRequestBase(formDefinitionCreateRequestBase FormDefinitionCreateRequestBase) ApiPostMarketingV3FormsCreateRequest {
	r.formDefinitionCreateRequestBase = &formDefinitionCreateRequestBase
	return r
}

func (r ApiPostMarketingV3FormsCreateRequest) Execute() (*FormDefinitionBase, *http.Response, error) {
	return r.ApiService.PostMarketingV3FormsCreateExecute(r)
}

/*
PostMarketingV3FormsCreate Create a form

Add a new `hubspot` form

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3FormsCreateRequest
*/
func (a *FormsAPIService) PostMarketingV3FormsCreate(ctx context.Context) ApiPostMarketingV3FormsCreateRequest {
	return ApiPostMarketingV3FormsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FormDefinitionBase
func (a *FormsAPIService) PostMarketingV3FormsCreateExecute(r ApiPostMarketingV3FormsCreateRequest) (*FormDefinitionBase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FormDefinitionBase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FormsAPIService.PostMarketingV3FormsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/forms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.formDefinitionCreateRequestBase == nil {
		return localVarReturnValue, nil, reportError("formDefinitionCreateRequestBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.formDefinitionCreateRequestBase
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingV3FormsFormIdReplaceRequest struct {
	ctx context.Context
	ApiService *FormsAPIService
	formId string
	hubSpotFormDefinition *HubSpotFormDefinition
}

func (r ApiPutMarketingV3FormsFormIdReplaceRequest) HubSpotFormDefinition(hubSpotFormDefinition HubSpotFormDefinition) ApiPutMarketingV3FormsFormIdReplaceRequest {
	r.hubSpotFormDefinition = &hubSpotFormDefinition
	return r
}

func (r ApiPutMarketingV3FormsFormIdReplaceRequest) Execute() (*FormDefinitionBase, *http.Response, error) {
	return r.ApiService.PutMarketingV3FormsFormIdReplaceExecute(r)
}

/*
PutMarketingV3FormsFormIdReplace Update a form definition

Update all fields of a hubspot form definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param formId
 @return ApiPutMarketingV3FormsFormIdReplaceRequest
*/
func (a *FormsAPIService) PutMarketingV3FormsFormIdReplace(ctx context.Context, formId string) ApiPutMarketingV3FormsFormIdReplaceRequest {
	return ApiPutMarketingV3FormsFormIdReplaceRequest{
		ApiService: a,
		ctx: ctx,
		formId: formId,
	}
}

// Execute executes the request
//  @return FormDefinitionBase
func (a *FormsAPIService) PutMarketingV3FormsFormIdReplaceExecute(r ApiPutMarketingV3FormsFormIdReplaceRequest) (*FormDefinitionBase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FormDefinitionBase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FormsAPIService.PutMarketingV3FormsFormIdReplace")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/forms/{formId}"
	localVarPath = strings.Replace(localVarPath, "{"+"formId"+"}", url.PathEscape(parameterValueToString(r.formId, "formId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hubSpotFormDefinition == nil {
		return localVarReturnValue, nil, reportError("hubSpotFormDefinition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hubSpotFormDefinition
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
