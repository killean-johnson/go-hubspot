/*
Forms

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forms

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LegalConsentOptionsImplicitConsentToProcess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegalConsentOptionsImplicitConsentToProcess{}

// LegalConsentOptionsImplicitConsentToProcess struct for LegalConsentOptionsImplicitConsentToProcess
type LegalConsentOptionsImplicitConsentToProcess struct {
	// 
	CommunicationsCheckboxes []LegalConsentCheckbox `json:"communicationsCheckboxes"`
	// 
	CommunicationConsentText *string `json:"communicationConsentText,omitempty"`
	// 
	Type string `json:"type"`
	// 
	PrivacyText string `json:"privacyText"`
	// 
	ConsentToProcessText *string `json:"consentToProcessText,omitempty"`
}

type _LegalConsentOptionsImplicitConsentToProcess LegalConsentOptionsImplicitConsentToProcess

// NewLegalConsentOptionsImplicitConsentToProcess instantiates a new LegalConsentOptionsImplicitConsentToProcess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegalConsentOptionsImplicitConsentToProcess(communicationsCheckboxes []LegalConsentCheckbox, type_ string, privacyText string) *LegalConsentOptionsImplicitConsentToProcess {
	this := LegalConsentOptionsImplicitConsentToProcess{}
	this.CommunicationsCheckboxes = communicationsCheckboxes
	this.Type = type_
	this.PrivacyText = privacyText
	return &this
}

// NewLegalConsentOptionsImplicitConsentToProcessWithDefaults instantiates a new LegalConsentOptionsImplicitConsentToProcess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegalConsentOptionsImplicitConsentToProcessWithDefaults() *LegalConsentOptionsImplicitConsentToProcess {
	this := LegalConsentOptionsImplicitConsentToProcess{}
	var type_ string = "implicit_consent_to_process"
	this.Type = type_
	return &this
}

// GetCommunicationsCheckboxes returns the CommunicationsCheckboxes field value
func (o *LegalConsentOptionsImplicitConsentToProcess) GetCommunicationsCheckboxes() []LegalConsentCheckbox {
	if o == nil {
		var ret []LegalConsentCheckbox
		return ret
	}

	return o.CommunicationsCheckboxes
}

// GetCommunicationsCheckboxesOk returns a tuple with the CommunicationsCheckboxes field value
// and a boolean to check if the value has been set.
func (o *LegalConsentOptionsImplicitConsentToProcess) GetCommunicationsCheckboxesOk() ([]LegalConsentCheckbox, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommunicationsCheckboxes, true
}

// SetCommunicationsCheckboxes sets field value
func (o *LegalConsentOptionsImplicitConsentToProcess) SetCommunicationsCheckboxes(v []LegalConsentCheckbox) {
	o.CommunicationsCheckboxes = v
}

// GetCommunicationConsentText returns the CommunicationConsentText field value if set, zero value otherwise.
func (o *LegalConsentOptionsImplicitConsentToProcess) GetCommunicationConsentText() string {
	if o == nil || IsNil(o.CommunicationConsentText) {
		var ret string
		return ret
	}
	return *o.CommunicationConsentText
}

// GetCommunicationConsentTextOk returns a tuple with the CommunicationConsentText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalConsentOptionsImplicitConsentToProcess) GetCommunicationConsentTextOk() (*string, bool) {
	if o == nil || IsNil(o.CommunicationConsentText) {
		return nil, false
	}
	return o.CommunicationConsentText, true
}

// HasCommunicationConsentText returns a boolean if a field has been set.
func (o *LegalConsentOptionsImplicitConsentToProcess) HasCommunicationConsentText() bool {
	if o != nil && !IsNil(o.CommunicationConsentText) {
		return true
	}

	return false
}

// SetCommunicationConsentText gets a reference to the given string and assigns it to the CommunicationConsentText field.
func (o *LegalConsentOptionsImplicitConsentToProcess) SetCommunicationConsentText(v string) {
	o.CommunicationConsentText = &v
}

// GetType returns the Type field value
func (o *LegalConsentOptionsImplicitConsentToProcess) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LegalConsentOptionsImplicitConsentToProcess) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LegalConsentOptionsImplicitConsentToProcess) SetType(v string) {
	o.Type = v
}

// GetPrivacyText returns the PrivacyText field value
func (o *LegalConsentOptionsImplicitConsentToProcess) GetPrivacyText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivacyText
}

// GetPrivacyTextOk returns a tuple with the PrivacyText field value
// and a boolean to check if the value has been set.
func (o *LegalConsentOptionsImplicitConsentToProcess) GetPrivacyTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivacyText, true
}

// SetPrivacyText sets field value
func (o *LegalConsentOptionsImplicitConsentToProcess) SetPrivacyText(v string) {
	o.PrivacyText = v
}

// GetConsentToProcessText returns the ConsentToProcessText field value if set, zero value otherwise.
func (o *LegalConsentOptionsImplicitConsentToProcess) GetConsentToProcessText() string {
	if o == nil || IsNil(o.ConsentToProcessText) {
		var ret string
		return ret
	}
	return *o.ConsentToProcessText
}

// GetConsentToProcessTextOk returns a tuple with the ConsentToProcessText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalConsentOptionsImplicitConsentToProcess) GetConsentToProcessTextOk() (*string, bool) {
	if o == nil || IsNil(o.ConsentToProcessText) {
		return nil, false
	}
	return o.ConsentToProcessText, true
}

// HasConsentToProcessText returns a boolean if a field has been set.
func (o *LegalConsentOptionsImplicitConsentToProcess) HasConsentToProcessText() bool {
	if o != nil && !IsNil(o.ConsentToProcessText) {
		return true
	}

	return false
}

// SetConsentToProcessText gets a reference to the given string and assigns it to the ConsentToProcessText field.
func (o *LegalConsentOptionsImplicitConsentToProcess) SetConsentToProcessText(v string) {
	o.ConsentToProcessText = &v
}

func (o LegalConsentOptionsImplicitConsentToProcess) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegalConsentOptionsImplicitConsentToProcess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["communicationsCheckboxes"] = o.CommunicationsCheckboxes
	if !IsNil(o.CommunicationConsentText) {
		toSerialize["communicationConsentText"] = o.CommunicationConsentText
	}
	toSerialize["type"] = o.Type
	toSerialize["privacyText"] = o.PrivacyText
	if !IsNil(o.ConsentToProcessText) {
		toSerialize["consentToProcessText"] = o.ConsentToProcessText
	}
	return toSerialize, nil
}

func (o *LegalConsentOptionsImplicitConsentToProcess) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"communicationsCheckboxes",
		"type",
		"privacyText",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLegalConsentOptionsImplicitConsentToProcess := _LegalConsentOptionsImplicitConsentToProcess{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLegalConsentOptionsImplicitConsentToProcess)

	if err != nil {
		return err
	}

	*o = LegalConsentOptionsImplicitConsentToProcess(varLegalConsentOptionsImplicitConsentToProcess)

	return err
}

type NullableLegalConsentOptionsImplicitConsentToProcess struct {
	value *LegalConsentOptionsImplicitConsentToProcess
	isSet bool
}

func (v NullableLegalConsentOptionsImplicitConsentToProcess) Get() *LegalConsentOptionsImplicitConsentToProcess {
	return v.value
}

func (v *NullableLegalConsentOptionsImplicitConsentToProcess) Set(val *LegalConsentOptionsImplicitConsentToProcess) {
	v.value = val
	v.isSet = true
}

func (v NullableLegalConsentOptionsImplicitConsentToProcess) IsSet() bool {
	return v.isSet
}

func (v *NullableLegalConsentOptionsImplicitConsentToProcess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegalConsentOptionsImplicitConsentToProcess(val *LegalConsentOptionsImplicitConsentToProcess) *NullableLegalConsentOptionsImplicitConsentToProcess {
	return &NullableLegalConsentOptionsImplicitConsentToProcess{value: val, isSet: true}
}

func (v NullableLegalConsentOptionsImplicitConsentToProcess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegalConsentOptionsImplicitConsentToProcess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


