/*
Conversations Visitor Identification

The Visitor Identification API allows you to pass identification information to the HubSpot chat widget for otherwise unknown visitors that were verified by your own authentication system.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package visitor_identification

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IdentificationTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentificationTokenResponse{}

// IdentificationTokenResponse The identification token to be passed to the Conversations JS API to identify the visitor
type IdentificationTokenResponse struct {
	// 
	Token string `json:"token"`
}

type _IdentificationTokenResponse IdentificationTokenResponse

// NewIdentificationTokenResponse instantiates a new IdentificationTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentificationTokenResponse(token string) *IdentificationTokenResponse {
	this := IdentificationTokenResponse{}
	this.Token = token
	return &this
}

// NewIdentificationTokenResponseWithDefaults instantiates a new IdentificationTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentificationTokenResponseWithDefaults() *IdentificationTokenResponse {
	this := IdentificationTokenResponse{}
	return &this
}

// GetToken returns the Token field value
func (o *IdentificationTokenResponse) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *IdentificationTokenResponse) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *IdentificationTokenResponse) SetToken(v string) {
	o.Token = v
}

func (o IdentificationTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentificationTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

func (o *IdentificationTokenResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentificationTokenResponse := _IdentificationTokenResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdentificationTokenResponse)

	if err != nil {
		return err
	}

	*o = IdentificationTokenResponse(varIdentificationTokenResponse)

	return err
}

type NullableIdentificationTokenResponse struct {
	value *IdentificationTokenResponse
	isSet bool
}

func (v NullableIdentificationTokenResponse) Get() *IdentificationTokenResponse {
	return v.value
}

func (v *NullableIdentificationTokenResponse) Set(val *IdentificationTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentificationTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentificationTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentificationTokenResponse(val *IdentificationTokenResponse) *NullableIdentificationTokenResponse {
	return &NullableIdentificationTokenResponse{value: val, isSet: true}
}

func (v NullableIdentificationTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentificationTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


