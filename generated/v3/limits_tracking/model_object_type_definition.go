/*
Limits Tracking

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package limits_tracking

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectTypeDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectTypeDefinition{}

// ObjectTypeDefinition struct for ObjectTypeDefinition
type ObjectTypeDefinition struct {
	ObjectTypeId string `json:"objectTypeId"`
	PluralLabel string `json:"pluralLabel"`
	SingularLabel string `json:"singularLabel"`
}

type _ObjectTypeDefinition ObjectTypeDefinition

// NewObjectTypeDefinition instantiates a new ObjectTypeDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectTypeDefinition(objectTypeId string, pluralLabel string, singularLabel string) *ObjectTypeDefinition {
	this := ObjectTypeDefinition{}
	this.ObjectTypeId = objectTypeId
	this.PluralLabel = pluralLabel
	this.SingularLabel = singularLabel
	return &this
}

// NewObjectTypeDefinitionWithDefaults instantiates a new ObjectTypeDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectTypeDefinitionWithDefaults() *ObjectTypeDefinition {
	this := ObjectTypeDefinition{}
	return &this
}

// GetObjectTypeId returns the ObjectTypeId field value
func (o *ObjectTypeDefinition) GetObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectTypeId, true
}

// SetObjectTypeId sets field value
func (o *ObjectTypeDefinition) SetObjectTypeId(v string) {
	o.ObjectTypeId = v
}

// GetPluralLabel returns the PluralLabel field value
func (o *ObjectTypeDefinition) GetPluralLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PluralLabel
}

// GetPluralLabelOk returns a tuple with the PluralLabel field value
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetPluralLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PluralLabel, true
}

// SetPluralLabel sets field value
func (o *ObjectTypeDefinition) SetPluralLabel(v string) {
	o.PluralLabel = v
}

// GetSingularLabel returns the SingularLabel field value
func (o *ObjectTypeDefinition) GetSingularLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SingularLabel
}

// GetSingularLabelOk returns a tuple with the SingularLabel field value
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetSingularLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SingularLabel, true
}

// SetSingularLabel sets field value
func (o *ObjectTypeDefinition) SetSingularLabel(v string) {
	o.SingularLabel = v
}

func (o ObjectTypeDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectTypeDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["objectTypeId"] = o.ObjectTypeId
	toSerialize["pluralLabel"] = o.PluralLabel
	toSerialize["singularLabel"] = o.SingularLabel
	return toSerialize, nil
}

func (o *ObjectTypeDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectTypeId",
		"pluralLabel",
		"singularLabel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectTypeDefinition := _ObjectTypeDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectTypeDefinition)

	if err != nil {
		return err
	}

	*o = ObjectTypeDefinition(varObjectTypeDefinition)

	return err
}

type NullableObjectTypeDefinition struct {
	value *ObjectTypeDefinition
	isSet bool
}

func (v NullableObjectTypeDefinition) Get() *ObjectTypeDefinition {
	return v.value
}

func (v *NullableObjectTypeDefinition) Set(val *ObjectTypeDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectTypeDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectTypeDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectTypeDefinition(val *ObjectTypeDefinition) *NullableObjectTypeDefinition {
	return &NullableObjectTypeDefinition{value: val, isSet: true}
}

func (v NullableObjectTypeDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectTypeDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


