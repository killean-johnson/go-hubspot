/*
Limits Tracking

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package limits_tracking

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UsageForObjectType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageForObjectType{}

// UsageForObjectType struct for UsageForObjectType
type UsageForObjectType struct {
	ObjectTypeId string `json:"objectTypeId"`
	Usage int32 `json:"usage"`
	PluralLabel string `json:"pluralLabel"`
	SingularLabel string `json:"singularLabel"`
}

type _UsageForObjectType UsageForObjectType

// NewUsageForObjectType instantiates a new UsageForObjectType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageForObjectType(objectTypeId string, usage int32, pluralLabel string, singularLabel string) *UsageForObjectType {
	this := UsageForObjectType{}
	this.ObjectTypeId = objectTypeId
	this.Usage = usage
	this.PluralLabel = pluralLabel
	this.SingularLabel = singularLabel
	return &this
}

// NewUsageForObjectTypeWithDefaults instantiates a new UsageForObjectType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageForObjectTypeWithDefaults() *UsageForObjectType {
	this := UsageForObjectType{}
	return &this
}

// GetObjectTypeId returns the ObjectTypeId field value
func (o *UsageForObjectType) GetObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *UsageForObjectType) GetObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectTypeId, true
}

// SetObjectTypeId sets field value
func (o *UsageForObjectType) SetObjectTypeId(v string) {
	o.ObjectTypeId = v
}

// GetUsage returns the Usage field value
func (o *UsageForObjectType) GetUsage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *UsageForObjectType) GetUsageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usage, true
}

// SetUsage sets field value
func (o *UsageForObjectType) SetUsage(v int32) {
	o.Usage = v
}

// GetPluralLabel returns the PluralLabel field value
func (o *UsageForObjectType) GetPluralLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PluralLabel
}

// GetPluralLabelOk returns a tuple with the PluralLabel field value
// and a boolean to check if the value has been set.
func (o *UsageForObjectType) GetPluralLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PluralLabel, true
}

// SetPluralLabel sets field value
func (o *UsageForObjectType) SetPluralLabel(v string) {
	o.PluralLabel = v
}

// GetSingularLabel returns the SingularLabel field value
func (o *UsageForObjectType) GetSingularLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SingularLabel
}

// GetSingularLabelOk returns a tuple with the SingularLabel field value
// and a boolean to check if the value has been set.
func (o *UsageForObjectType) GetSingularLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SingularLabel, true
}

// SetSingularLabel sets field value
func (o *UsageForObjectType) SetSingularLabel(v string) {
	o.SingularLabel = v
}

func (o UsageForObjectType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageForObjectType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["objectTypeId"] = o.ObjectTypeId
	toSerialize["usage"] = o.Usage
	toSerialize["pluralLabel"] = o.PluralLabel
	toSerialize["singularLabel"] = o.SingularLabel
	return toSerialize, nil
}

func (o *UsageForObjectType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectTypeId",
		"usage",
		"pluralLabel",
		"singularLabel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsageForObjectType := _UsageForObjectType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsageForObjectType)

	if err != nil {
		return err
	}

	*o = UsageForObjectType(varUsageForObjectType)

	return err
}

type NullableUsageForObjectType struct {
	value *UsageForObjectType
	isSet bool
}

func (v NullableUsageForObjectType) Get() *UsageForObjectType {
	return v.value
}

func (v *NullableUsageForObjectType) Set(val *UsageForObjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageForObjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageForObjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageForObjectType(val *UsageForObjectType) *NullableUsageForObjectType {
	return &NullableUsageForObjectType{value: val, isSet: true}
}

func (v NullableUsageForObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageForObjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


