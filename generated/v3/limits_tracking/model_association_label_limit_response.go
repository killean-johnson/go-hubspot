/*
Limits Tracking

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package limits_tracking

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssociationLabelLimitResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssociationLabelLimitResponse{}

// AssociationLabelLimitResponse struct for AssociationLabelLimitResponse
type AssociationLabelLimitResponse struct {
	AllLabels []string `json:"allLabels"`
	FromObjectType ObjectTypeDefinition `json:"fromObjectType"`
	ToObjectType ObjectTypeDefinition `json:"toObjectType"`
	Usage int32 `json:"usage"`
	Percentage float32 `json:"percentage"`
	Limit int32 `json:"limit"`
}

type _AssociationLabelLimitResponse AssociationLabelLimitResponse

// NewAssociationLabelLimitResponse instantiates a new AssociationLabelLimitResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociationLabelLimitResponse(allLabels []string, fromObjectType ObjectTypeDefinition, toObjectType ObjectTypeDefinition, usage int32, percentage float32, limit int32) *AssociationLabelLimitResponse {
	this := AssociationLabelLimitResponse{}
	this.AllLabels = allLabels
	this.FromObjectType = fromObjectType
	this.ToObjectType = toObjectType
	this.Usage = usage
	this.Percentage = percentage
	this.Limit = limit
	return &this
}

// NewAssociationLabelLimitResponseWithDefaults instantiates a new AssociationLabelLimitResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociationLabelLimitResponseWithDefaults() *AssociationLabelLimitResponse {
	this := AssociationLabelLimitResponse{}
	return &this
}

// GetAllLabels returns the AllLabels field value
func (o *AssociationLabelLimitResponse) GetAllLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllLabels
}

// GetAllLabelsOk returns a tuple with the AllLabels field value
// and a boolean to check if the value has been set.
func (o *AssociationLabelLimitResponse) GetAllLabelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllLabels, true
}

// SetAllLabels sets field value
func (o *AssociationLabelLimitResponse) SetAllLabels(v []string) {
	o.AllLabels = v
}

// GetFromObjectType returns the FromObjectType field value
func (o *AssociationLabelLimitResponse) GetFromObjectType() ObjectTypeDefinition {
	if o == nil {
		var ret ObjectTypeDefinition
		return ret
	}

	return o.FromObjectType
}

// GetFromObjectTypeOk returns a tuple with the FromObjectType field value
// and a boolean to check if the value has been set.
func (o *AssociationLabelLimitResponse) GetFromObjectTypeOk() (*ObjectTypeDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromObjectType, true
}

// SetFromObjectType sets field value
func (o *AssociationLabelLimitResponse) SetFromObjectType(v ObjectTypeDefinition) {
	o.FromObjectType = v
}

// GetToObjectType returns the ToObjectType field value
func (o *AssociationLabelLimitResponse) GetToObjectType() ObjectTypeDefinition {
	if o == nil {
		var ret ObjectTypeDefinition
		return ret
	}

	return o.ToObjectType
}

// GetToObjectTypeOk returns a tuple with the ToObjectType field value
// and a boolean to check if the value has been set.
func (o *AssociationLabelLimitResponse) GetToObjectTypeOk() (*ObjectTypeDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToObjectType, true
}

// SetToObjectType sets field value
func (o *AssociationLabelLimitResponse) SetToObjectType(v ObjectTypeDefinition) {
	o.ToObjectType = v
}

// GetUsage returns the Usage field value
func (o *AssociationLabelLimitResponse) GetUsage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *AssociationLabelLimitResponse) GetUsageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usage, true
}

// SetUsage sets field value
func (o *AssociationLabelLimitResponse) SetUsage(v int32) {
	o.Usage = v
}

// GetPercentage returns the Percentage field value
func (o *AssociationLabelLimitResponse) GetPercentage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value
// and a boolean to check if the value has been set.
func (o *AssociationLabelLimitResponse) GetPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentage, true
}

// SetPercentage sets field value
func (o *AssociationLabelLimitResponse) SetPercentage(v float32) {
	o.Percentage = v
}

// GetLimit returns the Limit field value
func (o *AssociationLabelLimitResponse) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *AssociationLabelLimitResponse) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *AssociationLabelLimitResponse) SetLimit(v int32) {
	o.Limit = v
}

func (o AssociationLabelLimitResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssociationLabelLimitResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allLabels"] = o.AllLabels
	toSerialize["fromObjectType"] = o.FromObjectType
	toSerialize["toObjectType"] = o.ToObjectType
	toSerialize["usage"] = o.Usage
	toSerialize["percentage"] = o.Percentage
	toSerialize["limit"] = o.Limit
	return toSerialize, nil
}

func (o *AssociationLabelLimitResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allLabels",
		"fromObjectType",
		"toObjectType",
		"usage",
		"percentage",
		"limit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssociationLabelLimitResponse := _AssociationLabelLimitResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssociationLabelLimitResponse)

	if err != nil {
		return err
	}

	*o = AssociationLabelLimitResponse(varAssociationLabelLimitResponse)

	return err
}

type NullableAssociationLabelLimitResponse struct {
	value *AssociationLabelLimitResponse
	isSet bool
}

func (v NullableAssociationLabelLimitResponse) Get() *AssociationLabelLimitResponse {
	return v.value
}

func (v *NullableAssociationLabelLimitResponse) Set(val *AssociationLabelLimitResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociationLabelLimitResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociationLabelLimitResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociationLabelLimitResponse(val *AssociationLabelLimitResponse) *NullableAssociationLabelLimitResponse {
	return &NullableAssociationLabelLimitResponse{value: val, isSet: true}
}

func (v NullableAssociationLabelLimitResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociationLabelLimitResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


