/*
Limits Tracking

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package limits_tracking

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssociationRecordLimitResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssociationRecordLimitResponse{}

// AssociationRecordLimitResponse struct for AssociationRecordLimitResponse
type AssociationRecordLimitResponse struct {
	TotalRecordsAtLimit int32 `json:"totalRecordsAtLimit"`
	AtLimitFromRecordSamples []AtLimitRecordSample `json:"atLimitFromRecordSamples"`
	TotalRecordsNearLimit int32 `json:"totalRecordsNearLimit"`
	Limit int64 `json:"limit"`
	NearLimitFromRecordSamples []NearLimitRecordSample `json:"nearLimitFromRecordSamples"`
}

type _AssociationRecordLimitResponse AssociationRecordLimitResponse

// NewAssociationRecordLimitResponse instantiates a new AssociationRecordLimitResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociationRecordLimitResponse(totalRecordsAtLimit int32, atLimitFromRecordSamples []AtLimitRecordSample, totalRecordsNearLimit int32, limit int64, nearLimitFromRecordSamples []NearLimitRecordSample) *AssociationRecordLimitResponse {
	this := AssociationRecordLimitResponse{}
	this.TotalRecordsAtLimit = totalRecordsAtLimit
	this.AtLimitFromRecordSamples = atLimitFromRecordSamples
	this.TotalRecordsNearLimit = totalRecordsNearLimit
	this.Limit = limit
	this.NearLimitFromRecordSamples = nearLimitFromRecordSamples
	return &this
}

// NewAssociationRecordLimitResponseWithDefaults instantiates a new AssociationRecordLimitResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociationRecordLimitResponseWithDefaults() *AssociationRecordLimitResponse {
	this := AssociationRecordLimitResponse{}
	return &this
}

// GetTotalRecordsAtLimit returns the TotalRecordsAtLimit field value
func (o *AssociationRecordLimitResponse) GetTotalRecordsAtLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalRecordsAtLimit
}

// GetTotalRecordsAtLimitOk returns a tuple with the TotalRecordsAtLimit field value
// and a boolean to check if the value has been set.
func (o *AssociationRecordLimitResponse) GetTotalRecordsAtLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalRecordsAtLimit, true
}

// SetTotalRecordsAtLimit sets field value
func (o *AssociationRecordLimitResponse) SetTotalRecordsAtLimit(v int32) {
	o.TotalRecordsAtLimit = v
}

// GetAtLimitFromRecordSamples returns the AtLimitFromRecordSamples field value
func (o *AssociationRecordLimitResponse) GetAtLimitFromRecordSamples() []AtLimitRecordSample {
	if o == nil {
		var ret []AtLimitRecordSample
		return ret
	}

	return o.AtLimitFromRecordSamples
}

// GetAtLimitFromRecordSamplesOk returns a tuple with the AtLimitFromRecordSamples field value
// and a boolean to check if the value has been set.
func (o *AssociationRecordLimitResponse) GetAtLimitFromRecordSamplesOk() ([]AtLimitRecordSample, bool) {
	if o == nil {
		return nil, false
	}
	return o.AtLimitFromRecordSamples, true
}

// SetAtLimitFromRecordSamples sets field value
func (o *AssociationRecordLimitResponse) SetAtLimitFromRecordSamples(v []AtLimitRecordSample) {
	o.AtLimitFromRecordSamples = v
}

// GetTotalRecordsNearLimit returns the TotalRecordsNearLimit field value
func (o *AssociationRecordLimitResponse) GetTotalRecordsNearLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalRecordsNearLimit
}

// GetTotalRecordsNearLimitOk returns a tuple with the TotalRecordsNearLimit field value
// and a boolean to check if the value has been set.
func (o *AssociationRecordLimitResponse) GetTotalRecordsNearLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalRecordsNearLimit, true
}

// SetTotalRecordsNearLimit sets field value
func (o *AssociationRecordLimitResponse) SetTotalRecordsNearLimit(v int32) {
	o.TotalRecordsNearLimit = v
}

// GetLimit returns the Limit field value
func (o *AssociationRecordLimitResponse) GetLimit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *AssociationRecordLimitResponse) GetLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *AssociationRecordLimitResponse) SetLimit(v int64) {
	o.Limit = v
}

// GetNearLimitFromRecordSamples returns the NearLimitFromRecordSamples field value
func (o *AssociationRecordLimitResponse) GetNearLimitFromRecordSamples() []NearLimitRecordSample {
	if o == nil {
		var ret []NearLimitRecordSample
		return ret
	}

	return o.NearLimitFromRecordSamples
}

// GetNearLimitFromRecordSamplesOk returns a tuple with the NearLimitFromRecordSamples field value
// and a boolean to check if the value has been set.
func (o *AssociationRecordLimitResponse) GetNearLimitFromRecordSamplesOk() ([]NearLimitRecordSample, bool) {
	if o == nil {
		return nil, false
	}
	return o.NearLimitFromRecordSamples, true
}

// SetNearLimitFromRecordSamples sets field value
func (o *AssociationRecordLimitResponse) SetNearLimitFromRecordSamples(v []NearLimitRecordSample) {
	o.NearLimitFromRecordSamples = v
}

func (o AssociationRecordLimitResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssociationRecordLimitResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalRecordsAtLimit"] = o.TotalRecordsAtLimit
	toSerialize["atLimitFromRecordSamples"] = o.AtLimitFromRecordSamples
	toSerialize["totalRecordsNearLimit"] = o.TotalRecordsNearLimit
	toSerialize["limit"] = o.Limit
	toSerialize["nearLimitFromRecordSamples"] = o.NearLimitFromRecordSamples
	return toSerialize, nil
}

func (o *AssociationRecordLimitResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"totalRecordsAtLimit",
		"atLimitFromRecordSamples",
		"totalRecordsNearLimit",
		"limit",
		"nearLimitFromRecordSamples",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssociationRecordLimitResponse := _AssociationRecordLimitResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssociationRecordLimitResponse)

	if err != nil {
		return err
	}

	*o = AssociationRecordLimitResponse(varAssociationRecordLimitResponse)

	return err
}

type NullableAssociationRecordLimitResponse struct {
	value *AssociationRecordLimitResponse
	isSet bool
}

func (v NullableAssociationRecordLimitResponse) Get() *AssociationRecordLimitResponse {
	return v.value
}

func (v *NullableAssociationRecordLimitResponse) Set(val *AssociationRecordLimitResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociationRecordLimitResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociationRecordLimitResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociationRecordLimitResponse(val *AssociationRecordLimitResponse) *NullableAssociationRecordLimitResponse {
	return &NullableAssociationRecordLimitResponse{value: val, isSet: true}
}

func (v NullableAssociationRecordLimitResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociationRecordLimitResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


