/*
Hubdb

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hubdb

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HubDbTableRowV3Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HubDbTableRowV3Request{}

// HubDbTableRowV3Request struct for HubDbTableRowV3Request
type HubDbTableRowV3Request struct {
	// Specifies the value for `hs_path` column, which will be used as slug in the dynamic pages
	Path *string `json:"path,omitempty"`
	// Specifies the value for the column child table id
	ChildTableId *int64 `json:"childTableId,omitempty"`
	// List of key value pairs with the column name and column value
	Values map[string]map[string]interface{} `json:"values"`
	// Specifies the value for `hs_name` column, which will be used as title in the dynamic pages
	Name *string `json:"name,omitempty"`
	DisplayIndex *int32 `json:"displayIndex,omitempty"`
}

type _HubDbTableRowV3Request HubDbTableRowV3Request

// NewHubDbTableRowV3Request instantiates a new HubDbTableRowV3Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHubDbTableRowV3Request(values map[string]map[string]interface{}) *HubDbTableRowV3Request {
	this := HubDbTableRowV3Request{}
	this.Values = values
	return &this
}

// NewHubDbTableRowV3RequestWithDefaults instantiates a new HubDbTableRowV3Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHubDbTableRowV3RequestWithDefaults() *HubDbTableRowV3Request {
	this := HubDbTableRowV3Request{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *HubDbTableRowV3Request) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubDbTableRowV3Request) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *HubDbTableRowV3Request) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *HubDbTableRowV3Request) SetPath(v string) {
	o.Path = &v
}

// GetChildTableId returns the ChildTableId field value if set, zero value otherwise.
func (o *HubDbTableRowV3Request) GetChildTableId() int64 {
	if o == nil || IsNil(o.ChildTableId) {
		var ret int64
		return ret
	}
	return *o.ChildTableId
}

// GetChildTableIdOk returns a tuple with the ChildTableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubDbTableRowV3Request) GetChildTableIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ChildTableId) {
		return nil, false
	}
	return o.ChildTableId, true
}

// HasChildTableId returns a boolean if a field has been set.
func (o *HubDbTableRowV3Request) HasChildTableId() bool {
	if o != nil && !IsNil(o.ChildTableId) {
		return true
	}

	return false
}

// SetChildTableId gets a reference to the given int64 and assigns it to the ChildTableId field.
func (o *HubDbTableRowV3Request) SetChildTableId(v int64) {
	o.ChildTableId = &v
}

// GetValues returns the Values field value
func (o *HubDbTableRowV3Request) GetValues() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *HubDbTableRowV3Request) GetValuesOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *HubDbTableRowV3Request) SetValues(v map[string]map[string]interface{}) {
	o.Values = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HubDbTableRowV3Request) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubDbTableRowV3Request) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HubDbTableRowV3Request) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HubDbTableRowV3Request) SetName(v string) {
	o.Name = &v
}

// GetDisplayIndex returns the DisplayIndex field value if set, zero value otherwise.
func (o *HubDbTableRowV3Request) GetDisplayIndex() int32 {
	if o == nil || IsNil(o.DisplayIndex) {
		var ret int32
		return ret
	}
	return *o.DisplayIndex
}

// GetDisplayIndexOk returns a tuple with the DisplayIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubDbTableRowV3Request) GetDisplayIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplayIndex) {
		return nil, false
	}
	return o.DisplayIndex, true
}

// HasDisplayIndex returns a boolean if a field has been set.
func (o *HubDbTableRowV3Request) HasDisplayIndex() bool {
	if o != nil && !IsNil(o.DisplayIndex) {
		return true
	}

	return false
}

// SetDisplayIndex gets a reference to the given int32 and assigns it to the DisplayIndex field.
func (o *HubDbTableRowV3Request) SetDisplayIndex(v int32) {
	o.DisplayIndex = &v
}

func (o HubDbTableRowV3Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HubDbTableRowV3Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.ChildTableId) {
		toSerialize["childTableId"] = o.ChildTableId
	}
	toSerialize["values"] = o.Values
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayIndex) {
		toSerialize["displayIndex"] = o.DisplayIndex
	}
	return toSerialize, nil
}

func (o *HubDbTableRowV3Request) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHubDbTableRowV3Request := _HubDbTableRowV3Request{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHubDbTableRowV3Request)

	if err != nil {
		return err
	}

	*o = HubDbTableRowV3Request(varHubDbTableRowV3Request)

	return err
}

type NullableHubDbTableRowV3Request struct {
	value *HubDbTableRowV3Request
	isSet bool
}

func (v NullableHubDbTableRowV3Request) Get() *HubDbTableRowV3Request {
	return v.value
}

func (v *NullableHubDbTableRowV3Request) Set(val *HubDbTableRowV3Request) {
	v.value = val
	v.isSet = true
}

func (v NullableHubDbTableRowV3Request) IsSet() bool {
	return v.isSet
}

func (v *NullableHubDbTableRowV3Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHubDbTableRowV3Request(val *HubDbTableRowV3Request) *NullableHubDbTableRowV3Request {
	return &NullableHubDbTableRowV3Request{value: val, isSet: true}
}

func (v NullableHubDbTableRowV3Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHubDbTableRowV3Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


