/*
Hubdb

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hubdb

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
	"reflect"
)


// RowsAPIService RowsAPI service
type RowsAPIService service

type ApiDeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowRequest struct {
	ctx context.Context
	ApiService *RowsAPIService
	tableIdOrName string
	rowId string
}

func (r ApiDeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowExecute(r)
}

/*
DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRow Permanently deletes a row

Permanently deletes a row from a table's draft version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tableIdOrName The ID or name of the table
 @param rowId The ID of the row
 @return ApiDeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowRequest
*/
func (a *RowsAPIService) DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRow(ctx context.Context, tableIdOrName string, rowId string) ApiDeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowRequest {
	return ApiDeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowRequest{
		ApiService: a,
		ctx: ctx,
		tableIdOrName: tableIdOrName,
		rowId: rowId,
	}
}

// Execute executes the request
func (a *RowsAPIService) DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowExecute(r ApiDeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RowsAPIService.DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRow")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowId"+"}", url.PathEscape(parameterValueToString(r.rowId, "rowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest struct {
	ctx context.Context
	ApiService *RowsAPIService
	tableIdOrName string
	sort *[]string
	after *string
	limit *int32
	properties *[]string
	offset *int32
	archived *bool
}

// Specifies the column names to sort the results by.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest) Sort(sort []string) ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest {
	r.sort = &sort
	return r
}

// The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest) After(after string) ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest {
	r.after = &after
	return r
}

// The maximum number of results to return. Default is &#x60;1000&#x60;.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest) Limit(limit int32) ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest {
	r.limit = &limit
	return r
}

// Specify the column names to get results containing only the required columns instead of all column details. If you want to include multiple columns in the result, use this query param as many times. 
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest) Properties(properties []string) ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest {
	r.properties = &properties
	return r
}

// 
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest) Offset(offset int32) ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest {
	r.offset = &offset
	return r
}

// 
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest) Archived(archived bool) ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest {
	r.archived = &archived
	return r
}

func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest) Execute() (*UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3, *http.Response, error) {
	return r.ApiService.GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsExecute(r)
}

/*
GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRows Get rows from draft table

Returns rows in the draft version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters `column1__gt=5&sort=-column1`, API returns the rows with values for column `column1` greater than 5 and in the descending order of `column1` values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tableIdOrName The ID or name of the table to query.
 @return ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest
*/
func (a *RowsAPIService) GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRows(ctx context.Context, tableIdOrName string) ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest {
	return ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest{
		ApiService: a,
		ctx: ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//  @return UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3
func (a *RowsAPIService) GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsExecute(r ApiGetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsRequest) (*UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RowsAPIService.GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRows")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.properties != nil {
		t := *r.properties
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "properties", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "properties", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest struct {
	ctx context.Context
	ApiService *RowsAPIService
	tableIdOrName string
	sort *[]string
	after *string
	limit *int32
	properties *[]string
	offset *int32
	archived *bool
}

// Specifies the column names to sort the results by. See the above description for more details.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest) Sort(sort []string) ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest {
	r.sort = &sort
	return r
}

// The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest) After(after string) ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest {
	r.after = &after
	return r
}

// The maximum number of results to return. Default is &#x60;1000&#x60;.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest) Limit(limit int32) ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest {
	r.limit = &limit
	return r
}

// Specify the column names to get results containing only the required columns instead of all column details.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest) Properties(properties []string) ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest {
	r.properties = &properties
	return r
}

// 
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest) Offset(offset int32) ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest {
	r.offset = &offset
	return r
}

// 
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest) Archived(archived bool) ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest {
	r.archived = &archived
	return r
}

func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest) Execute() (*UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3, *http.Response, error) {
	return r.ApiService.GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsExecute(r)
}

/*
GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRows Get rows for a table

Returns a set of rows in the published version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters `column1__gt=5&sort=-column1`, API returns the rows with values for column `column1` greater than 5 and in the descending order of `column1` values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
**Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tableIdOrName The ID or name of the table to query.
 @return ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest
*/
func (a *RowsAPIService) GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRows(ctx context.Context, tableIdOrName string) ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest {
	return ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest{
		ApiService: a,
		ctx: ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//  @return UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3
func (a *RowsAPIService) GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsExecute(r ApiGetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsRequest) (*UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RowsAPIService.GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRows")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/rows"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.properties != nil {
		t := *r.properties
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "properties", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "properties", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdRequest struct {
	ctx context.Context
	ApiService *RowsAPIService
	tableIdOrName string
	rowId string
	archived *bool
}

// 
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdRequest) Archived(archived bool) ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdRequest {
	r.archived = &archived
	return r
}

func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdRequest) Execute() (*HubDbTableRowV3, *http.Response, error) {
	return r.ApiService.GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdExecute(r)
}

/*
GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowById Get a row from the draft table

Get a single row by ID from a table's draft version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tableIdOrName The ID or name of the table
 @param rowId The ID of the row
 @return ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdRequest
*/
func (a *RowsAPIService) GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowById(ctx context.Context, tableIdOrName string, rowId string) ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdRequest {
	return ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdRequest{
		ApiService: a,
		ctx: ctx,
		tableIdOrName: tableIdOrName,
		rowId: rowId,
	}
}

// Execute executes the request
//  @return HubDbTableRowV3
func (a *RowsAPIService) GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdExecute(r ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdRequest) (*HubDbTableRowV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HubDbTableRowV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RowsAPIService.GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowId"+"}", url.PathEscape(parameterValueToString(r.rowId, "rowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowRequest struct {
	ctx context.Context
	ApiService *RowsAPIService
	tableIdOrName string
	rowId string
	archived *bool
}

// 
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowRequest) Archived(archived bool) ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowRequest {
	r.archived = &archived
	return r
}

func (r ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowRequest) Execute() (*HubDbTableRowV3, *http.Response, error) {
	return r.ApiService.GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowExecute(r)
}

/*
GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRow Get a table row

Get a single row by ID from the published version of a table.
**Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tableIdOrName The ID or name of the table
 @param rowId The ID of the row
 @return ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowRequest
*/
func (a *RowsAPIService) GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRow(ctx context.Context, tableIdOrName string, rowId string) ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowRequest {
	return ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowRequest{
		ApiService: a,
		ctx: ctx,
		tableIdOrName: tableIdOrName,
		rowId: rowId,
	}
}

// Execute executes the request
//  @return HubDbTableRowV3
func (a *RowsAPIService) GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowExecute(r ApiGetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowRequest) (*HubDbTableRowV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HubDbTableRowV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RowsAPIService.GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowId"+"}", url.PathEscape(parameterValueToString(r.rowId, "rowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowRequest struct {
	ctx context.Context
	ApiService *RowsAPIService
	tableIdOrName string
	rowId string
	hubDbTableRowV3Request *HubDbTableRowV3Request
}

func (r ApiPatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowRequest) HubDbTableRowV3Request(hubDbTableRowV3Request HubDbTableRowV3Request) ApiPatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowRequest {
	r.hubDbTableRowV3Request = &hubDbTableRowV3Request
	return r
}

func (r ApiPatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowRequest) Execute() (*HubDbTableRowV3, *http.Response, error) {
	return r.ApiService.PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowExecute(r)
}

/*
PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow Updates an existing row

Sparse updates a single row in the table's draft version.
All the column values need not be specified. Only the columns or fields that needs to be modified can be specified.
See the "Create a row" endpoint for instructions on how to format the JSON row definitions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tableIdOrName The ID or name of the table
 @param rowId The ID of the row
 @return ApiPatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowRequest
*/
func (a *RowsAPIService) PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow(ctx context.Context, tableIdOrName string, rowId string) ApiPatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowRequest {
	return ApiPatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowRequest{
		ApiService: a,
		ctx: ctx,
		tableIdOrName: tableIdOrName,
		rowId: rowId,
	}
}

// Execute executes the request
//  @return HubDbTableRowV3
func (a *RowsAPIService) PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowExecute(r ApiPatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowRequest) (*HubDbTableRowV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HubDbTableRowV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RowsAPIService.PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowId"+"}", url.PathEscape(parameterValueToString(r.rowId, "rowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hubDbTableRowV3Request == nil {
		return localVarReturnValue, nil, reportError("hubDbTableRowV3Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hubDbTableRowV3Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowRequest struct {
	ctx context.Context
	ApiService *RowsAPIService
	tableIdOrName string
	hubDbTableRowV3Request *HubDbTableRowV3Request
}

func (r ApiPostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowRequest) HubDbTableRowV3Request(hubDbTableRowV3Request HubDbTableRowV3Request) ApiPostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowRequest {
	r.hubDbTableRowV3Request = &hubDbTableRowV3Request
	return r
}

func (r ApiPostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowRequest) Execute() (*HubDbTableRowV3, *http.Response, error) {
	return r.ApiService.PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowExecute(r)
}

/*
PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRow Add a new row to a table

Add a new row to a HubDB table. New rows will be added to the draft version of the table. Use the `/publish` endpoint to push these changes to published version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tableIdOrName The ID or name of the target table.
 @return ApiPostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowRequest
*/
func (a *RowsAPIService) PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRow(ctx context.Context, tableIdOrName string) ApiPostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowRequest {
	return ApiPostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowRequest{
		ApiService: a,
		ctx: ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//  @return HubDbTableRowV3
func (a *RowsAPIService) PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowExecute(r ApiPostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowRequest) (*HubDbTableRowV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HubDbTableRowV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RowsAPIService.PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/rows"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hubDbTableRowV3Request == nil {
		return localVarReturnValue, nil, reportError("hubDbTableRowV3Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hubDbTableRowV3Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowRequest struct {
	ctx context.Context
	ApiService *RowsAPIService
	tableIdOrName string
	rowId string
	name *string
}

// 
func (r ApiPostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowRequest) Name(name string) ApiPostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowRequest {
	r.name = &name
	return r
}

func (r ApiPostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowRequest) Execute() (*HubDbTableRowV3, *http.Response, error) {
	return r.ApiService.PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowExecute(r)
}

/*
PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRow Clone a row

Clones a single row in the draft version of a table.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tableIdOrName The ID or name of the table
 @param rowId The ID of the row
 @return ApiPostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowRequest
*/
func (a *RowsAPIService) PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRow(ctx context.Context, tableIdOrName string, rowId string) ApiPostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowRequest {
	return ApiPostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowRequest{
		ApiService: a,
		ctx: ctx,
		tableIdOrName: tableIdOrName,
		rowId: rowId,
	}
}

// Execute executes the request
//  @return HubDbTableRowV3
func (a *RowsAPIService) PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowExecute(r ApiPostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowRequest) (*HubDbTableRowV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HubDbTableRowV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RowsAPIService.PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft/clone"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowId"+"}", url.PathEscape(parameterValueToString(r.rowId, "rowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowRequest struct {
	ctx context.Context
	ApiService *RowsAPIService
	tableIdOrName string
	rowId string
	hubDbTableRowV3Request *HubDbTableRowV3Request
}

func (r ApiPutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowRequest) HubDbTableRowV3Request(hubDbTableRowV3Request HubDbTableRowV3Request) ApiPutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowRequest {
	r.hubDbTableRowV3Request = &hubDbTableRowV3Request
	return r
}

func (r ApiPutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowRequest) Execute() (*HubDbTableRowV3, *http.Response, error) {
	return r.ApiService.PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowExecute(r)
}

/*
PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow Replaces an existing row

Replace a single row in the draft version of a table. All column values must be specified. If a column has a value in the target table and this request doesn't define that value, it will be deleted.
See the "Create a row" endpoint for instructions on how to format the JSON row definitions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tableIdOrName The ID or name of the table
 @param rowId The ID of the row
 @return ApiPutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowRequest
*/
func (a *RowsAPIService) PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow(ctx context.Context, tableIdOrName string, rowId string) ApiPutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowRequest {
	return ApiPutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowRequest{
		ApiService: a,
		ctx: ctx,
		tableIdOrName: tableIdOrName,
		rowId: rowId,
	}
}

// Execute executes the request
//  @return HubDbTableRowV3
func (a *RowsAPIService) PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowExecute(r ApiPutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowRequest) (*HubDbTableRowV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HubDbTableRowV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RowsAPIService.PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowId"+"}", url.PathEscape(parameterValueToString(r.rowId, "rowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hubDbTableRowV3Request == nil {
		return localVarReturnValue, nil, reportError("hubDbTableRowV3Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hubDbTableRowV3Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
