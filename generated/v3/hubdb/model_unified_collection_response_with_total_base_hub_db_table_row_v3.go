/*
Hubdb

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hubdb

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3 - struct for UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3
type UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3 struct {
	RandomAccessCollectionResponseWithTotalHubDbTableRowV3 *RandomAccessCollectionResponseWithTotalHubDbTableRowV3
	StreamingCollectionResponseWithTotalHubDbTableRowV3 *StreamingCollectionResponseWithTotalHubDbTableRowV3
}

// RandomAccessCollectionResponseWithTotalHubDbTableRowV3AsUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3 is a convenience function that returns RandomAccessCollectionResponseWithTotalHubDbTableRowV3 wrapped in UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3
func RandomAccessCollectionResponseWithTotalHubDbTableRowV3AsUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3(v *RandomAccessCollectionResponseWithTotalHubDbTableRowV3) UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3 {
	return UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3{
		RandomAccessCollectionResponseWithTotalHubDbTableRowV3: v,
	}
}

// StreamingCollectionResponseWithTotalHubDbTableRowV3AsUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3 is a convenience function that returns StreamingCollectionResponseWithTotalHubDbTableRowV3 wrapped in UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3
func StreamingCollectionResponseWithTotalHubDbTableRowV3AsUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3(v *StreamingCollectionResponseWithTotalHubDbTableRowV3) UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3 {
	return UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3{
		StreamingCollectionResponseWithTotalHubDbTableRowV3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RandomAccessCollectionResponseWithTotalHubDbTableRowV3
	err = newStrictDecoder(data).Decode(&dst.RandomAccessCollectionResponseWithTotalHubDbTableRowV3)
	if err == nil {
		jsonRandomAccessCollectionResponseWithTotalHubDbTableRowV3, _ := json.Marshal(dst.RandomAccessCollectionResponseWithTotalHubDbTableRowV3)
		if string(jsonRandomAccessCollectionResponseWithTotalHubDbTableRowV3) == "{}" { // empty struct
			dst.RandomAccessCollectionResponseWithTotalHubDbTableRowV3 = nil
		} else {
			if err = validator.Validate(dst.RandomAccessCollectionResponseWithTotalHubDbTableRowV3); err != nil {
				dst.RandomAccessCollectionResponseWithTotalHubDbTableRowV3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RandomAccessCollectionResponseWithTotalHubDbTableRowV3 = nil
	}

	// try to unmarshal data into StreamingCollectionResponseWithTotalHubDbTableRowV3
	err = newStrictDecoder(data).Decode(&dst.StreamingCollectionResponseWithTotalHubDbTableRowV3)
	if err == nil {
		jsonStreamingCollectionResponseWithTotalHubDbTableRowV3, _ := json.Marshal(dst.StreamingCollectionResponseWithTotalHubDbTableRowV3)
		if string(jsonStreamingCollectionResponseWithTotalHubDbTableRowV3) == "{}" { // empty struct
			dst.StreamingCollectionResponseWithTotalHubDbTableRowV3 = nil
		} else {
			if err = validator.Validate(dst.StreamingCollectionResponseWithTotalHubDbTableRowV3); err != nil {
				dst.StreamingCollectionResponseWithTotalHubDbTableRowV3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.StreamingCollectionResponseWithTotalHubDbTableRowV3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RandomAccessCollectionResponseWithTotalHubDbTableRowV3 = nil
		dst.StreamingCollectionResponseWithTotalHubDbTableRowV3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) MarshalJSON() ([]byte, error) {
	if src.RandomAccessCollectionResponseWithTotalHubDbTableRowV3 != nil {
		return json.Marshal(&src.RandomAccessCollectionResponseWithTotalHubDbTableRowV3)
	}

	if src.StreamingCollectionResponseWithTotalHubDbTableRowV3 != nil {
		return json.Marshal(&src.StreamingCollectionResponseWithTotalHubDbTableRowV3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RandomAccessCollectionResponseWithTotalHubDbTableRowV3 != nil {
		return obj.RandomAccessCollectionResponseWithTotalHubDbTableRowV3
	}

	if obj.StreamingCollectionResponseWithTotalHubDbTableRowV3 != nil {
		return obj.StreamingCollectionResponseWithTotalHubDbTableRowV3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) GetActualInstanceValue() (interface{}) {
	if obj.RandomAccessCollectionResponseWithTotalHubDbTableRowV3 != nil {
		return *obj.RandomAccessCollectionResponseWithTotalHubDbTableRowV3
	}

	if obj.StreamingCollectionResponseWithTotalHubDbTableRowV3 != nil {
		return *obj.StreamingCollectionResponseWithTotalHubDbTableRowV3
	}

	// all schemas are nil
	return nil
}

type NullableUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3 struct {
	value *UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3
	isSet bool
}

func (v NullableUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) Get() *UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3 {
	return v.value
}

func (v *NullableUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) Set(val *UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) {
	v.value = val
	v.isSet = true
}

func (v NullableUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) IsSet() bool {
	return v.isSet
}

func (v *NullableUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3(val *UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) *NullableUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3 {
	return &NullableUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3{value: val, isSet: true}
}

func (v NullableUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnifiedCollectionResponseWithTotalBaseHubDbTableRowV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


