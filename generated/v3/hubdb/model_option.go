/*
Hubdb

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hubdb

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Option type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Option{}

// Option struct for Option
type Option struct {
	CreatedByUserId *int32 `json:"createdByUserId,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedBy *SimpleUser `json:"updatedBy,omitempty"`
	CreatedBy *SimpleUser `json:"createdBy,omitempty"`
	// 
	Name string `json:"name"`
	// 
	Id string `json:"id"`
	Label *string `json:"label,omitempty"`
	UpdatedByUserId *int32 `json:"updatedByUserId,omitempty"`
	// 
	Type string `json:"type"`
	// 
	Order int32 `json:"order"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type _Option Option

// NewOption instantiates a new Option object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOption(createdAt time.Time, name string, id string, type_ string, order int32, updatedAt time.Time) *Option {
	this := Option{}
	this.CreatedAt = createdAt
	this.Name = name
	this.Id = id
	this.Type = type_
	this.Order = order
	this.UpdatedAt = updatedAt
	return &this
}

// NewOptionWithDefaults instantiates a new Option object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionWithDefaults() *Option {
	this := Option{}
	return &this
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *Option) GetCreatedByUserId() int32 {
	if o == nil || IsNil(o.CreatedByUserId) {
		var ret int32
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetCreatedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedByUserId) {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *Option) HasCreatedByUserId() bool {
	if o != nil && !IsNil(o.CreatedByUserId) {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given int32 and assigns it to the CreatedByUserId field.
func (o *Option) SetCreatedByUserId(v int32) {
	o.CreatedByUserId = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Option) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Option) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Option) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Option) GetUpdatedBy() SimpleUser {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret SimpleUser
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetUpdatedByOk() (*SimpleUser, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Option) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given SimpleUser and assigns it to the UpdatedBy field.
func (o *Option) SetUpdatedBy(v SimpleUser) {
	o.UpdatedBy = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Option) GetCreatedBy() SimpleUser {
	if o == nil || IsNil(o.CreatedBy) {
		var ret SimpleUser
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetCreatedByOk() (*SimpleUser, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Option) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given SimpleUser and assigns it to the CreatedBy field.
func (o *Option) SetCreatedBy(v SimpleUser) {
	o.CreatedBy = &v
}

// GetName returns the Name field value
func (o *Option) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Option) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Option) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *Option) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Option) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Option) SetId(v string) {
	o.Id = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Option) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Option) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Option) SetLabel(v string) {
	o.Label = &v
}

// GetUpdatedByUserId returns the UpdatedByUserId field value if set, zero value otherwise.
func (o *Option) GetUpdatedByUserId() int32 {
	if o == nil || IsNil(o.UpdatedByUserId) {
		var ret int32
		return ret
	}
	return *o.UpdatedByUserId
}

// GetUpdatedByUserIdOk returns a tuple with the UpdatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetUpdatedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedByUserId) {
		return nil, false
	}
	return o.UpdatedByUserId, true
}

// HasUpdatedByUserId returns a boolean if a field has been set.
func (o *Option) HasUpdatedByUserId() bool {
	if o != nil && !IsNil(o.UpdatedByUserId) {
		return true
	}

	return false
}

// SetUpdatedByUserId gets a reference to the given int32 and assigns it to the UpdatedByUserId field.
func (o *Option) SetUpdatedByUserId(v int32) {
	o.UpdatedByUserId = &v
}

// GetType returns the Type field value
func (o *Option) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Option) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Option) SetType(v string) {
	o.Type = v
}

// GetOrder returns the Order field value
func (o *Option) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *Option) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *Option) SetOrder(v int32) {
	o.Order = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Option) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Option) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Option) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o Option) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Option) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedByUserId) {
		toSerialize["createdByUserId"] = o.CreatedByUserId
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.UpdatedByUserId) {
		toSerialize["updatedByUserId"] = o.UpdatedByUserId
	}
	toSerialize["type"] = o.Type
	toSerialize["order"] = o.Order
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *Option) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"name",
		"id",
		"type",
		"order",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOption := _Option{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOption)

	if err != nil {
		return err
	}

	*o = Option(varOption)

	return err
}

type NullableOption struct {
	value *Option
	isSet bool
}

func (v NullableOption) Get() *Option {
	return v.value
}

func (v *NullableOption) Set(val *Option) {
	v.value = val
	v.isSet = true
}

func (v NullableOption) IsSet() bool {
	return v.isSet
}

func (v *NullableOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOption(val *Option) *NullableOption {
	return &NullableOption{value: val, isSet: true}
}

func (v NullableOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


