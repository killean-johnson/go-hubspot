/*
Hubdb

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hubdb

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Column type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Column{}

// Column struct for Column
type Column struct {
	CreatedByUserId *int32 `json:"createdByUserId,omitempty"`
	// Foreign table id referenced
	ForeignTableId *int64 `json:"foreignTableId,omitempty"`
	UpdatedBy *SimpleUser `json:"updatedBy,omitempty"`
	Description *string `json:"description,omitempty"`
	// Label of the column
	Label string `json:"label"`
	UpdatedByUserId *int32 `json:"updatedByUserId,omitempty"`
	// Type of the column
	Type string `json:"type"`
	// Number of options available
	OptionCount *int32 `json:"optionCount,omitempty"`
	// Foreign Ids
	ForeignIds []ForeignId `json:"foreignIds,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	CreatedBy *SimpleUser `json:"createdBy,omitempty"`
	// Name of the column
	Name string `json:"name"`
	// Options to choose for select and multi-select columns
	Options []Option `json:"options,omitempty"`
	// Column width for HubDB UI
	Width *int32 `json:"width,omitempty"`
	// Column Id
	Id *string `json:"id,omitempty"`
	// Foreign ids
	ForeignIdsById *map[string]ForeignId `json:"foreignIdsById,omitempty"`
	// Foreign Column id
	ForeignColumnId *int32 `json:"foreignColumnId,omitempty"`
	// Foreign ids by name
	ForeignIdsByName *map[string]ForeignId `json:"foreignIdsByName,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type _Column Column

// NewColumn instantiates a new Column object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColumn(label string, type_ string, name string) *Column {
	this := Column{}
	this.Label = label
	this.Type = type_
	this.Name = name
	return &this
}

// NewColumnWithDefaults instantiates a new Column object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColumnWithDefaults() *Column {
	this := Column{}
	return &this
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *Column) GetCreatedByUserId() int32 {
	if o == nil || IsNil(o.CreatedByUserId) {
		var ret int32
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetCreatedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedByUserId) {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *Column) HasCreatedByUserId() bool {
	if o != nil && !IsNil(o.CreatedByUserId) {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given int32 and assigns it to the CreatedByUserId field.
func (o *Column) SetCreatedByUserId(v int32) {
	o.CreatedByUserId = &v
}

// GetForeignTableId returns the ForeignTableId field value if set, zero value otherwise.
func (o *Column) GetForeignTableId() int64 {
	if o == nil || IsNil(o.ForeignTableId) {
		var ret int64
		return ret
	}
	return *o.ForeignTableId
}

// GetForeignTableIdOk returns a tuple with the ForeignTableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetForeignTableIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ForeignTableId) {
		return nil, false
	}
	return o.ForeignTableId, true
}

// HasForeignTableId returns a boolean if a field has been set.
func (o *Column) HasForeignTableId() bool {
	if o != nil && !IsNil(o.ForeignTableId) {
		return true
	}

	return false
}

// SetForeignTableId gets a reference to the given int64 and assigns it to the ForeignTableId field.
func (o *Column) SetForeignTableId(v int64) {
	o.ForeignTableId = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Column) GetUpdatedBy() SimpleUser {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret SimpleUser
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetUpdatedByOk() (*SimpleUser, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Column) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given SimpleUser and assigns it to the UpdatedBy field.
func (o *Column) SetUpdatedBy(v SimpleUser) {
	o.UpdatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Column) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Column) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Column) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value
func (o *Column) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *Column) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *Column) SetLabel(v string) {
	o.Label = v
}

// GetUpdatedByUserId returns the UpdatedByUserId field value if set, zero value otherwise.
func (o *Column) GetUpdatedByUserId() int32 {
	if o == nil || IsNil(o.UpdatedByUserId) {
		var ret int32
		return ret
	}
	return *o.UpdatedByUserId
}

// GetUpdatedByUserIdOk returns a tuple with the UpdatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetUpdatedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedByUserId) {
		return nil, false
	}
	return o.UpdatedByUserId, true
}

// HasUpdatedByUserId returns a boolean if a field has been set.
func (o *Column) HasUpdatedByUserId() bool {
	if o != nil && !IsNil(o.UpdatedByUserId) {
		return true
	}

	return false
}

// SetUpdatedByUserId gets a reference to the given int32 and assigns it to the UpdatedByUserId field.
func (o *Column) SetUpdatedByUserId(v int32) {
	o.UpdatedByUserId = &v
}

// GetType returns the Type field value
func (o *Column) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Column) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Column) SetType(v string) {
	o.Type = v
}

// GetOptionCount returns the OptionCount field value if set, zero value otherwise.
func (o *Column) GetOptionCount() int32 {
	if o == nil || IsNil(o.OptionCount) {
		var ret int32
		return ret
	}
	return *o.OptionCount
}

// GetOptionCountOk returns a tuple with the OptionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetOptionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OptionCount) {
		return nil, false
	}
	return o.OptionCount, true
}

// HasOptionCount returns a boolean if a field has been set.
func (o *Column) HasOptionCount() bool {
	if o != nil && !IsNil(o.OptionCount) {
		return true
	}

	return false
}

// SetOptionCount gets a reference to the given int32 and assigns it to the OptionCount field.
func (o *Column) SetOptionCount(v int32) {
	o.OptionCount = &v
}

// GetForeignIds returns the ForeignIds field value if set, zero value otherwise.
func (o *Column) GetForeignIds() []ForeignId {
	if o == nil || IsNil(o.ForeignIds) {
		var ret []ForeignId
		return ret
	}
	return o.ForeignIds
}

// GetForeignIdsOk returns a tuple with the ForeignIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetForeignIdsOk() ([]ForeignId, bool) {
	if o == nil || IsNil(o.ForeignIds) {
		return nil, false
	}
	return o.ForeignIds, true
}

// HasForeignIds returns a boolean if a field has been set.
func (o *Column) HasForeignIds() bool {
	if o != nil && !IsNil(o.ForeignIds) {
		return true
	}

	return false
}

// SetForeignIds gets a reference to the given []ForeignId and assigns it to the ForeignIds field.
func (o *Column) SetForeignIds(v []ForeignId) {
	o.ForeignIds = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Column) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Column) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Column) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Column) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Column) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Column) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Column) GetCreatedBy() SimpleUser {
	if o == nil || IsNil(o.CreatedBy) {
		var ret SimpleUser
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetCreatedByOk() (*SimpleUser, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Column) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given SimpleUser and assigns it to the CreatedBy field.
func (o *Column) SetCreatedBy(v SimpleUser) {
	o.CreatedBy = &v
}

// GetName returns the Name field value
func (o *Column) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Column) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Column) SetName(v string) {
	o.Name = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Column) GetOptions() []Option {
	if o == nil || IsNil(o.Options) {
		var ret []Option
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetOptionsOk() ([]Option, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Column) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []Option and assigns it to the Options field.
func (o *Column) SetOptions(v []Option) {
	o.Options = v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *Column) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *Column) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *Column) SetWidth(v int32) {
	o.Width = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Column) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Column) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Column) SetId(v string) {
	o.Id = &v
}

// GetForeignIdsById returns the ForeignIdsById field value if set, zero value otherwise.
func (o *Column) GetForeignIdsById() map[string]ForeignId {
	if o == nil || IsNil(o.ForeignIdsById) {
		var ret map[string]ForeignId
		return ret
	}
	return *o.ForeignIdsById
}

// GetForeignIdsByIdOk returns a tuple with the ForeignIdsById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetForeignIdsByIdOk() (*map[string]ForeignId, bool) {
	if o == nil || IsNil(o.ForeignIdsById) {
		return nil, false
	}
	return o.ForeignIdsById, true
}

// HasForeignIdsById returns a boolean if a field has been set.
func (o *Column) HasForeignIdsById() bool {
	if o != nil && !IsNil(o.ForeignIdsById) {
		return true
	}

	return false
}

// SetForeignIdsById gets a reference to the given map[string]ForeignId and assigns it to the ForeignIdsById field.
func (o *Column) SetForeignIdsById(v map[string]ForeignId) {
	o.ForeignIdsById = &v
}

// GetForeignColumnId returns the ForeignColumnId field value if set, zero value otherwise.
func (o *Column) GetForeignColumnId() int32 {
	if o == nil || IsNil(o.ForeignColumnId) {
		var ret int32
		return ret
	}
	return *o.ForeignColumnId
}

// GetForeignColumnIdOk returns a tuple with the ForeignColumnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetForeignColumnIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ForeignColumnId) {
		return nil, false
	}
	return o.ForeignColumnId, true
}

// HasForeignColumnId returns a boolean if a field has been set.
func (o *Column) HasForeignColumnId() bool {
	if o != nil && !IsNil(o.ForeignColumnId) {
		return true
	}

	return false
}

// SetForeignColumnId gets a reference to the given int32 and assigns it to the ForeignColumnId field.
func (o *Column) SetForeignColumnId(v int32) {
	o.ForeignColumnId = &v
}

// GetForeignIdsByName returns the ForeignIdsByName field value if set, zero value otherwise.
func (o *Column) GetForeignIdsByName() map[string]ForeignId {
	if o == nil || IsNil(o.ForeignIdsByName) {
		var ret map[string]ForeignId
		return ret
	}
	return *o.ForeignIdsByName
}

// GetForeignIdsByNameOk returns a tuple with the ForeignIdsByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetForeignIdsByNameOk() (*map[string]ForeignId, bool) {
	if o == nil || IsNil(o.ForeignIdsByName) {
		return nil, false
	}
	return o.ForeignIdsByName, true
}

// HasForeignIdsByName returns a boolean if a field has been set.
func (o *Column) HasForeignIdsByName() bool {
	if o != nil && !IsNil(o.ForeignIdsByName) {
		return true
	}

	return false
}

// SetForeignIdsByName gets a reference to the given map[string]ForeignId and assigns it to the ForeignIdsByName field.
func (o *Column) SetForeignIdsByName(v map[string]ForeignId) {
	o.ForeignIdsByName = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Column) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Column) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Column) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Column) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Column) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedByUserId) {
		toSerialize["createdByUserId"] = o.CreatedByUserId
	}
	if !IsNil(o.ForeignTableId) {
		toSerialize["foreignTableId"] = o.ForeignTableId
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["label"] = o.Label
	if !IsNil(o.UpdatedByUserId) {
		toSerialize["updatedByUserId"] = o.UpdatedByUserId
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.OptionCount) {
		toSerialize["optionCount"] = o.OptionCount
	}
	if !IsNil(o.ForeignIds) {
		toSerialize["foreignIds"] = o.ForeignIds
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ForeignIdsById) {
		toSerialize["foreignIdsById"] = o.ForeignIdsById
	}
	if !IsNil(o.ForeignColumnId) {
		toSerialize["foreignColumnId"] = o.ForeignColumnId
	}
	if !IsNil(o.ForeignIdsByName) {
		toSerialize["foreignIdsByName"] = o.ForeignIdsByName
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *Column) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"type",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varColumn := _Column{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varColumn)

	if err != nil {
		return err
	}

	*o = Column(varColumn)

	return err
}

type NullableColumn struct {
	value *Column
	isSet bool
}

func (v NullableColumn) Get() *Column {
	return v.value
}

func (v *NullableColumn) Set(val *Column) {
	v.value = val
	v.isSet = true
}

func (v NullableColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumn(val *Column) *NullableColumn {
	return &NullableColumn{value: val, isSet: true}
}

func (v NullableColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


