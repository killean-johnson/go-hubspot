/*
Hubdb

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hubdb

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImportResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportResult{}

// ImportResult struct for ImportResult
type ImportResult struct {
	// Specifies whether row limit exceeded during import
	RowLimitExceeded bool `json:"rowLimitExceeded"`
	// Specifies number of duplicate rows
	DuplicateRows int32 `json:"duplicateRows"`
	// Specifies number of rows imported
	RowsImported int32 `json:"rowsImported"`
	// List of errors during import
	Errors []Error `json:"errors"`
}

type _ImportResult ImportResult

// NewImportResult instantiates a new ImportResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportResult(rowLimitExceeded bool, duplicateRows int32, rowsImported int32, errors []Error) *ImportResult {
	this := ImportResult{}
	this.RowLimitExceeded = rowLimitExceeded
	this.DuplicateRows = duplicateRows
	this.RowsImported = rowsImported
	this.Errors = errors
	return &this
}

// NewImportResultWithDefaults instantiates a new ImportResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportResultWithDefaults() *ImportResult {
	this := ImportResult{}
	return &this
}

// GetRowLimitExceeded returns the RowLimitExceeded field value
func (o *ImportResult) GetRowLimitExceeded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RowLimitExceeded
}

// GetRowLimitExceededOk returns a tuple with the RowLimitExceeded field value
// and a boolean to check if the value has been set.
func (o *ImportResult) GetRowLimitExceededOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowLimitExceeded, true
}

// SetRowLimitExceeded sets field value
func (o *ImportResult) SetRowLimitExceeded(v bool) {
	o.RowLimitExceeded = v
}

// GetDuplicateRows returns the DuplicateRows field value
func (o *ImportResult) GetDuplicateRows() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DuplicateRows
}

// GetDuplicateRowsOk returns a tuple with the DuplicateRows field value
// and a boolean to check if the value has been set.
func (o *ImportResult) GetDuplicateRowsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DuplicateRows, true
}

// SetDuplicateRows sets field value
func (o *ImportResult) SetDuplicateRows(v int32) {
	o.DuplicateRows = v
}

// GetRowsImported returns the RowsImported field value
func (o *ImportResult) GetRowsImported() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RowsImported
}

// GetRowsImportedOk returns a tuple with the RowsImported field value
// and a boolean to check if the value has been set.
func (o *ImportResult) GetRowsImportedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowsImported, true
}

// SetRowsImported sets field value
func (o *ImportResult) SetRowsImported(v int32) {
	o.RowsImported = v
}

// GetErrors returns the Errors field value
func (o *ImportResult) GetErrors() []Error {
	if o == nil {
		var ret []Error
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *ImportResult) GetErrorsOk() ([]Error, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *ImportResult) SetErrors(v []Error) {
	o.Errors = v
}

func (o ImportResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rowLimitExceeded"] = o.RowLimitExceeded
	toSerialize["duplicateRows"] = o.DuplicateRows
	toSerialize["rowsImported"] = o.RowsImported
	toSerialize["errors"] = o.Errors
	return toSerialize, nil
}

func (o *ImportResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rowLimitExceeded",
		"duplicateRows",
		"rowsImported",
		"errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportResult := _ImportResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportResult)

	if err != nil {
		return err
	}

	*o = ImportResult(varImportResult)

	return err
}

type NullableImportResult struct {
	value *ImportResult
	isSet bool
}

func (v NullableImportResult) Get() *ImportResult {
	return v.value
}

func (v *NullableImportResult) Set(val *ImportResult) {
	v.value = val
	v.isSet = true
}

func (v NullableImportResult) IsSet() bool {
	return v.isSet
}

func (v *NullableImportResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportResult(val *ImportResult) *NullableImportResult {
	return &NullableImportResult{value: val, isSet: true}
}

func (v NullableImportResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


