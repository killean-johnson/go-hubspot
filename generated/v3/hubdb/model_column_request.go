/*
Hubdb

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hubdb

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ColumnRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColumnRequest{}

// ColumnRequest struct for ColumnRequest
type ColumnRequest struct {
	// The id of another table to which the column refers/points to.
	ForeignTableId *int64 `json:"foreignTableId,omitempty"`
	// Name of the column
	Name string `json:"name"`
	// Options to choose for select and multi-select columns
	Options []Option `json:"options"`
	// Column Id
	Id int32 `json:"id"`
	// Label of the column
	Label string `json:"label"`
	// Type of the column
	Type string `json:"type"`
	// The id of the column from another table to which the column refers/points to.
	ForeignColumnId *int32 `json:"foreignColumnId,omitempty"`
}

type _ColumnRequest ColumnRequest

// NewColumnRequest instantiates a new ColumnRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColumnRequest(name string, options []Option, id int32, label string, type_ string) *ColumnRequest {
	this := ColumnRequest{}
	this.Name = name
	this.Options = options
	this.Id = id
	this.Label = label
	this.Type = type_
	return &this
}

// NewColumnRequestWithDefaults instantiates a new ColumnRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColumnRequestWithDefaults() *ColumnRequest {
	this := ColumnRequest{}
	return &this
}

// GetForeignTableId returns the ForeignTableId field value if set, zero value otherwise.
func (o *ColumnRequest) GetForeignTableId() int64 {
	if o == nil || IsNil(o.ForeignTableId) {
		var ret int64
		return ret
	}
	return *o.ForeignTableId
}

// GetForeignTableIdOk returns a tuple with the ForeignTableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnRequest) GetForeignTableIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ForeignTableId) {
		return nil, false
	}
	return o.ForeignTableId, true
}

// HasForeignTableId returns a boolean if a field has been set.
func (o *ColumnRequest) HasForeignTableId() bool {
	if o != nil && !IsNil(o.ForeignTableId) {
		return true
	}

	return false
}

// SetForeignTableId gets a reference to the given int64 and assigns it to the ForeignTableId field.
func (o *ColumnRequest) SetForeignTableId(v int64) {
	o.ForeignTableId = &v
}

// GetName returns the Name field value
func (o *ColumnRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ColumnRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ColumnRequest) SetName(v string) {
	o.Name = v
}

// GetOptions returns the Options field value
func (o *ColumnRequest) GetOptions() []Option {
	if o == nil {
		var ret []Option
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *ColumnRequest) GetOptionsOk() ([]Option, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *ColumnRequest) SetOptions(v []Option) {
	o.Options = v
}

// GetId returns the Id field value
func (o *ColumnRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ColumnRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ColumnRequest) SetId(v int32) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *ColumnRequest) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ColumnRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ColumnRequest) SetLabel(v string) {
	o.Label = v
}

// GetType returns the Type field value
func (o *ColumnRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ColumnRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ColumnRequest) SetType(v string) {
	o.Type = v
}

// GetForeignColumnId returns the ForeignColumnId field value if set, zero value otherwise.
func (o *ColumnRequest) GetForeignColumnId() int32 {
	if o == nil || IsNil(o.ForeignColumnId) {
		var ret int32
		return ret
	}
	return *o.ForeignColumnId
}

// GetForeignColumnIdOk returns a tuple with the ForeignColumnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnRequest) GetForeignColumnIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ForeignColumnId) {
		return nil, false
	}
	return o.ForeignColumnId, true
}

// HasForeignColumnId returns a boolean if a field has been set.
func (o *ColumnRequest) HasForeignColumnId() bool {
	if o != nil && !IsNil(o.ForeignColumnId) {
		return true
	}

	return false
}

// SetForeignColumnId gets a reference to the given int32 and assigns it to the ForeignColumnId field.
func (o *ColumnRequest) SetForeignColumnId(v int32) {
	o.ForeignColumnId = &v
}

func (o ColumnRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColumnRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForeignTableId) {
		toSerialize["foreignTableId"] = o.ForeignTableId
	}
	toSerialize["name"] = o.Name
	toSerialize["options"] = o.Options
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["type"] = o.Type
	if !IsNil(o.ForeignColumnId) {
		toSerialize["foreignColumnId"] = o.ForeignColumnId
	}
	return toSerialize, nil
}

func (o *ColumnRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"options",
		"id",
		"label",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varColumnRequest := _ColumnRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varColumnRequest)

	if err != nil {
		return err
	}

	*o = ColumnRequest(varColumnRequest)

	return err
}

type NullableColumnRequest struct {
	value *ColumnRequest
	isSet bool
}

func (v NullableColumnRequest) Get() *ColumnRequest {
	return v.value
}

func (v *NullableColumnRequest) Set(val *ColumnRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableColumnRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableColumnRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumnRequest(val *ColumnRequest) *NullableColumnRequest {
	return &NullableColumnRequest{value: val, isSet: true}
}

func (v NullableColumnRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumnRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


