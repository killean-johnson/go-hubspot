/*
Public App Crm Cards

Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_app_crm_cards

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CardObjectTypeBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardObjectTypeBody{}

// CardObjectTypeBody struct for CardObjectTypeBody
type CardObjectTypeBody struct {
	// A CRM object type where this card should be displayed.
	Name string `json:"name"`
	// An array of properties that should be sent to this card's target URL when the data fetch request is made. Must be valid properties for the corresponding CRM object type.
	PropertiesToSend []string `json:"propertiesToSend"`
}

type _CardObjectTypeBody CardObjectTypeBody

// NewCardObjectTypeBody instantiates a new CardObjectTypeBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardObjectTypeBody(name string, propertiesToSend []string) *CardObjectTypeBody {
	this := CardObjectTypeBody{}
	this.Name = name
	this.PropertiesToSend = propertiesToSend
	return &this
}

// NewCardObjectTypeBodyWithDefaults instantiates a new CardObjectTypeBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardObjectTypeBodyWithDefaults() *CardObjectTypeBody {
	this := CardObjectTypeBody{}
	return &this
}

// GetName returns the Name field value
func (o *CardObjectTypeBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CardObjectTypeBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CardObjectTypeBody) SetName(v string) {
	o.Name = v
}

// GetPropertiesToSend returns the PropertiesToSend field value
func (o *CardObjectTypeBody) GetPropertiesToSend() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PropertiesToSend
}

// GetPropertiesToSendOk returns a tuple with the PropertiesToSend field value
// and a boolean to check if the value has been set.
func (o *CardObjectTypeBody) GetPropertiesToSendOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PropertiesToSend, true
}

// SetPropertiesToSend sets field value
func (o *CardObjectTypeBody) SetPropertiesToSend(v []string) {
	o.PropertiesToSend = v
}

func (o CardObjectTypeBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardObjectTypeBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["propertiesToSend"] = o.PropertiesToSend
	return toSerialize, nil
}

func (o *CardObjectTypeBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"propertiesToSend",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCardObjectTypeBody := _CardObjectTypeBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCardObjectTypeBody)

	if err != nil {
		return err
	}

	*o = CardObjectTypeBody(varCardObjectTypeBody)

	return err
}

type NullableCardObjectTypeBody struct {
	value *CardObjectTypeBody
	isSet bool
}

func (v NullableCardObjectTypeBody) Get() *CardObjectTypeBody {
	return v.value
}

func (v *NullableCardObjectTypeBody) Set(val *CardObjectTypeBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCardObjectTypeBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCardObjectTypeBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardObjectTypeBody(val *CardObjectTypeBody) *NullableCardObjectTypeBody {
	return &NullableCardObjectTypeBody{value: val, isSet: true}
}

func (v NullableCardObjectTypeBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardObjectTypeBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


