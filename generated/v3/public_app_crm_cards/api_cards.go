/*
Public App Crm Cards

Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_app_crm_cards

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
)


// CardsAPIService CardsAPI service
type CardsAPIService service

type ApiDeleteCrmV3ExtensionsCardsDevAppIdCardIdArchiveRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	cardId string
	appId int32
}

func (r ApiDeleteCrmV3ExtensionsCardsDevAppIdCardIdArchiveRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCrmV3ExtensionsCardsDevAppIdCardIdArchiveExecute(r)
}

/*
DeleteCrmV3ExtensionsCardsDevAppIdCardIdArchive Delete a card

Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can't be undone.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cardId The ID of the card to delete.
 @param appId The ID of the target app.
 @return ApiDeleteCrmV3ExtensionsCardsDevAppIdCardIdArchiveRequest
*/
func (a *CardsAPIService) DeleteCrmV3ExtensionsCardsDevAppIdCardIdArchive(ctx context.Context, cardId string, appId int32) ApiDeleteCrmV3ExtensionsCardsDevAppIdCardIdArchiveRequest {
	return ApiDeleteCrmV3ExtensionsCardsDevAppIdCardIdArchiveRequest{
		ApiService: a,
		ctx: ctx,
		cardId: cardId,
		appId: appId,
	}
}

// Execute executes the request
func (a *CardsAPIService) DeleteCrmV3ExtensionsCardsDevAppIdCardIdArchiveExecute(r ApiDeleteCrmV3ExtensionsCardsDevAppIdCardIdArchiveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.DeleteCrmV3ExtensionsCardsDevAppIdCardIdArchive")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/cards-dev/{appId}/{cardId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cardId"+"}", url.PathEscape(parameterValueToString(r.cardId, "cardId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCrmV3ExtensionsCardsDevAppIdCardIdGetByIdRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	cardId string
	appId int32
}

func (r ApiGetCrmV3ExtensionsCardsDevAppIdCardIdGetByIdRequest) Execute() (*PublicCardResponse, *http.Response, error) {
	return r.ApiService.GetCrmV3ExtensionsCardsDevAppIdCardIdGetByIdExecute(r)
}

/*
GetCrmV3ExtensionsCardsDevAppIdCardIdGetById Get a card.

Returns the definition for a card with the given ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cardId The ID of the target card.
 @param appId The ID of the target app.
 @return ApiGetCrmV3ExtensionsCardsDevAppIdCardIdGetByIdRequest
*/
func (a *CardsAPIService) GetCrmV3ExtensionsCardsDevAppIdCardIdGetById(ctx context.Context, cardId string, appId int32) ApiGetCrmV3ExtensionsCardsDevAppIdCardIdGetByIdRequest {
	return ApiGetCrmV3ExtensionsCardsDevAppIdCardIdGetByIdRequest{
		ApiService: a,
		ctx: ctx,
		cardId: cardId,
		appId: appId,
	}
}

// Execute executes the request
//  @return PublicCardResponse
func (a *CardsAPIService) GetCrmV3ExtensionsCardsDevAppIdCardIdGetByIdExecute(r ApiGetCrmV3ExtensionsCardsDevAppIdCardIdGetByIdRequest) (*PublicCardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicCardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.GetCrmV3ExtensionsCardsDevAppIdCardIdGetById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/cards-dev/{appId}/{cardId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cardId"+"}", url.PathEscape(parameterValueToString(r.cardId, "cardId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCrmV3ExtensionsCardsDevAppIdGetAllRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	appId int32
}

func (r ApiGetCrmV3ExtensionsCardsDevAppIdGetAllRequest) Execute() (*PublicCardListResponse, *http.Response, error) {
	return r.ApiService.GetCrmV3ExtensionsCardsDevAppIdGetAllExecute(r)
}

/*
GetCrmV3ExtensionsCardsDevAppIdGetAll Get all cards

Returns a list of cards for a given app.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId The ID of the target app.
 @return ApiGetCrmV3ExtensionsCardsDevAppIdGetAllRequest
*/
func (a *CardsAPIService) GetCrmV3ExtensionsCardsDevAppIdGetAll(ctx context.Context, appId int32) ApiGetCrmV3ExtensionsCardsDevAppIdGetAllRequest {
	return ApiGetCrmV3ExtensionsCardsDevAppIdGetAllRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
//  @return PublicCardListResponse
func (a *CardsAPIService) GetCrmV3ExtensionsCardsDevAppIdGetAllExecute(r ApiGetCrmV3ExtensionsCardsDevAppIdGetAllRequest) (*PublicCardListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicCardListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.GetCrmV3ExtensionsCardsDevAppIdGetAll")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/cards-dev/{appId}"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCrmV3ExtensionsCardsDevAppIdCardIdUpdateRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	cardId string
	appId int32
	cardPatchRequest *CardPatchRequest
}

// Card definition fields to be updated.
func (r ApiPatchCrmV3ExtensionsCardsDevAppIdCardIdUpdateRequest) CardPatchRequest(cardPatchRequest CardPatchRequest) ApiPatchCrmV3ExtensionsCardsDevAppIdCardIdUpdateRequest {
	r.cardPatchRequest = &cardPatchRequest
	return r
}

func (r ApiPatchCrmV3ExtensionsCardsDevAppIdCardIdUpdateRequest) Execute() (*PublicCardResponse, *http.Response, error) {
	return r.ApiService.PatchCrmV3ExtensionsCardsDevAppIdCardIdUpdateExecute(r)
}

/*
PatchCrmV3ExtensionsCardsDevAppIdCardIdUpdate Update a card

Update a card definition with new details.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cardId The ID of the card to update.
 @param appId The ID of the target app.
 @return ApiPatchCrmV3ExtensionsCardsDevAppIdCardIdUpdateRequest
*/
func (a *CardsAPIService) PatchCrmV3ExtensionsCardsDevAppIdCardIdUpdate(ctx context.Context, cardId string, appId int32) ApiPatchCrmV3ExtensionsCardsDevAppIdCardIdUpdateRequest {
	return ApiPatchCrmV3ExtensionsCardsDevAppIdCardIdUpdateRequest{
		ApiService: a,
		ctx: ctx,
		cardId: cardId,
		appId: appId,
	}
}

// Execute executes the request
//  @return PublicCardResponse
func (a *CardsAPIService) PatchCrmV3ExtensionsCardsDevAppIdCardIdUpdateExecute(r ApiPatchCrmV3ExtensionsCardsDevAppIdCardIdUpdateRequest) (*PublicCardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicCardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.PatchCrmV3ExtensionsCardsDevAppIdCardIdUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/cards-dev/{appId}/{cardId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cardId"+"}", url.PathEscape(parameterValueToString(r.cardId, "cardId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cardPatchRequest == nil {
		return localVarReturnValue, nil, reportError("cardPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cardPatchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCrmV3ExtensionsCardsDevAppIdCreateRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	appId int32
	cardCreateRequest *CardCreateRequest
}

// The new card definition.
func (r ApiPostCrmV3ExtensionsCardsDevAppIdCreateRequest) CardCreateRequest(cardCreateRequest CardCreateRequest) ApiPostCrmV3ExtensionsCardsDevAppIdCreateRequest {
	r.cardCreateRequest = &cardCreateRequest
	return r
}

func (r ApiPostCrmV3ExtensionsCardsDevAppIdCreateRequest) Execute() (*PublicCardResponse, *http.Response, error) {
	return r.ApiService.PostCrmV3ExtensionsCardsDevAppIdCreateExecute(r)
}

/*
PostCrmV3ExtensionsCardsDevAppIdCreate Create a new card

Defines a new card that will become active on an account when this app is installed.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId The ID of the target app.
 @return ApiPostCrmV3ExtensionsCardsDevAppIdCreateRequest
*/
func (a *CardsAPIService) PostCrmV3ExtensionsCardsDevAppIdCreate(ctx context.Context, appId int32) ApiPostCrmV3ExtensionsCardsDevAppIdCreateRequest {
	return ApiPostCrmV3ExtensionsCardsDevAppIdCreateRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
//  @return PublicCardResponse
func (a *CardsAPIService) PostCrmV3ExtensionsCardsDevAppIdCreateExecute(r ApiPostCrmV3ExtensionsCardsDevAppIdCreateRequest) (*PublicCardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PublicCardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.PostCrmV3ExtensionsCardsDevAppIdCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/cards-dev/{appId}"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cardCreateRequest == nil {
		return localVarReturnValue, nil, reportError("cardCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cardCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
