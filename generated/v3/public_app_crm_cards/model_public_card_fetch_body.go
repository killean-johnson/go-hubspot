/*
Public App Crm Cards

Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_app_crm_cards

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicCardFetchBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicCardFetchBody{}

// PublicCardFetchBody struct for PublicCardFetchBody
type PublicCardFetchBody struct {
	ObjectTypes []CardObjectTypeBody `json:"objectTypes"`
	TargetUrl string `json:"targetUrl"`
}

type _PublicCardFetchBody PublicCardFetchBody

// NewPublicCardFetchBody instantiates a new PublicCardFetchBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicCardFetchBody(objectTypes []CardObjectTypeBody, targetUrl string) *PublicCardFetchBody {
	this := PublicCardFetchBody{}
	this.ObjectTypes = objectTypes
	this.TargetUrl = targetUrl
	return &this
}

// NewPublicCardFetchBodyWithDefaults instantiates a new PublicCardFetchBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicCardFetchBodyWithDefaults() *PublicCardFetchBody {
	this := PublicCardFetchBody{}
	return &this
}

// GetObjectTypes returns the ObjectTypes field value
func (o *PublicCardFetchBody) GetObjectTypes() []CardObjectTypeBody {
	if o == nil {
		var ret []CardObjectTypeBody
		return ret
	}

	return o.ObjectTypes
}

// GetObjectTypesOk returns a tuple with the ObjectTypes field value
// and a boolean to check if the value has been set.
func (o *PublicCardFetchBody) GetObjectTypesOk() ([]CardObjectTypeBody, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectTypes, true
}

// SetObjectTypes sets field value
func (o *PublicCardFetchBody) SetObjectTypes(v []CardObjectTypeBody) {
	o.ObjectTypes = v
}

// GetTargetUrl returns the TargetUrl field value
func (o *PublicCardFetchBody) GetTargetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetUrl
}

// GetTargetUrlOk returns a tuple with the TargetUrl field value
// and a boolean to check if the value has been set.
func (o *PublicCardFetchBody) GetTargetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetUrl, true
}

// SetTargetUrl sets field value
func (o *PublicCardFetchBody) SetTargetUrl(v string) {
	o.TargetUrl = v
}

func (o PublicCardFetchBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicCardFetchBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["objectTypes"] = o.ObjectTypes
	toSerialize["targetUrl"] = o.TargetUrl
	return toSerialize, nil
}

func (o *PublicCardFetchBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectTypes",
		"targetUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicCardFetchBody := _PublicCardFetchBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicCardFetchBody)

	if err != nil {
		return err
	}

	*o = PublicCardFetchBody(varPublicCardFetchBody)

	return err
}

type NullablePublicCardFetchBody struct {
	value *PublicCardFetchBody
	isSet bool
}

func (v NullablePublicCardFetchBody) Get() *PublicCardFetchBody {
	return v.value
}

func (v *NullablePublicCardFetchBody) Set(val *PublicCardFetchBody) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicCardFetchBody) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicCardFetchBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicCardFetchBody(val *PublicCardFetchBody) *NullablePublicCardFetchBody {
	return &NullablePublicCardFetchBody{value: val, isSet: true}
}

func (v NullablePublicCardFetchBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicCardFetchBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


