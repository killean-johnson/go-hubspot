/*
Blog Settings

\"Use these endpoints for interacting with Blog objects\"

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blog_settings

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlogLanguageCloneRequestVNext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlogLanguageCloneRequestVNext{}

// BlogLanguageCloneRequestVNext Request body object for creating new language variant blog.
type BlogLanguageCloneRequestVNext struct {
	// Target language of new variant.
	Language *string `json:"language,omitempty"`
	// ID of blog to clone.
	Id string `json:"id"`
	// Language of primary blog to clone.
	PrimaryLanguage *string `json:"primaryLanguage,omitempty"`
	// Path to this blog.
	Slug *string `json:"slug,omitempty"`
}

type _BlogLanguageCloneRequestVNext BlogLanguageCloneRequestVNext

// NewBlogLanguageCloneRequestVNext instantiates a new BlogLanguageCloneRequestVNext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlogLanguageCloneRequestVNext(id string) *BlogLanguageCloneRequestVNext {
	this := BlogLanguageCloneRequestVNext{}
	this.Id = id
	return &this
}

// NewBlogLanguageCloneRequestVNextWithDefaults instantiates a new BlogLanguageCloneRequestVNext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlogLanguageCloneRequestVNextWithDefaults() *BlogLanguageCloneRequestVNext {
	this := BlogLanguageCloneRequestVNext{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *BlogLanguageCloneRequestVNext) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlogLanguageCloneRequestVNext) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *BlogLanguageCloneRequestVNext) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *BlogLanguageCloneRequestVNext) SetLanguage(v string) {
	o.Language = &v
}

// GetId returns the Id field value
func (o *BlogLanguageCloneRequestVNext) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BlogLanguageCloneRequestVNext) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BlogLanguageCloneRequestVNext) SetId(v string) {
	o.Id = v
}

// GetPrimaryLanguage returns the PrimaryLanguage field value if set, zero value otherwise.
func (o *BlogLanguageCloneRequestVNext) GetPrimaryLanguage() string {
	if o == nil || IsNil(o.PrimaryLanguage) {
		var ret string
		return ret
	}
	return *o.PrimaryLanguage
}

// GetPrimaryLanguageOk returns a tuple with the PrimaryLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlogLanguageCloneRequestVNext) GetPrimaryLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryLanguage) {
		return nil, false
	}
	return o.PrimaryLanguage, true
}

// HasPrimaryLanguage returns a boolean if a field has been set.
func (o *BlogLanguageCloneRequestVNext) HasPrimaryLanguage() bool {
	if o != nil && !IsNil(o.PrimaryLanguage) {
		return true
	}

	return false
}

// SetPrimaryLanguage gets a reference to the given string and assigns it to the PrimaryLanguage field.
func (o *BlogLanguageCloneRequestVNext) SetPrimaryLanguage(v string) {
	o.PrimaryLanguage = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *BlogLanguageCloneRequestVNext) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlogLanguageCloneRequestVNext) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *BlogLanguageCloneRequestVNext) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *BlogLanguageCloneRequestVNext) SetSlug(v string) {
	o.Slug = &v
}

func (o BlogLanguageCloneRequestVNext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlogLanguageCloneRequestVNext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.PrimaryLanguage) {
		toSerialize["primaryLanguage"] = o.PrimaryLanguage
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	return toSerialize, nil
}

func (o *BlogLanguageCloneRequestVNext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlogLanguageCloneRequestVNext := _BlogLanguageCloneRequestVNext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlogLanguageCloneRequestVNext)

	if err != nil {
		return err
	}

	*o = BlogLanguageCloneRequestVNext(varBlogLanguageCloneRequestVNext)

	return err
}

type NullableBlogLanguageCloneRequestVNext struct {
	value *BlogLanguageCloneRequestVNext
	isSet bool
}

func (v NullableBlogLanguageCloneRequestVNext) Get() *BlogLanguageCloneRequestVNext {
	return v.value
}

func (v *NullableBlogLanguageCloneRequestVNext) Set(val *BlogLanguageCloneRequestVNext) {
	v.value = val
	v.isSet = true
}

func (v NullableBlogLanguageCloneRequestVNext) IsSet() bool {
	return v.isSet
}

func (v *NullableBlogLanguageCloneRequestVNext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlogLanguageCloneRequestVNext(val *BlogLanguageCloneRequestVNext) *NullableBlogLanguageCloneRequestVNext {
	return &NullableBlogLanguageCloneRequestVNext{value: val, isSet: true}
}

func (v NullableBlogLanguageCloneRequestVNext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlogLanguageCloneRequestVNext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


