/*
Events Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VisibleExternalEventTypeNames type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisibleExternalEventTypeNames{}

// VisibleExternalEventTypeNames struct for VisibleExternalEventTypeNames
type VisibleExternalEventTypeNames struct {
	// List of event type names.
	EventTypes []string `json:"eventTypes"`
}

type _VisibleExternalEventTypeNames VisibleExternalEventTypeNames

// NewVisibleExternalEventTypeNames instantiates a new VisibleExternalEventTypeNames object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisibleExternalEventTypeNames(eventTypes []string) *VisibleExternalEventTypeNames {
	this := VisibleExternalEventTypeNames{}
	this.EventTypes = eventTypes
	return &this
}

// NewVisibleExternalEventTypeNamesWithDefaults instantiates a new VisibleExternalEventTypeNames object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisibleExternalEventTypeNamesWithDefaults() *VisibleExternalEventTypeNames {
	this := VisibleExternalEventTypeNames{}
	return &this
}

// GetEventTypes returns the EventTypes field value
func (o *VisibleExternalEventTypeNames) GetEventTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value
// and a boolean to check if the value has been set.
func (o *VisibleExternalEventTypeNames) GetEventTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTypes, true
}

// SetEventTypes sets field value
func (o *VisibleExternalEventTypeNames) SetEventTypes(v []string) {
	o.EventTypes = v
}

func (o VisibleExternalEventTypeNames) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisibleExternalEventTypeNames) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventTypes"] = o.EventTypes
	return toSerialize, nil
}

func (o *VisibleExternalEventTypeNames) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVisibleExternalEventTypeNames := _VisibleExternalEventTypeNames{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVisibleExternalEventTypeNames)

	if err != nil {
		return err
	}

	*o = VisibleExternalEventTypeNames(varVisibleExternalEventTypeNames)

	return err
}

type NullableVisibleExternalEventTypeNames struct {
	value *VisibleExternalEventTypeNames
	isSet bool
}

func (v NullableVisibleExternalEventTypeNames) Get() *VisibleExternalEventTypeNames {
	return v.value
}

func (v *NullableVisibleExternalEventTypeNames) Set(val *VisibleExternalEventTypeNames) {
	v.value = val
	v.isSet = true
}

func (v NullableVisibleExternalEventTypeNames) IsSet() bool {
	return v.isSet
}

func (v *NullableVisibleExternalEventTypeNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisibleExternalEventTypeNames(val *VisibleExternalEventTypeNames) *NullableVisibleExternalEventTypeNames {
	return &NullableVisibleExternalEventTypeNames{value: val, isSet: true}
}

func (v NullableVisibleExternalEventTypeNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisibleExternalEventTypeNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


