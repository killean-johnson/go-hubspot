/*
Events Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"time"
	"reflect"
)


// EventsAPIService EventsAPI service
type EventsAPIService service

type ApiGetEventsV3EventsEventTypesGetTypesRequest struct {
	ctx context.Context
	ApiService *EventsAPIService
}

func (r ApiGetEventsV3EventsEventTypesGetTypesRequest) Execute() (*VisibleExternalEventTypeNames, *http.Response, error) {
	return r.ApiService.GetEventsV3EventsEventTypesGetTypesExecute(r)
}

/*
GetEventsV3EventsEventTypesGetTypes Event Types

This endpoint returns a list of event type names which are visible to you. You may use these event type names to query the API for specific event instances of a desired type.

Note: the `get_types` method is only supported in the Python SDK version `12.0.0-beta.1` or later. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEventsV3EventsEventTypesGetTypesRequest
*/
func (a *EventsAPIService) GetEventsV3EventsEventTypesGetTypes(ctx context.Context) ApiGetEventsV3EventsEventTypesGetTypesRequest {
	return ApiGetEventsV3EventsEventTypesGetTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VisibleExternalEventTypeNames
func (a *EventsAPIService) GetEventsV3EventsEventTypesGetTypesExecute(r ApiGetEventsV3EventsEventTypesGetTypesRequest) (*VisibleExternalEventTypeNames, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VisibleExternalEventTypeNames
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsAPIService.GetEventsV3EventsEventTypesGetTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/v3/events/event-types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEventsV3EventsGetPageRequest struct {
	ctx context.Context
	ApiService *EventsAPIService
	objectType *string
	eventType *string
	after *string
	before *string
	limit *int32
	sort *[]string
	occurredAfter *time.Time
	occurredBefore *time.Time
	objectId *int64
	objectPropertyPropname *map[string]interface{}
	propertyPropname *map[string]interface{}
	id *[]string
}

// The type of CRM object to filter event instances on (e.g., &#x60;contact&#x60;). To retrieve event data for a specific CRM record, include the additional &#x60;objectId&#x60; query parameter (below). 
func (r ApiGetEventsV3EventsGetPageRequest) ObjectType(objectType string) ApiGetEventsV3EventsGetPageRequest {
	r.objectType = &objectType
	return r
}

// The event type name. You can retrieve available event types using the [event types endpoint](#get-%2Fevents%2Fv3%2Fevents%2Fevent-types).
func (r ApiGetEventsV3EventsGetPageRequest) EventType(eventType string) ApiGetEventsV3EventsGetPageRequest {
	r.eventType = &eventType
	return r
}

// The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetEventsV3EventsGetPageRequest) After(after string) ApiGetEventsV3EventsGetPageRequest {
	r.after = &after
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) Before(before string) ApiGetEventsV3EventsGetPageRequest {
	r.before = &before
	return r
}

// The maximum number of results to display per page.
func (r ApiGetEventsV3EventsGetPageRequest) Limit(limit int32) ApiGetEventsV3EventsGetPageRequest {
	r.limit = &limit
	return r
}

// Sort direction based on the timestamp of the event instance, &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60;.
func (r ApiGetEventsV3EventsGetPageRequest) Sort(sort []string) ApiGetEventsV3EventsGetPageRequest {
	r.sort = &sort
	return r
}

// Filter for event data that occurred after a specific datetime.
func (r ApiGetEventsV3EventsGetPageRequest) OccurredAfter(occurredAfter time.Time) ApiGetEventsV3EventsGetPageRequest {
	r.occurredAfter = &occurredAfter
	return r
}

// Filter for event data that occurred before a specific datetime.
func (r ApiGetEventsV3EventsGetPageRequest) OccurredBefore(occurredBefore time.Time) ApiGetEventsV3EventsGetPageRequest {
	r.occurredBefore = &occurredBefore
	return r
}

// The ID of the CRM Object to filter event instances on. When including this parameter, you must also include the &#x60;objectType&#x60; parameter.
func (r ApiGetEventsV3EventsGetPageRequest) ObjectId(objectId int64) ApiGetEventsV3EventsGetPageRequest {
	r.objectId = &objectId
	return r
}

// Instead of retrieving event data for a specific object by its ID, you can specify a unique identifier property. For contacts, you can use the &#x60;email&#x60; property. (e.g., &#x60;objectProperty.email&#x3D;name@domain.com&#x60;).
func (r ApiGetEventsV3EventsGetPageRequest) ObjectPropertyPropname(objectPropertyPropname map[string]interface{}) ApiGetEventsV3EventsGetPageRequest {
	r.objectPropertyPropname = &objectPropertyPropname
	return r
}

// Filter for event completions that contain a specific value for an event property (e.g., &#x60;property.hs_city&#x3D;portland&#x60;). For properties values with spaces, replaces spaces with &#x60;%20&#x60; or &#x60;+&#x60; (e.g., &#x60;property.hs_city&#x3D;new+york&#x60;).
func (r ApiGetEventsV3EventsGetPageRequest) PropertyPropname(propertyPropname map[string]interface{}) ApiGetEventsV3EventsGetPageRequest {
	r.propertyPropname = &propertyPropname
	return r
}

// ID of an event instance. IDs are 1:1 with event instances. If you provide this filter and additional filters, the other filters must match the values on the event instance to yield results.
func (r ApiGetEventsV3EventsGetPageRequest) Id(id []string) ApiGetEventsV3EventsGetPageRequest {
	r.id = &id
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) Execute() (*CollectionResponseExternalUnifiedEvent, *http.Response, error) {
	return r.ApiService.GetEventsV3EventsGetPageExecute(r)
}

/*
GetEventsV3EventsGetPage Retrieve event data

Retrieve instances of event completion data. For example, retrieve all event completions associated with a specific contact.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEventsV3EventsGetPageRequest
*/
func (a *EventsAPIService) GetEventsV3EventsGetPage(ctx context.Context) ApiGetEventsV3EventsGetPageRequest {
	return ApiGetEventsV3EventsGetPageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseExternalUnifiedEvent
func (a *EventsAPIService) GetEventsV3EventsGetPageExecute(r ApiGetEventsV3EventsGetPageRequest) (*CollectionResponseExternalUnifiedEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseExternalUnifiedEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsAPIService.GetEventsV3EventsGetPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/v3/events/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.objectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectType", r.objectType, "form", "")
	}
	if r.eventType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventType", r.eventType, "form", "")
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.occurredAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredAfter", r.occurredAfter, "form", "")
	}
	if r.occurredBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredBefore", r.occurredBefore, "form", "")
	}
	if r.objectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectId", r.objectId, "form", "")
	}
	if r.objectPropertyPropname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectProperty.{propname}", r.objectPropertyPropname, "form", "")
	}
	if r.propertyPropname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "property.{propname}", r.propertyPropname, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
