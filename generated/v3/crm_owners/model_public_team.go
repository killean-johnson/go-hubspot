/*
Crm Owners

HubSpot uses **owners** to assign CRM objects to specific people in your organization. The endpoints described here are used to get a list of the owners that are available for an account. To assign an owner to an object, set the hubspot_owner_id property using the appropriate CRM object update or create a request.  If teams are available for your HubSpot tier, these endpoints will also indicate which team(s) an owner can access, as well as which team is the owner's primary team.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm_owners

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicTeam{}

// PublicTeam struct for PublicTeam
type PublicTeam struct {
	Name string `json:"name"`
	Id string `json:"id"`
	Primary bool `json:"primary"`
}

type _PublicTeam PublicTeam

// NewPublicTeam instantiates a new PublicTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicTeam(name string, id string, primary bool) *PublicTeam {
	this := PublicTeam{}
	this.Name = name
	this.Id = id
	this.Primary = primary
	return &this
}

// NewPublicTeamWithDefaults instantiates a new PublicTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicTeamWithDefaults() *PublicTeam {
	this := PublicTeam{}
	return &this
}

// GetName returns the Name field value
func (o *PublicTeam) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicTeam) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicTeam) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *PublicTeam) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicTeam) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicTeam) SetId(v string) {
	o.Id = v
}

// GetPrimary returns the Primary field value
func (o *PublicTeam) GetPrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value
// and a boolean to check if the value has been set.
func (o *PublicTeam) GetPrimaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Primary, true
}

// SetPrimary sets field value
func (o *PublicTeam) SetPrimary(v bool) {
	o.Primary = v
}

func (o PublicTeam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	toSerialize["primary"] = o.Primary
	return toSerialize, nil
}

func (o *PublicTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"id",
		"primary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicTeam := _PublicTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicTeam)

	if err != nil {
		return err
	}

	*o = PublicTeam(varPublicTeam)

	return err
}

type NullablePublicTeam struct {
	value *PublicTeam
	isSet bool
}

func (v NullablePublicTeam) Get() *PublicTeam {
	return v.value
}

func (v *NullablePublicTeam) Set(val *PublicTeam) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicTeam) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicTeam(val *PublicTeam) *NullablePublicTeam {
	return &NullablePublicTeam{value: val, isSet: true}
}

func (v NullablePublicTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


