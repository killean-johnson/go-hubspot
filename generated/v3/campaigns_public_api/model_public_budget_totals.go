/*
Campaigns Public Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package campaigns_public_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicBudgetTotals type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicBudgetTotals{}

// PublicBudgetTotals struct for PublicBudgetTotals
type PublicBudgetTotals struct {
	SpendItems []PublicSpendItem `json:"spendItems"`
	BudgetTotal *float32 `json:"budgetTotal,omitempty"`
	RemainingBudget *float32 `json:"remainingBudget,omitempty"`
	SpendTotal *float32 `json:"spendTotal,omitempty"`
	CurrencyCode string `json:"currencyCode"`
	BudgetItems []PublicBudgetItem `json:"budgetItems"`
}

type _PublicBudgetTotals PublicBudgetTotals

// NewPublicBudgetTotals instantiates a new PublicBudgetTotals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicBudgetTotals(spendItems []PublicSpendItem, currencyCode string, budgetItems []PublicBudgetItem) *PublicBudgetTotals {
	this := PublicBudgetTotals{}
	this.SpendItems = spendItems
	this.CurrencyCode = currencyCode
	this.BudgetItems = budgetItems
	return &this
}

// NewPublicBudgetTotalsWithDefaults instantiates a new PublicBudgetTotals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicBudgetTotalsWithDefaults() *PublicBudgetTotals {
	this := PublicBudgetTotals{}
	return &this
}

// GetSpendItems returns the SpendItems field value
func (o *PublicBudgetTotals) GetSpendItems() []PublicSpendItem {
	if o == nil {
		var ret []PublicSpendItem
		return ret
	}

	return o.SpendItems
}

// GetSpendItemsOk returns a tuple with the SpendItems field value
// and a boolean to check if the value has been set.
func (o *PublicBudgetTotals) GetSpendItemsOk() ([]PublicSpendItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpendItems, true
}

// SetSpendItems sets field value
func (o *PublicBudgetTotals) SetSpendItems(v []PublicSpendItem) {
	o.SpendItems = v
}

// GetBudgetTotal returns the BudgetTotal field value if set, zero value otherwise.
func (o *PublicBudgetTotals) GetBudgetTotal() float32 {
	if o == nil || IsNil(o.BudgetTotal) {
		var ret float32
		return ret
	}
	return *o.BudgetTotal
}

// GetBudgetTotalOk returns a tuple with the BudgetTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicBudgetTotals) GetBudgetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.BudgetTotal) {
		return nil, false
	}
	return o.BudgetTotal, true
}

// HasBudgetTotal returns a boolean if a field has been set.
func (o *PublicBudgetTotals) HasBudgetTotal() bool {
	if o != nil && !IsNil(o.BudgetTotal) {
		return true
	}

	return false
}

// SetBudgetTotal gets a reference to the given float32 and assigns it to the BudgetTotal field.
func (o *PublicBudgetTotals) SetBudgetTotal(v float32) {
	o.BudgetTotal = &v
}

// GetRemainingBudget returns the RemainingBudget field value if set, zero value otherwise.
func (o *PublicBudgetTotals) GetRemainingBudget() float32 {
	if o == nil || IsNil(o.RemainingBudget) {
		var ret float32
		return ret
	}
	return *o.RemainingBudget
}

// GetRemainingBudgetOk returns a tuple with the RemainingBudget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicBudgetTotals) GetRemainingBudgetOk() (*float32, bool) {
	if o == nil || IsNil(o.RemainingBudget) {
		return nil, false
	}
	return o.RemainingBudget, true
}

// HasRemainingBudget returns a boolean if a field has been set.
func (o *PublicBudgetTotals) HasRemainingBudget() bool {
	if o != nil && !IsNil(o.RemainingBudget) {
		return true
	}

	return false
}

// SetRemainingBudget gets a reference to the given float32 and assigns it to the RemainingBudget field.
func (o *PublicBudgetTotals) SetRemainingBudget(v float32) {
	o.RemainingBudget = &v
}

// GetSpendTotal returns the SpendTotal field value if set, zero value otherwise.
func (o *PublicBudgetTotals) GetSpendTotal() float32 {
	if o == nil || IsNil(o.SpendTotal) {
		var ret float32
		return ret
	}
	return *o.SpendTotal
}

// GetSpendTotalOk returns a tuple with the SpendTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicBudgetTotals) GetSpendTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.SpendTotal) {
		return nil, false
	}
	return o.SpendTotal, true
}

// HasSpendTotal returns a boolean if a field has been set.
func (o *PublicBudgetTotals) HasSpendTotal() bool {
	if o != nil && !IsNil(o.SpendTotal) {
		return true
	}

	return false
}

// SetSpendTotal gets a reference to the given float32 and assigns it to the SpendTotal field.
func (o *PublicBudgetTotals) SetSpendTotal(v float32) {
	o.SpendTotal = &v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *PublicBudgetTotals) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *PublicBudgetTotals) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *PublicBudgetTotals) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

// GetBudgetItems returns the BudgetItems field value
func (o *PublicBudgetTotals) GetBudgetItems() []PublicBudgetItem {
	if o == nil {
		var ret []PublicBudgetItem
		return ret
	}

	return o.BudgetItems
}

// GetBudgetItemsOk returns a tuple with the BudgetItems field value
// and a boolean to check if the value has been set.
func (o *PublicBudgetTotals) GetBudgetItemsOk() ([]PublicBudgetItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.BudgetItems, true
}

// SetBudgetItems sets field value
func (o *PublicBudgetTotals) SetBudgetItems(v []PublicBudgetItem) {
	o.BudgetItems = v
}

func (o PublicBudgetTotals) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicBudgetTotals) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["spendItems"] = o.SpendItems
	if !IsNil(o.BudgetTotal) {
		toSerialize["budgetTotal"] = o.BudgetTotal
	}
	if !IsNil(o.RemainingBudget) {
		toSerialize["remainingBudget"] = o.RemainingBudget
	}
	if !IsNil(o.SpendTotal) {
		toSerialize["spendTotal"] = o.SpendTotal
	}
	toSerialize["currencyCode"] = o.CurrencyCode
	toSerialize["budgetItems"] = o.BudgetItems
	return toSerialize, nil
}

func (o *PublicBudgetTotals) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"spendItems",
		"currencyCode",
		"budgetItems",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicBudgetTotals := _PublicBudgetTotals{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicBudgetTotals)

	if err != nil {
		return err
	}

	*o = PublicBudgetTotals(varPublicBudgetTotals)

	return err
}

type NullablePublicBudgetTotals struct {
	value *PublicBudgetTotals
	isSet bool
}

func (v NullablePublicBudgetTotals) Get() *PublicBudgetTotals {
	return v.value
}

func (v *NullablePublicBudgetTotals) Set(val *PublicBudgetTotals) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicBudgetTotals) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicBudgetTotals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicBudgetTotals(val *PublicBudgetTotals) *NullablePublicBudgetTotals {
	return &NullablePublicBudgetTotals{value: val, isSet: true}
}

func (v NullablePublicBudgetTotals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicBudgetTotals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


