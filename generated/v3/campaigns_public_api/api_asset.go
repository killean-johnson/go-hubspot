/*
Campaigns Public Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package campaigns_public_api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// AssetAPIService AssetAPI service
type AssetAPIService service

type ApiDeleteMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest struct {
	ctx context.Context
	ApiService *AssetAPIService
	campaignGuid string
	assetType string
	assetId string
}

func (r ApiDeleteMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdExecute(r)
}

/*
DeleteMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetId Remove asset association

Disassociate a specified asset from a campaign.
Important: Currently, only the following asset types can be associated and disassociated via the API: Forms, Static lists, External website pages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignGuid Unique identifier for the campaign, formatted as a UUID.
 @param assetType The type of asset Important: Currently, only the following asset types are available for disassociation via the API: FORM, OBJECT_LIST, EXTERNAL_WEB_URL
 @param assetId Id of the asset
 @return ApiDeleteMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest
*/
func (a *AssetAPIService) DeleteMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetId(ctx context.Context, campaignGuid string, assetType string, assetId string) ApiDeleteMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest {
	return ApiDeleteMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignGuid: campaignGuid,
		assetType: assetType,
		assetId: assetId,
	}
}

// Execute executes the request
func (a *AssetAPIService) DeleteMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdExecute(r ApiDeleteMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetAPIService.DeleteMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/campaigns/{campaignGuid}/assets/{assetType}/{assetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaignGuid"+"}", url.PathEscape(parameterValueToString(r.campaignGuid, "campaignGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetType"+"}", url.PathEscape(parameterValueToString(r.assetType, "assetType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest struct {
	ctx context.Context
	ApiService *AssetAPIService
	campaignGuid string
	assetType string
	after *string
	limit *string
	startDate *string
	endDate *string
}

// A cursor for pagination. If provided, the results will start after the given cursor. Example: NTI1Cg%3D%3D
func (r ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest) After(after string) ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest {
	r.after = &after
	return r
}

// The maximum number of results to return. Default: 10
func (r ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest) Limit(limit string) ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest {
	r.limit = &limit
	return r
}

// Start date to fetch asset metrics, formatted as YYYY-MM-DD. This date is used to fetch the metrics associated with the assets for a specified period. If not provided, no asset metrics will be fetched. 
func (r ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest) StartDate(startDate string) ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest {
	r.startDate = &startDate
	return r
}

// End date to fetch asset metrics, formatted as YYYY-MM-DD. This date is used to fetch the metrics associated with the assets for a specified period. If not provided, no asset metrics will be fetched.
func (r ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest) EndDate(endDate string) ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest) Execute() (*CollectionResponsePublicCampaignAssetForwardPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3CampaignsCampaignGuidAssetsAssetTypeExecute(r)
}

/*
GetMarketingV3CampaignsCampaignGuidAssetsAssetType List assets

This endpoint lists all assets of the campaign by asset type. The assetType parameter is required, and each request can only fetch assets of a single type.
Asset metrics can also be fetched along with the assets; they are available only if start and end dates are provided.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignGuid Unique identifier for the campaign, formatted as a UUID.
 @param assetType The type of asset to fetch.
 @return ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest
*/
func (a *AssetAPIService) GetMarketingV3CampaignsCampaignGuidAssetsAssetType(ctx context.Context, campaignGuid string, assetType string) ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest {
	return ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest{
		ApiService: a,
		ctx: ctx,
		campaignGuid: campaignGuid,
		assetType: assetType,
	}
}

// Execute executes the request
//  @return CollectionResponsePublicCampaignAssetForwardPaging
func (a *AssetAPIService) GetMarketingV3CampaignsCampaignGuidAssetsAssetTypeExecute(r ApiGetMarketingV3CampaignsCampaignGuidAssetsAssetTypeRequest) (*CollectionResponsePublicCampaignAssetForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponsePublicCampaignAssetForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetAPIService.GetMarketingV3CampaignsCampaignGuidAssetsAssetType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/campaigns/{campaignGuid}/assets/{assetType}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaignGuid"+"}", url.PathEscape(parameterValueToString(r.campaignGuid, "campaignGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetType"+"}", url.PathEscape(parameterValueToString(r.assetType, "assetType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest struct {
	ctx context.Context
	ApiService *AssetAPIService
	campaignGuid string
	assetType string
	assetId string
}

func (r ApiPutMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdExecute(r)
}

/*
PutMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetId Add asset association

Associate a specified asset with a campaign.
Important: Currently, only the following asset types can be associated and disassociated via the API: Forms, Static lists, External website pages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignGuid Unique identifier for the campaign, formatted as a UUID
 @param assetType The type of asset Important: Currently, only the following asset types are available for association via the API: FORM, OBJECT_LIST, EXTERNAL_WEB_URL
 @param assetId Id of the asset
 @return ApiPutMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest
*/
func (a *AssetAPIService) PutMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetId(ctx context.Context, campaignGuid string, assetType string, assetId string) ApiPutMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest {
	return ApiPutMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignGuid: campaignGuid,
		assetType: assetType,
		assetId: assetId,
	}
}

// Execute executes the request
func (a *AssetAPIService) PutMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdExecute(r ApiPutMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetAPIService.PutMarketingV3CampaignsCampaignGuidAssetsAssetTypeAssetId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/campaigns/{campaignGuid}/assets/{assetType}/{assetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaignGuid"+"}", url.PathEscape(parameterValueToString(r.campaignGuid, "campaignGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetType"+"}", url.PathEscape(parameterValueToString(r.assetType, "assetType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
