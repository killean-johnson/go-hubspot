/*
Campaigns Public Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package campaigns_public_api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// ReportsAPIService ReportsAPI service
type ReportsAPIService service

type ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest struct {
	ctx context.Context
	ApiService *ReportsAPIService
	campaignGuid string
	contactType string
	startDate *string
	endDate *string
	limit *int32
	after *string
}

// The start date for the report data, formatted as YYYY-MM-DD. Default value: 2006-01-01
func (r ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest) StartDate(startDate string) ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest {
	r.startDate = &startDate
	return r
}

// End date for the report data, formatted as YYYY-MM-DD. Default value: Current date
func (r ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest) EndDate(endDate string) ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest {
	r.endDate = &endDate
	return r
}

// Limit for the number of contacts to fetch Default: 100
func (r ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest) Limit(limit int32) ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest {
	r.limit = &limit
	return r
}

// A cursor for pagination. If provided, the results will start after the given cursor. Example: NTI1Cg%3D%3D
func (r ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest) After(after string) ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest {
	r.after = &after
	return r
}

func (r ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest) Execute() (*CollectionResponseContactReferenceForwardPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeExecute(r)
}

/*
GetMarketingV3CampaignsCampaignGuidReportsContactsContactType Fetch contact IDs

Fetch the list of contact IDs for the specified campaign and contact type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignGuid Unique identifier for the campaign, formatted as a UUID.
 @param contactType The type of metric to filter the influenced contacts. Allowed values: contactFirstTouch, contactLastTouch, influencedContacts
 @return ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest
*/
func (a *ReportsAPIService) GetMarketingV3CampaignsCampaignGuidReportsContactsContactType(ctx context.Context, campaignGuid string, contactType string) ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest {
	return ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest{
		ApiService: a,
		ctx: ctx,
		campaignGuid: campaignGuid,
		contactType: contactType,
	}
}

// Execute executes the request
//  @return CollectionResponseContactReferenceForwardPaging
func (a *ReportsAPIService) GetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeExecute(r ApiGetMarketingV3CampaignsCampaignGuidReportsContactsContactTypeRequest) (*CollectionResponseContactReferenceForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseContactReferenceForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetMarketingV3CampaignsCampaignGuidReportsContactsContactType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/campaigns/{campaignGuid}/reports/contacts/{contactType}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaignGuid"+"}", url.PathEscape(parameterValueToString(r.campaignGuid, "campaignGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contactType"+"}", url.PathEscape(parameterValueToString(r.contactType, "contactType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3CampaignsCampaignGuidReportsMetricsRequest struct {
	ctx context.Context
	ApiService *ReportsAPIService
	campaignGuid string
	startDate *string
	endDate *string
}

// The start date for the report data, formatted as YYYY-MM-DD. Default value: 2006-01-01
func (r ApiGetMarketingV3CampaignsCampaignGuidReportsMetricsRequest) StartDate(startDate string) ApiGetMarketingV3CampaignsCampaignGuidReportsMetricsRequest {
	r.startDate = &startDate
	return r
}

// End date for the report data, formatted as YYYY-MM-DD. Default value: Current date
func (r ApiGetMarketingV3CampaignsCampaignGuidReportsMetricsRequest) EndDate(endDate string) ApiGetMarketingV3CampaignsCampaignGuidReportsMetricsRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGetMarketingV3CampaignsCampaignGuidReportsMetricsRequest) Execute() (*MetricsCounters, *http.Response, error) {
	return r.ApiService.GetMarketingV3CampaignsCampaignGuidReportsMetricsExecute(r)
}

/*
GetMarketingV3CampaignsCampaignGuidReportsMetrics Get Campaign Metrics 

This endpoint retrieves key attribution metrics for a specified campaign, such as sessions, new contacts, and influenced contacts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignGuid Unique identifier for the campaign, formatted as a UUID.
 @return ApiGetMarketingV3CampaignsCampaignGuidReportsMetricsRequest
*/
func (a *ReportsAPIService) GetMarketingV3CampaignsCampaignGuidReportsMetrics(ctx context.Context, campaignGuid string) ApiGetMarketingV3CampaignsCampaignGuidReportsMetricsRequest {
	return ApiGetMarketingV3CampaignsCampaignGuidReportsMetricsRequest{
		ApiService: a,
		ctx: ctx,
		campaignGuid: campaignGuid,
	}
}

// Execute executes the request
//  @return MetricsCounters
func (a *ReportsAPIService) GetMarketingV3CampaignsCampaignGuidReportsMetricsExecute(r ApiGetMarketingV3CampaignsCampaignGuidReportsMetricsRequest) (*MetricsCounters, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetricsCounters
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetMarketingV3CampaignsCampaignGuidReportsMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/campaigns/{campaignGuid}/reports/metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"campaignGuid"+"}", url.PathEscape(parameterValueToString(r.campaignGuid, "campaignGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest struct {
	ctx context.Context
	ApiService *ReportsAPIService
	campaignGuid string
	attributionModel *string
	startDate *string
	endDate *string
}

// Allowed values: LINEAR, FIRST_INTERACTION, LAST_INTERACTION, FULL_PATH, U_SHAPED, W_SHAPED, TIME_DECAY, J_SHAPED, INVERSE_J_SHAPED Default value: LINEAR
func (r ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest) AttributionModel(attributionModel string) ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest {
	r.attributionModel = &attributionModel
	return r
}

// The start date for the report data, formatted as YYYY-MM-DD. Default value: 2006-01-01
func (r ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest) StartDate(startDate string) ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest {
	r.startDate = &startDate
	return r
}

// End date for the report data, formatted as YYYY-MM-DD. Default value: Current date
func (r ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest) EndDate(endDate string) ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest) Execute() (*RevenueAttributionAggregate, *http.Response, error) {
	return r.ApiService.GetMarketingV3CampaignsCampaignGuidReportsRevenueExecute(r)
}

/*
GetMarketingV3CampaignsCampaignGuidReportsRevenue Fetch revenue

Fetch revenue attribution report data for a specified campaign


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignGuid Unique identifier for the campaign, formatted as a UUID.
 @return ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest
*/
func (a *ReportsAPIService) GetMarketingV3CampaignsCampaignGuidReportsRevenue(ctx context.Context, campaignGuid string) ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest {
	return ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest{
		ApiService: a,
		ctx: ctx,
		campaignGuid: campaignGuid,
	}
}

// Execute executes the request
//  @return RevenueAttributionAggregate
func (a *ReportsAPIService) GetMarketingV3CampaignsCampaignGuidReportsRevenueExecute(r ApiGetMarketingV3CampaignsCampaignGuidReportsRevenueRequest) (*RevenueAttributionAggregate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RevenueAttributionAggregate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetMarketingV3CampaignsCampaignGuidReportsRevenue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/campaigns/{campaignGuid}/reports/revenue"
	localVarPath = strings.Replace(localVarPath, "{"+"campaignGuid"+"}", url.PathEscape(parameterValueToString(r.campaignGuid, "campaignGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.attributionModel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attributionModel", r.attributionModel, "form", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
