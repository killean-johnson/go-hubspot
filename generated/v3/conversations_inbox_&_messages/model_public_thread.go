/*
Conversations Inbox & Messages

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conversations_inbox_&amp;_messages

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublicThread type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicThread{}

// PublicThread struct for PublicThread
type PublicThread struct {
	// The ID of the associated Contact in the CRM. If the Contact for the thread has not yet been added or created, the `associatedContactId` returned will be a visitorID and cannot be used to search for the Contact in the CRM.
	AssociatedContactId string `json:"associatedContactId"`
	ThreadAssociations *PublicThreadAssociations `json:"threadAssociations,omitempty"`
	AssignedTo *string `json:"assignedTo,omitempty"`
	// When the thread was created.
	CreatedAt time.Time `json:"createdAt"`
	// Whether this thread is archived.
	Archived *bool `json:"archived,omitempty"`
	OriginalChannelId string `json:"originalChannelId"`
	// The time that the latest message was sent or received on the thread.
	LatestMessageTimestamp *time.Time `json:"latestMessageTimestamp,omitempty"`
	// The time that the latest message was sent on the thread.
	LatestMessageSentTimestamp *time.Time `json:"latestMessageSentTimestamp,omitempty"`
	OriginalChannelAccountId string `json:"originalChannelAccountId"`
	// The unique ID of the thread.
	Id string `json:"id"`
	// When the thread was closed. Only set if the thread is closed.
	ClosedAt *time.Time `json:"closedAt,omitempty"`
	// Whether the thread is marked as spam.
	Spam bool `json:"spam"`
	// The ID of the conversations inbox containing the thread.
	InboxId string `json:"inboxId"`
	// The thread's status: `OPEN` or `CLOSED`.
	Status string `json:"status"`
	// The time that the latest message was sent on the thread.
	LatestMessageReceivedTimestamp *time.Time `json:"latestMessageReceivedTimestamp,omitempty"`
}

type _PublicThread PublicThread

// NewPublicThread instantiates a new PublicThread object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicThread(associatedContactId string, createdAt time.Time, originalChannelId string, originalChannelAccountId string, id string, spam bool, inboxId string, status string) *PublicThread {
	this := PublicThread{}
	this.AssociatedContactId = associatedContactId
	this.CreatedAt = createdAt
	this.OriginalChannelId = originalChannelId
	this.OriginalChannelAccountId = originalChannelAccountId
	this.Id = id
	this.Spam = spam
	this.InboxId = inboxId
	this.Status = status
	return &this
}

// NewPublicThreadWithDefaults instantiates a new PublicThread object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicThreadWithDefaults() *PublicThread {
	this := PublicThread{}
	return &this
}

// GetAssociatedContactId returns the AssociatedContactId field value
func (o *PublicThread) GetAssociatedContactId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssociatedContactId
}

// GetAssociatedContactIdOk returns a tuple with the AssociatedContactId field value
// and a boolean to check if the value has been set.
func (o *PublicThread) GetAssociatedContactIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssociatedContactId, true
}

// SetAssociatedContactId sets field value
func (o *PublicThread) SetAssociatedContactId(v string) {
	o.AssociatedContactId = v
}

// GetThreadAssociations returns the ThreadAssociations field value if set, zero value otherwise.
func (o *PublicThread) GetThreadAssociations() PublicThreadAssociations {
	if o == nil || IsNil(o.ThreadAssociations) {
		var ret PublicThreadAssociations
		return ret
	}
	return *o.ThreadAssociations
}

// GetThreadAssociationsOk returns a tuple with the ThreadAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicThread) GetThreadAssociationsOk() (*PublicThreadAssociations, bool) {
	if o == nil || IsNil(o.ThreadAssociations) {
		return nil, false
	}
	return o.ThreadAssociations, true
}

// HasThreadAssociations returns a boolean if a field has been set.
func (o *PublicThread) HasThreadAssociations() bool {
	if o != nil && !IsNil(o.ThreadAssociations) {
		return true
	}

	return false
}

// SetThreadAssociations gets a reference to the given PublicThreadAssociations and assigns it to the ThreadAssociations field.
func (o *PublicThread) SetThreadAssociations(v PublicThreadAssociations) {
	o.ThreadAssociations = &v
}

// GetAssignedTo returns the AssignedTo field value if set, zero value otherwise.
func (o *PublicThread) GetAssignedTo() string {
	if o == nil || IsNil(o.AssignedTo) {
		var ret string
		return ret
	}
	return *o.AssignedTo
}

// GetAssignedToOk returns a tuple with the AssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicThread) GetAssignedToOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedTo) {
		return nil, false
	}
	return o.AssignedTo, true
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *PublicThread) HasAssignedTo() bool {
	if o != nil && !IsNil(o.AssignedTo) {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given string and assigns it to the AssignedTo field.
func (o *PublicThread) SetAssignedTo(v string) {
	o.AssignedTo = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PublicThread) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicThread) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PublicThread) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *PublicThread) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicThread) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *PublicThread) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *PublicThread) SetArchived(v bool) {
	o.Archived = &v
}

// GetOriginalChannelId returns the OriginalChannelId field value
func (o *PublicThread) GetOriginalChannelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalChannelId
}

// GetOriginalChannelIdOk returns a tuple with the OriginalChannelId field value
// and a boolean to check if the value has been set.
func (o *PublicThread) GetOriginalChannelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalChannelId, true
}

// SetOriginalChannelId sets field value
func (o *PublicThread) SetOriginalChannelId(v string) {
	o.OriginalChannelId = v
}

// GetLatestMessageTimestamp returns the LatestMessageTimestamp field value if set, zero value otherwise.
func (o *PublicThread) GetLatestMessageTimestamp() time.Time {
	if o == nil || IsNil(o.LatestMessageTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LatestMessageTimestamp
}

// GetLatestMessageTimestampOk returns a tuple with the LatestMessageTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicThread) GetLatestMessageTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LatestMessageTimestamp) {
		return nil, false
	}
	return o.LatestMessageTimestamp, true
}

// HasLatestMessageTimestamp returns a boolean if a field has been set.
func (o *PublicThread) HasLatestMessageTimestamp() bool {
	if o != nil && !IsNil(o.LatestMessageTimestamp) {
		return true
	}

	return false
}

// SetLatestMessageTimestamp gets a reference to the given time.Time and assigns it to the LatestMessageTimestamp field.
func (o *PublicThread) SetLatestMessageTimestamp(v time.Time) {
	o.LatestMessageTimestamp = &v
}

// GetLatestMessageSentTimestamp returns the LatestMessageSentTimestamp field value if set, zero value otherwise.
func (o *PublicThread) GetLatestMessageSentTimestamp() time.Time {
	if o == nil || IsNil(o.LatestMessageSentTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LatestMessageSentTimestamp
}

// GetLatestMessageSentTimestampOk returns a tuple with the LatestMessageSentTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicThread) GetLatestMessageSentTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LatestMessageSentTimestamp) {
		return nil, false
	}
	return o.LatestMessageSentTimestamp, true
}

// HasLatestMessageSentTimestamp returns a boolean if a field has been set.
func (o *PublicThread) HasLatestMessageSentTimestamp() bool {
	if o != nil && !IsNil(o.LatestMessageSentTimestamp) {
		return true
	}

	return false
}

// SetLatestMessageSentTimestamp gets a reference to the given time.Time and assigns it to the LatestMessageSentTimestamp field.
func (o *PublicThread) SetLatestMessageSentTimestamp(v time.Time) {
	o.LatestMessageSentTimestamp = &v
}

// GetOriginalChannelAccountId returns the OriginalChannelAccountId field value
func (o *PublicThread) GetOriginalChannelAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalChannelAccountId
}

// GetOriginalChannelAccountIdOk returns a tuple with the OriginalChannelAccountId field value
// and a boolean to check if the value has been set.
func (o *PublicThread) GetOriginalChannelAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalChannelAccountId, true
}

// SetOriginalChannelAccountId sets field value
func (o *PublicThread) SetOriginalChannelAccountId(v string) {
	o.OriginalChannelAccountId = v
}

// GetId returns the Id field value
func (o *PublicThread) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicThread) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicThread) SetId(v string) {
	o.Id = v
}

// GetClosedAt returns the ClosedAt field value if set, zero value otherwise.
func (o *PublicThread) GetClosedAt() time.Time {
	if o == nil || IsNil(o.ClosedAt) {
		var ret time.Time
		return ret
	}
	return *o.ClosedAt
}

// GetClosedAtOk returns a tuple with the ClosedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicThread) GetClosedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosedAt) {
		return nil, false
	}
	return o.ClosedAt, true
}

// HasClosedAt returns a boolean if a field has been set.
func (o *PublicThread) HasClosedAt() bool {
	if o != nil && !IsNil(o.ClosedAt) {
		return true
	}

	return false
}

// SetClosedAt gets a reference to the given time.Time and assigns it to the ClosedAt field.
func (o *PublicThread) SetClosedAt(v time.Time) {
	o.ClosedAt = &v
}

// GetSpam returns the Spam field value
func (o *PublicThread) GetSpam() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Spam
}

// GetSpamOk returns a tuple with the Spam field value
// and a boolean to check if the value has been set.
func (o *PublicThread) GetSpamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spam, true
}

// SetSpam sets field value
func (o *PublicThread) SetSpam(v bool) {
	o.Spam = v
}

// GetInboxId returns the InboxId field value
func (o *PublicThread) GetInboxId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InboxId
}

// GetInboxIdOk returns a tuple with the InboxId field value
// and a boolean to check if the value has been set.
func (o *PublicThread) GetInboxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InboxId, true
}

// SetInboxId sets field value
func (o *PublicThread) SetInboxId(v string) {
	o.InboxId = v
}

// GetStatus returns the Status field value
func (o *PublicThread) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PublicThread) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PublicThread) SetStatus(v string) {
	o.Status = v
}

// GetLatestMessageReceivedTimestamp returns the LatestMessageReceivedTimestamp field value if set, zero value otherwise.
func (o *PublicThread) GetLatestMessageReceivedTimestamp() time.Time {
	if o == nil || IsNil(o.LatestMessageReceivedTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LatestMessageReceivedTimestamp
}

// GetLatestMessageReceivedTimestampOk returns a tuple with the LatestMessageReceivedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicThread) GetLatestMessageReceivedTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LatestMessageReceivedTimestamp) {
		return nil, false
	}
	return o.LatestMessageReceivedTimestamp, true
}

// HasLatestMessageReceivedTimestamp returns a boolean if a field has been set.
func (o *PublicThread) HasLatestMessageReceivedTimestamp() bool {
	if o != nil && !IsNil(o.LatestMessageReceivedTimestamp) {
		return true
	}

	return false
}

// SetLatestMessageReceivedTimestamp gets a reference to the given time.Time and assigns it to the LatestMessageReceivedTimestamp field.
func (o *PublicThread) SetLatestMessageReceivedTimestamp(v time.Time) {
	o.LatestMessageReceivedTimestamp = &v
}

func (o PublicThread) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicThread) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["associatedContactId"] = o.AssociatedContactId
	if !IsNil(o.ThreadAssociations) {
		toSerialize["threadAssociations"] = o.ThreadAssociations
	}
	if !IsNil(o.AssignedTo) {
		toSerialize["assignedTo"] = o.AssignedTo
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	toSerialize["originalChannelId"] = o.OriginalChannelId
	if !IsNil(o.LatestMessageTimestamp) {
		toSerialize["latestMessageTimestamp"] = o.LatestMessageTimestamp
	}
	if !IsNil(o.LatestMessageSentTimestamp) {
		toSerialize["latestMessageSentTimestamp"] = o.LatestMessageSentTimestamp
	}
	toSerialize["originalChannelAccountId"] = o.OriginalChannelAccountId
	toSerialize["id"] = o.Id
	if !IsNil(o.ClosedAt) {
		toSerialize["closedAt"] = o.ClosedAt
	}
	toSerialize["spam"] = o.Spam
	toSerialize["inboxId"] = o.InboxId
	toSerialize["status"] = o.Status
	if !IsNil(o.LatestMessageReceivedTimestamp) {
		toSerialize["latestMessageReceivedTimestamp"] = o.LatestMessageReceivedTimestamp
	}
	return toSerialize, nil
}

func (o *PublicThread) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"associatedContactId",
		"createdAt",
		"originalChannelId",
		"originalChannelAccountId",
		"id",
		"spam",
		"inboxId",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicThread := _PublicThread{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicThread)

	if err != nil {
		return err
	}

	*o = PublicThread(varPublicThread)

	return err
}

type NullablePublicThread struct {
	value *PublicThread
	isSet bool
}

func (v NullablePublicThread) Get() *PublicThread {
	return v.value
}

func (v *NullablePublicThread) Set(val *PublicThread) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicThread) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicThread) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicThread(val *PublicThread) *NullablePublicThread {
	return &NullablePublicThread{value: val, isSet: true}
}

func (v NullablePublicThread) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicThread) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


