/*
Conversations Inbox & Messages

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conversations_inbox_&amp;_messages

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AgentActor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgentActor{}

// AgentActor struct for AgentActor
type AgentActor struct {
	Type string `json:"type"`
	Id string `json:"id"`
	Name string `json:"name"`
	Email string `json:"email"`
	Avatar *string `json:"avatar,omitempty"`
}

type _AgentActor AgentActor

// NewAgentActor instantiates a new AgentActor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentActor(type_ string, id string, name string, email string) *AgentActor {
	this := AgentActor{}
	this.Type = type_
	this.Id = id
	this.Name = name
	this.Email = email
	return &this
}

// NewAgentActorWithDefaults instantiates a new AgentActor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentActorWithDefaults() *AgentActor {
	this := AgentActor{}
	var type_ string = "AGENT"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *AgentActor) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AgentActor) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AgentActor) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *AgentActor) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AgentActor) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AgentActor) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *AgentActor) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AgentActor) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AgentActor) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *AgentActor) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *AgentActor) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *AgentActor) SetEmail(v string) {
	o.Email = v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *AgentActor) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentActor) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *AgentActor) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *AgentActor) SetAvatar(v string) {
	o.Avatar = &v
}

func (o AgentActor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentActor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["email"] = o.Email
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	return toSerialize, nil
}

func (o *AgentActor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"id",
		"name",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgentActor := _AgentActor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAgentActor)

	if err != nil {
		return err
	}

	*o = AgentActor(varAgentActor)

	return err
}

type NullableAgentActor struct {
	value *AgentActor
	isSet bool
}

func (v NullableAgentActor) Get() *AgentActor {
	return v.value
}

func (v *NullableAgentActor) Set(val *AgentActor) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentActor) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentActor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentActor(val *AgentActor) *NullableAgentActor {
	return &NullableAgentActor{value: val, isSet: true}
}

func (v NullableAgentActor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentActor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


