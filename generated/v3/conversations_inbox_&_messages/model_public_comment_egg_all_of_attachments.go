/*
Conversations Inbox & Messages

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conversations_inbox_&amp;_messages

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PublicCommentEggAllOfAttachments - struct for PublicCommentEggAllOfAttachments
type PublicCommentEggAllOfAttachments struct {
	PublicFileEgg *PublicFileEgg
	PublicQuickRepliesEgg *PublicQuickRepliesEgg
}

// PublicFileEggAsPublicCommentEggAllOfAttachments is a convenience function that returns PublicFileEgg wrapped in PublicCommentEggAllOfAttachments
func PublicFileEggAsPublicCommentEggAllOfAttachments(v *PublicFileEgg) PublicCommentEggAllOfAttachments {
	return PublicCommentEggAllOfAttachments{
		PublicFileEgg: v,
	}
}

// PublicQuickRepliesEggAsPublicCommentEggAllOfAttachments is a convenience function that returns PublicQuickRepliesEgg wrapped in PublicCommentEggAllOfAttachments
func PublicQuickRepliesEggAsPublicCommentEggAllOfAttachments(v *PublicQuickRepliesEgg) PublicCommentEggAllOfAttachments {
	return PublicCommentEggAllOfAttachments{
		PublicQuickRepliesEgg: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PublicCommentEggAllOfAttachments) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PublicFileEgg
	err = newStrictDecoder(data).Decode(&dst.PublicFileEgg)
	if err == nil {
		jsonPublicFileEgg, _ := json.Marshal(dst.PublicFileEgg)
		if string(jsonPublicFileEgg) == "{}" { // empty struct
			dst.PublicFileEgg = nil
		} else {
			if err = validator.Validate(dst.PublicFileEgg); err != nil {
				dst.PublicFileEgg = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicFileEgg = nil
	}

	// try to unmarshal data into PublicQuickRepliesEgg
	err = newStrictDecoder(data).Decode(&dst.PublicQuickRepliesEgg)
	if err == nil {
		jsonPublicQuickRepliesEgg, _ := json.Marshal(dst.PublicQuickRepliesEgg)
		if string(jsonPublicQuickRepliesEgg) == "{}" { // empty struct
			dst.PublicQuickRepliesEgg = nil
		} else {
			if err = validator.Validate(dst.PublicQuickRepliesEgg); err != nil {
				dst.PublicQuickRepliesEgg = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicQuickRepliesEgg = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PublicFileEgg = nil
		dst.PublicQuickRepliesEgg = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PublicCommentEggAllOfAttachments)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PublicCommentEggAllOfAttachments)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PublicCommentEggAllOfAttachments) MarshalJSON() ([]byte, error) {
	if src.PublicFileEgg != nil {
		return json.Marshal(&src.PublicFileEgg)
	}

	if src.PublicQuickRepliesEgg != nil {
		return json.Marshal(&src.PublicQuickRepliesEgg)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PublicCommentEggAllOfAttachments) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PublicFileEgg != nil {
		return obj.PublicFileEgg
	}

	if obj.PublicQuickRepliesEgg != nil {
		return obj.PublicQuickRepliesEgg
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PublicCommentEggAllOfAttachments) GetActualInstanceValue() (interface{}) {
	if obj.PublicFileEgg != nil {
		return *obj.PublicFileEgg
	}

	if obj.PublicQuickRepliesEgg != nil {
		return *obj.PublicQuickRepliesEgg
	}

	// all schemas are nil
	return nil
}

type NullablePublicCommentEggAllOfAttachments struct {
	value *PublicCommentEggAllOfAttachments
	isSet bool
}

func (v NullablePublicCommentEggAllOfAttachments) Get() *PublicCommentEggAllOfAttachments {
	return v.value
}

func (v *NullablePublicCommentEggAllOfAttachments) Set(val *PublicCommentEggAllOfAttachments) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicCommentEggAllOfAttachments) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicCommentEggAllOfAttachments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicCommentEggAllOfAttachments(val *PublicCommentEggAllOfAttachments) *NullablePublicCommentEggAllOfAttachments {
	return &NullablePublicCommentEggAllOfAttachments{value: val, isSet: true}
}

func (v NullablePublicCommentEggAllOfAttachments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicCommentEggAllOfAttachments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


