/*
Conversations Inbox & Messages

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conversations_inbox_&amp;_messages

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PublicActor - struct for PublicActor
type PublicActor struct {
	AgentActor *AgentActor
	BotActor *BotActor
	EmailActor *EmailActor
	IntegratorActor *IntegratorActor
	SystemActor *SystemActor
	VisitorActor *VisitorActor
}

// AgentActorAsPublicActor is a convenience function that returns AgentActor wrapped in PublicActor
func AgentActorAsPublicActor(v *AgentActor) PublicActor {
	return PublicActor{
		AgentActor: v,
	}
}

// BotActorAsPublicActor is a convenience function that returns BotActor wrapped in PublicActor
func BotActorAsPublicActor(v *BotActor) PublicActor {
	return PublicActor{
		BotActor: v,
	}
}

// EmailActorAsPublicActor is a convenience function that returns EmailActor wrapped in PublicActor
func EmailActorAsPublicActor(v *EmailActor) PublicActor {
	return PublicActor{
		EmailActor: v,
	}
}

// IntegratorActorAsPublicActor is a convenience function that returns IntegratorActor wrapped in PublicActor
func IntegratorActorAsPublicActor(v *IntegratorActor) PublicActor {
	return PublicActor{
		IntegratorActor: v,
	}
}

// SystemActorAsPublicActor is a convenience function that returns SystemActor wrapped in PublicActor
func SystemActorAsPublicActor(v *SystemActor) PublicActor {
	return PublicActor{
		SystemActor: v,
	}
}

// VisitorActorAsPublicActor is a convenience function that returns VisitorActor wrapped in PublicActor
func VisitorActorAsPublicActor(v *VisitorActor) PublicActor {
	return PublicActor{
		VisitorActor: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PublicActor) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AgentActor
	err = newStrictDecoder(data).Decode(&dst.AgentActor)
	if err == nil {
		jsonAgentActor, _ := json.Marshal(dst.AgentActor)
		if string(jsonAgentActor) == "{}" { // empty struct
			dst.AgentActor = nil
		} else {
			if err = validator.Validate(dst.AgentActor); err != nil {
				dst.AgentActor = nil
			} else {
				match++
			}
		}
	} else {
		dst.AgentActor = nil
	}

	// try to unmarshal data into BotActor
	err = newStrictDecoder(data).Decode(&dst.BotActor)
	if err == nil {
		jsonBotActor, _ := json.Marshal(dst.BotActor)
		if string(jsonBotActor) == "{}" { // empty struct
			dst.BotActor = nil
		} else {
			if err = validator.Validate(dst.BotActor); err != nil {
				dst.BotActor = nil
			} else {
				match++
			}
		}
	} else {
		dst.BotActor = nil
	}

	// try to unmarshal data into EmailActor
	err = newStrictDecoder(data).Decode(&dst.EmailActor)
	if err == nil {
		jsonEmailActor, _ := json.Marshal(dst.EmailActor)
		if string(jsonEmailActor) == "{}" { // empty struct
			dst.EmailActor = nil
		} else {
			if err = validator.Validate(dst.EmailActor); err != nil {
				dst.EmailActor = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmailActor = nil
	}

	// try to unmarshal data into IntegratorActor
	err = newStrictDecoder(data).Decode(&dst.IntegratorActor)
	if err == nil {
		jsonIntegratorActor, _ := json.Marshal(dst.IntegratorActor)
		if string(jsonIntegratorActor) == "{}" { // empty struct
			dst.IntegratorActor = nil
		} else {
			if err = validator.Validate(dst.IntegratorActor); err != nil {
				dst.IntegratorActor = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntegratorActor = nil
	}

	// try to unmarshal data into SystemActor
	err = newStrictDecoder(data).Decode(&dst.SystemActor)
	if err == nil {
		jsonSystemActor, _ := json.Marshal(dst.SystemActor)
		if string(jsonSystemActor) == "{}" { // empty struct
			dst.SystemActor = nil
		} else {
			if err = validator.Validate(dst.SystemActor); err != nil {
				dst.SystemActor = nil
			} else {
				match++
			}
		}
	} else {
		dst.SystemActor = nil
	}

	// try to unmarshal data into VisitorActor
	err = newStrictDecoder(data).Decode(&dst.VisitorActor)
	if err == nil {
		jsonVisitorActor, _ := json.Marshal(dst.VisitorActor)
		if string(jsonVisitorActor) == "{}" { // empty struct
			dst.VisitorActor = nil
		} else {
			if err = validator.Validate(dst.VisitorActor); err != nil {
				dst.VisitorActor = nil
			} else {
				match++
			}
		}
	} else {
		dst.VisitorActor = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AgentActor = nil
		dst.BotActor = nil
		dst.EmailActor = nil
		dst.IntegratorActor = nil
		dst.SystemActor = nil
		dst.VisitorActor = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PublicActor)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PublicActor)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PublicActor) MarshalJSON() ([]byte, error) {
	if src.AgentActor != nil {
		return json.Marshal(&src.AgentActor)
	}

	if src.BotActor != nil {
		return json.Marshal(&src.BotActor)
	}

	if src.EmailActor != nil {
		return json.Marshal(&src.EmailActor)
	}

	if src.IntegratorActor != nil {
		return json.Marshal(&src.IntegratorActor)
	}

	if src.SystemActor != nil {
		return json.Marshal(&src.SystemActor)
	}

	if src.VisitorActor != nil {
		return json.Marshal(&src.VisitorActor)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PublicActor) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AgentActor != nil {
		return obj.AgentActor
	}

	if obj.BotActor != nil {
		return obj.BotActor
	}

	if obj.EmailActor != nil {
		return obj.EmailActor
	}

	if obj.IntegratorActor != nil {
		return obj.IntegratorActor
	}

	if obj.SystemActor != nil {
		return obj.SystemActor
	}

	if obj.VisitorActor != nil {
		return obj.VisitorActor
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PublicActor) GetActualInstanceValue() (interface{}) {
	if obj.AgentActor != nil {
		return *obj.AgentActor
	}

	if obj.BotActor != nil {
		return *obj.BotActor
	}

	if obj.EmailActor != nil {
		return *obj.EmailActor
	}

	if obj.IntegratorActor != nil {
		return *obj.IntegratorActor
	}

	if obj.SystemActor != nil {
		return *obj.SystemActor
	}

	if obj.VisitorActor != nil {
		return *obj.VisitorActor
	}

	// all schemas are nil
	return nil
}

type NullablePublicActor struct {
	value *PublicActor
	isSet bool
}

func (v NullablePublicActor) Get() *PublicActor {
	return v.value
}

func (v *NullablePublicActor) Set(val *PublicActor) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicActor) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicActor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicActor(val *PublicActor) *NullablePublicActor {
	return &NullablePublicActor{value: val, isSet: true}
}

func (v NullablePublicActor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicActor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


