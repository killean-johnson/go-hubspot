/*
Conversations Inbox & Messages

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conversations_inbox_&amp;_messages

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PublicMessageEgg - struct for PublicMessageEgg
type PublicMessageEgg struct {
	PublicCommentEgg *PublicCommentEgg
	PublicConversationsMessageEgg *PublicConversationsMessageEgg
}

// PublicCommentEggAsPublicMessageEgg is a convenience function that returns PublicCommentEgg wrapped in PublicMessageEgg
func PublicCommentEggAsPublicMessageEgg(v *PublicCommentEgg) PublicMessageEgg {
	return PublicMessageEgg{
		PublicCommentEgg: v,
	}
}

// PublicConversationsMessageEggAsPublicMessageEgg is a convenience function that returns PublicConversationsMessageEgg wrapped in PublicMessageEgg
func PublicConversationsMessageEggAsPublicMessageEgg(v *PublicConversationsMessageEgg) PublicMessageEgg {
	return PublicMessageEgg{
		PublicConversationsMessageEgg: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PublicMessageEgg) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PublicCommentEgg
	err = newStrictDecoder(data).Decode(&dst.PublicCommentEgg)
	if err == nil {
		jsonPublicCommentEgg, _ := json.Marshal(dst.PublicCommentEgg)
		if string(jsonPublicCommentEgg) == "{}" { // empty struct
			dst.PublicCommentEgg = nil
		} else {
			if err = validator.Validate(dst.PublicCommentEgg); err != nil {
				dst.PublicCommentEgg = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicCommentEgg = nil
	}

	// try to unmarshal data into PublicConversationsMessageEgg
	err = newStrictDecoder(data).Decode(&dst.PublicConversationsMessageEgg)
	if err == nil {
		jsonPublicConversationsMessageEgg, _ := json.Marshal(dst.PublicConversationsMessageEgg)
		if string(jsonPublicConversationsMessageEgg) == "{}" { // empty struct
			dst.PublicConversationsMessageEgg = nil
		} else {
			if err = validator.Validate(dst.PublicConversationsMessageEgg); err != nil {
				dst.PublicConversationsMessageEgg = nil
			} else {
				match++
			}
		}
	} else {
		dst.PublicConversationsMessageEgg = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PublicCommentEgg = nil
		dst.PublicConversationsMessageEgg = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PublicMessageEgg)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PublicMessageEgg)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PublicMessageEgg) MarshalJSON() ([]byte, error) {
	if src.PublicCommentEgg != nil {
		return json.Marshal(&src.PublicCommentEgg)
	}

	if src.PublicConversationsMessageEgg != nil {
		return json.Marshal(&src.PublicConversationsMessageEgg)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PublicMessageEgg) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PublicCommentEgg != nil {
		return obj.PublicCommentEgg
	}

	if obj.PublicConversationsMessageEgg != nil {
		return obj.PublicConversationsMessageEgg
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PublicMessageEgg) GetActualInstanceValue() (interface{}) {
	if obj.PublicCommentEgg != nil {
		return *obj.PublicCommentEgg
	}

	if obj.PublicConversationsMessageEgg != nil {
		return *obj.PublicConversationsMessageEgg
	}

	// all schemas are nil
	return nil
}

type NullablePublicMessageEgg struct {
	value *PublicMessageEgg
	isSet bool
}

func (v NullablePublicMessageEgg) Get() *PublicMessageEgg {
	return v.value
}

func (v *NullablePublicMessageEgg) Set(val *PublicMessageEgg) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicMessageEgg) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicMessageEgg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicMessageEgg(val *PublicMessageEgg) *NullablePublicMessageEgg {
	return &NullablePublicMessageEgg{value: val, isSet: true}
}

func (v NullablePublicMessageEgg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicMessageEgg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


