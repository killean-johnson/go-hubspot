/*
Conversations Inbox & Messages

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conversations_inbox_&amp;_messages

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicCommentEgg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicCommentEgg{}

// PublicCommentEgg struct for PublicCommentEgg
type PublicCommentEgg struct {
	Type string `json:"type"`
	Text string `json:"text"`
	RichText *string `json:"richText,omitempty"`
	Attachments []PublicCommentEggAllOfAttachments `json:"attachments"`
	Recipients []PublicRecipientEgg `json:"recipients"`
	SenderActorId string `json:"senderActorId"`
	ChannelId string `json:"channelId"`
	ChannelAccountId string `json:"channelAccountId"`
	Subject *string `json:"subject,omitempty"`
}

type _PublicCommentEgg PublicCommentEgg

// NewPublicCommentEgg instantiates a new PublicCommentEgg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicCommentEgg(type_ string, text string, attachments []PublicCommentEggAllOfAttachments, recipients []PublicRecipientEgg, senderActorId string, channelId string, channelAccountId string) *PublicCommentEgg {
	this := PublicCommentEgg{}
	this.Type = type_
	this.Text = text
	this.Attachments = attachments
	this.Recipients = recipients
	this.SenderActorId = senderActorId
	this.ChannelId = channelId
	this.ChannelAccountId = channelAccountId
	return &this
}

// NewPublicCommentEggWithDefaults instantiates a new PublicCommentEgg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicCommentEggWithDefaults() *PublicCommentEgg {
	this := PublicCommentEgg{}
	var type_ string = "COMMENT"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *PublicCommentEgg) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PublicCommentEgg) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PublicCommentEgg) SetType(v string) {
	o.Type = v
}

// GetText returns the Text field value
func (o *PublicCommentEgg) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *PublicCommentEgg) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *PublicCommentEgg) SetText(v string) {
	o.Text = v
}

// GetRichText returns the RichText field value if set, zero value otherwise.
func (o *PublicCommentEgg) GetRichText() string {
	if o == nil || IsNil(o.RichText) {
		var ret string
		return ret
	}
	return *o.RichText
}

// GetRichTextOk returns a tuple with the RichText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCommentEgg) GetRichTextOk() (*string, bool) {
	if o == nil || IsNil(o.RichText) {
		return nil, false
	}
	return o.RichText, true
}

// HasRichText returns a boolean if a field has been set.
func (o *PublicCommentEgg) HasRichText() bool {
	if o != nil && !IsNil(o.RichText) {
		return true
	}

	return false
}

// SetRichText gets a reference to the given string and assigns it to the RichText field.
func (o *PublicCommentEgg) SetRichText(v string) {
	o.RichText = &v
}

// GetAttachments returns the Attachments field value
func (o *PublicCommentEgg) GetAttachments() []PublicCommentEggAllOfAttachments {
	if o == nil {
		var ret []PublicCommentEggAllOfAttachments
		return ret
	}

	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value
// and a boolean to check if the value has been set.
func (o *PublicCommentEgg) GetAttachmentsOk() ([]PublicCommentEggAllOfAttachments, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attachments, true
}

// SetAttachments sets field value
func (o *PublicCommentEgg) SetAttachments(v []PublicCommentEggAllOfAttachments) {
	o.Attachments = v
}

// GetRecipients returns the Recipients field value
func (o *PublicCommentEgg) GetRecipients() []PublicRecipientEgg {
	if o == nil {
		var ret []PublicRecipientEgg
		return ret
	}

	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value
// and a boolean to check if the value has been set.
func (o *PublicCommentEgg) GetRecipientsOk() ([]PublicRecipientEgg, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recipients, true
}

// SetRecipients sets field value
func (o *PublicCommentEgg) SetRecipients(v []PublicRecipientEgg) {
	o.Recipients = v
}

// GetSenderActorId returns the SenderActorId field value
func (o *PublicCommentEgg) GetSenderActorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SenderActorId
}

// GetSenderActorIdOk returns a tuple with the SenderActorId field value
// and a boolean to check if the value has been set.
func (o *PublicCommentEgg) GetSenderActorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SenderActorId, true
}

// SetSenderActorId sets field value
func (o *PublicCommentEgg) SetSenderActorId(v string) {
	o.SenderActorId = v
}

// GetChannelId returns the ChannelId field value
func (o *PublicCommentEgg) GetChannelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value
// and a boolean to check if the value has been set.
func (o *PublicCommentEgg) GetChannelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChannelId, true
}

// SetChannelId sets field value
func (o *PublicCommentEgg) SetChannelId(v string) {
	o.ChannelId = v
}

// GetChannelAccountId returns the ChannelAccountId field value
func (o *PublicCommentEgg) GetChannelAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChannelAccountId
}

// GetChannelAccountIdOk returns a tuple with the ChannelAccountId field value
// and a boolean to check if the value has been set.
func (o *PublicCommentEgg) GetChannelAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChannelAccountId, true
}

// SetChannelAccountId sets field value
func (o *PublicCommentEgg) SetChannelAccountId(v string) {
	o.ChannelAccountId = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *PublicCommentEgg) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCommentEgg) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *PublicCommentEgg) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *PublicCommentEgg) SetSubject(v string) {
	o.Subject = &v
}

func (o PublicCommentEgg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicCommentEgg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["text"] = o.Text
	if !IsNil(o.RichText) {
		toSerialize["richText"] = o.RichText
	}
	toSerialize["attachments"] = o.Attachments
	toSerialize["recipients"] = o.Recipients
	toSerialize["senderActorId"] = o.SenderActorId
	toSerialize["channelId"] = o.ChannelId
	toSerialize["channelAccountId"] = o.ChannelAccountId
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	return toSerialize, nil
}

func (o *PublicCommentEgg) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"text",
		"attachments",
		"recipients",
		"senderActorId",
		"channelId",
		"channelAccountId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicCommentEgg := _PublicCommentEgg{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicCommentEgg)

	if err != nil {
		return err
	}

	*o = PublicCommentEgg(varPublicCommentEgg)

	return err
}

type NullablePublicCommentEgg struct {
	value *PublicCommentEgg
	isSet bool
}

func (v NullablePublicCommentEgg) Get() *PublicCommentEgg {
	return v.value
}

func (v *NullablePublicCommentEgg) Set(val *PublicCommentEgg) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicCommentEgg) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicCommentEgg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicCommentEgg(val *PublicCommentEgg) *NullablePublicCommentEgg {
	return &NullablePublicCommentEgg{value: val, isSet: true}
}

func (v NullablePublicCommentEgg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicCommentEgg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


