/*
Account Account Info

Get information about a HubSpot account and its API usage.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account_info

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ApiUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiUsage{}

// ApiUsage API usage and limits information for a HubSpot account.
type ApiUsage struct {
	// Indicates when the cache was last updated.
	CollectedAt time.Time `json:"collectedAt"`
	// Limits by which a single integration can consume the HubSpot public APIs.
	UsageLimit int32 `json:"usageLimit"`
	// Status of fetching the information, including if the data came from the cache.
	FetchStatus string `json:"fetchStatus"`
	// Name of the limit type.
	Name string `json:"name"`
	// How many API calls an account has made for the current day.
	CurrentUsage int32 `json:"currentUsage"`
	// Time that the limit will reset.
	ResetsAt *time.Time `json:"resetsAt,omitempty"`
}

type _ApiUsage ApiUsage

// NewApiUsage instantiates a new ApiUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiUsage(collectedAt time.Time, usageLimit int32, fetchStatus string, name string, currentUsage int32) *ApiUsage {
	this := ApiUsage{}
	this.CollectedAt = collectedAt
	this.UsageLimit = usageLimit
	this.FetchStatus = fetchStatus
	this.Name = name
	this.CurrentUsage = currentUsage
	return &this
}

// NewApiUsageWithDefaults instantiates a new ApiUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiUsageWithDefaults() *ApiUsage {
	this := ApiUsage{}
	return &this
}

// GetCollectedAt returns the CollectedAt field value
func (o *ApiUsage) GetCollectedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CollectedAt
}

// GetCollectedAtOk returns a tuple with the CollectedAt field value
// and a boolean to check if the value has been set.
func (o *ApiUsage) GetCollectedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectedAt, true
}

// SetCollectedAt sets field value
func (o *ApiUsage) SetCollectedAt(v time.Time) {
	o.CollectedAt = v
}

// GetUsageLimit returns the UsageLimit field value
func (o *ApiUsage) GetUsageLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UsageLimit
}

// GetUsageLimitOk returns a tuple with the UsageLimit field value
// and a boolean to check if the value has been set.
func (o *ApiUsage) GetUsageLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsageLimit, true
}

// SetUsageLimit sets field value
func (o *ApiUsage) SetUsageLimit(v int32) {
	o.UsageLimit = v
}

// GetFetchStatus returns the FetchStatus field value
func (o *ApiUsage) GetFetchStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FetchStatus
}

// GetFetchStatusOk returns a tuple with the FetchStatus field value
// and a boolean to check if the value has been set.
func (o *ApiUsage) GetFetchStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FetchStatus, true
}

// SetFetchStatus sets field value
func (o *ApiUsage) SetFetchStatus(v string) {
	o.FetchStatus = v
}

// GetName returns the Name field value
func (o *ApiUsage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiUsage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiUsage) SetName(v string) {
	o.Name = v
}

// GetCurrentUsage returns the CurrentUsage field value
func (o *ApiUsage) GetCurrentUsage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrentUsage
}

// GetCurrentUsageOk returns a tuple with the CurrentUsage field value
// and a boolean to check if the value has been set.
func (o *ApiUsage) GetCurrentUsageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentUsage, true
}

// SetCurrentUsage sets field value
func (o *ApiUsage) SetCurrentUsage(v int32) {
	o.CurrentUsage = v
}

// GetResetsAt returns the ResetsAt field value if set, zero value otherwise.
func (o *ApiUsage) GetResetsAt() time.Time {
	if o == nil || IsNil(o.ResetsAt) {
		var ret time.Time
		return ret
	}
	return *o.ResetsAt
}

// GetResetsAtOk returns a tuple with the ResetsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUsage) GetResetsAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ResetsAt) {
		return nil, false
	}
	return o.ResetsAt, true
}

// HasResetsAt returns a boolean if a field has been set.
func (o *ApiUsage) HasResetsAt() bool {
	if o != nil && !IsNil(o.ResetsAt) {
		return true
	}

	return false
}

// SetResetsAt gets a reference to the given time.Time and assigns it to the ResetsAt field.
func (o *ApiUsage) SetResetsAt(v time.Time) {
	o.ResetsAt = &v
}

func (o ApiUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collectedAt"] = o.CollectedAt
	toSerialize["usageLimit"] = o.UsageLimit
	toSerialize["fetchStatus"] = o.FetchStatus
	toSerialize["name"] = o.Name
	toSerialize["currentUsage"] = o.CurrentUsage
	if !IsNil(o.ResetsAt) {
		toSerialize["resetsAt"] = o.ResetsAt
	}
	return toSerialize, nil
}

func (o *ApiUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"collectedAt",
		"usageLimit",
		"fetchStatus",
		"name",
		"currentUsage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiUsage := _ApiUsage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiUsage)

	if err != nil {
		return err
	}

	*o = ApiUsage(varApiUsage)

	return err
}

type NullableApiUsage struct {
	value *ApiUsage
	isSet bool
}

func (v NullableApiUsage) Get() *ApiUsage {
	return v.value
}

func (v *NullableApiUsage) Set(val *ApiUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableApiUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableApiUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiUsage(val *ApiUsage) *NullableApiUsage {
	return &NullableApiUsage{value: val, isSet: true}
}

func (v NullableApiUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


