/*
Custom Objects

CRM objects such as companies, contacts, deals, line items, products, tickets, and quotes are standard objects in HubSpotâ€™s CRM. These core building blocks support custom properties, store critical information, and play a central role in the HubSpot application.  ## Supported Object Types  This API provides access to collections of CRM objects, which return a map of property names to values. Each object type has its own set of default properties, which can be found by exploring the [CRM Object Properties API](https://developers.hubspot.com/docs/methods/crm-properties/crm-properties-overview).  |Object Type |Properties returned by default | |--|--| | `companies` | `name`, `domain` | | `contacts` | `firstname`, `lastname`, `email` | | `deals` | `dealname`, `amount`, `closedate`, `pipeline`, `dealstage` | | `products` | `name`, `description`, `price` | | `tickets` | `content`, `hs_pipeline`, `hs_pipeline_stage`, `hs_ticket_category`, `hs_ticket_priority`, `subject` |  Find a list of all properties for an object type using the [CRM Object Properties](https://developers.hubspot.com/docs/methods/crm-properties/get-properties) API. e.g. `GET https://api.hubapi.com/properties/v2/companies/properties`. Change the properties returned in the response using the `properties` array in the request body.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package custom_objects

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BatchInputSimplePublicObjectBatchInputUpsert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchInputSimplePublicObjectBatchInputUpsert{}

// BatchInputSimplePublicObjectBatchInputUpsert struct for BatchInputSimplePublicObjectBatchInputUpsert
type BatchInputSimplePublicObjectBatchInputUpsert struct {
	Inputs []SimplePublicObjectBatchInputUpsert `json:"inputs"`
}

type _BatchInputSimplePublicObjectBatchInputUpsert BatchInputSimplePublicObjectBatchInputUpsert

// NewBatchInputSimplePublicObjectBatchInputUpsert instantiates a new BatchInputSimplePublicObjectBatchInputUpsert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchInputSimplePublicObjectBatchInputUpsert(inputs []SimplePublicObjectBatchInputUpsert) *BatchInputSimplePublicObjectBatchInputUpsert {
	this := BatchInputSimplePublicObjectBatchInputUpsert{}
	this.Inputs = inputs
	return &this
}

// NewBatchInputSimplePublicObjectBatchInputUpsertWithDefaults instantiates a new BatchInputSimplePublicObjectBatchInputUpsert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchInputSimplePublicObjectBatchInputUpsertWithDefaults() *BatchInputSimplePublicObjectBatchInputUpsert {
	this := BatchInputSimplePublicObjectBatchInputUpsert{}
	return &this
}

// GetInputs returns the Inputs field value
func (o *BatchInputSimplePublicObjectBatchInputUpsert) GetInputs() []SimplePublicObjectBatchInputUpsert {
	if o == nil {
		var ret []SimplePublicObjectBatchInputUpsert
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *BatchInputSimplePublicObjectBatchInputUpsert) GetInputsOk() ([]SimplePublicObjectBatchInputUpsert, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *BatchInputSimplePublicObjectBatchInputUpsert) SetInputs(v []SimplePublicObjectBatchInputUpsert) {
	o.Inputs = v
}

func (o BatchInputSimplePublicObjectBatchInputUpsert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchInputSimplePublicObjectBatchInputUpsert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["inputs"] = o.Inputs
	return toSerialize, nil
}

func (o *BatchInputSimplePublicObjectBatchInputUpsert) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"inputs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchInputSimplePublicObjectBatchInputUpsert := _BatchInputSimplePublicObjectBatchInputUpsert{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchInputSimplePublicObjectBatchInputUpsert)

	if err != nil {
		return err
	}

	*o = BatchInputSimplePublicObjectBatchInputUpsert(varBatchInputSimplePublicObjectBatchInputUpsert)

	return err
}

type NullableBatchInputSimplePublicObjectBatchInputUpsert struct {
	value *BatchInputSimplePublicObjectBatchInputUpsert
	isSet bool
}

func (v NullableBatchInputSimplePublicObjectBatchInputUpsert) Get() *BatchInputSimplePublicObjectBatchInputUpsert {
	return v.value
}

func (v *NullableBatchInputSimplePublicObjectBatchInputUpsert) Set(val *BatchInputSimplePublicObjectBatchInputUpsert) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchInputSimplePublicObjectBatchInputUpsert) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchInputSimplePublicObjectBatchInputUpsert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchInputSimplePublicObjectBatchInputUpsert(val *BatchInputSimplePublicObjectBatchInputUpsert) *NullableBatchInputSimplePublicObjectBatchInputUpsert {
	return &NullableBatchInputSimplePublicObjectBatchInputUpsert{value: val, isSet: true}
}

func (v NullableBatchInputSimplePublicObjectBatchInputUpsert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchInputSimplePublicObjectBatchInputUpsert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


