/*
Audit Logs

Get information about a HubSpot account and its API usage.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package audit_logs

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActingUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActingUser{}

// ActingUser struct for ActingUser
type ActingUser struct {
	// The email address of the user who performed the action.
	UserEmail *string `json:"userEmail,omitempty"`
	// The ID of the user who performed the action.
	UserId int32 `json:"userId"`
}

type _ActingUser ActingUser

// NewActingUser instantiates a new ActingUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActingUser(userId int32) *ActingUser {
	this := ActingUser{}
	this.UserId = userId
	return &this
}

// NewActingUserWithDefaults instantiates a new ActingUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActingUserWithDefaults() *ActingUser {
	this := ActingUser{}
	return &this
}

// GetUserEmail returns the UserEmail field value if set, zero value otherwise.
func (o *ActingUser) GetUserEmail() string {
	if o == nil || IsNil(o.UserEmail) {
		var ret string
		return ret
	}
	return *o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActingUser) GetUserEmailOk() (*string, bool) {
	if o == nil || IsNil(o.UserEmail) {
		return nil, false
	}
	return o.UserEmail, true
}

// HasUserEmail returns a boolean if a field has been set.
func (o *ActingUser) HasUserEmail() bool {
	if o != nil && !IsNil(o.UserEmail) {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given string and assigns it to the UserEmail field.
func (o *ActingUser) SetUserEmail(v string) {
	o.UserEmail = &v
}

// GetUserId returns the UserId field value
func (o *ActingUser) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ActingUser) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ActingUser) SetUserId(v int32) {
	o.UserId = v
}

func (o ActingUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActingUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserEmail) {
		toSerialize["userEmail"] = o.UserEmail
	}
	toSerialize["userId"] = o.UserId
	return toSerialize, nil
}

func (o *ActingUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActingUser := _ActingUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActingUser)

	if err != nil {
		return err
	}

	*o = ActingUser(varActingUser)

	return err
}

type NullableActingUser struct {
	value *ActingUser
	isSet bool
}

func (v NullableActingUser) Get() *ActingUser {
	return v.value
}

func (v *NullableActingUser) Set(val *ActingUser) {
	v.value = val
	v.isSet = true
}

func (v NullableActingUser) IsSet() bool {
	return v.isSet
}

func (v *NullableActingUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActingUser(val *ActingUser) *NullableActingUser {
	return &NullableActingUser{value: val, isSet: true}
}

func (v NullableActingUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActingUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


