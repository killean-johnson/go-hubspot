/*
Audit Logs

Get information about a HubSpot account and its API usage.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package audit_logs

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"time"
	"reflect"
)


// ActivityAPIService ActivityAPI service
type ActivityAPIService service

type ApiGetAccountInfoV3ActivityAuditLogsRequest struct {
	ctx context.Context
	ApiService *ActivityAPIService
	after *string
	limit *int32
	actingUserId *[]int32
	occurredAfter *time.Time
	occurredBefore *time.Time
	sort *[]string
}

// The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetAccountInfoV3ActivityAuditLogsRequest) After(after string) ApiGetAccountInfoV3ActivityAuditLogsRequest {
	r.after = &after
	return r
}

// The maximum number of results to display per page.
func (r ApiGetAccountInfoV3ActivityAuditLogsRequest) Limit(limit int32) ApiGetAccountInfoV3ActivityAuditLogsRequest {
	r.limit = &limit
	return r
}

// The ID of a user, for retrieving user-specific logs.
func (r ApiGetAccountInfoV3ActivityAuditLogsRequest) ActingUserId(actingUserId []int32) ApiGetAccountInfoV3ActivityAuditLogsRequest {
	r.actingUserId = &actingUserId
	return r
}

// A timestamp, as a starting point for retrieving activity logs. 
func (r ApiGetAccountInfoV3ActivityAuditLogsRequest) OccurredAfter(occurredAfter time.Time) ApiGetAccountInfoV3ActivityAuditLogsRequest {
	r.occurredAfter = &occurredAfter
	return r
}

// A timestamp, as an end point for retrieving activity logs. 
func (r ApiGetAccountInfoV3ActivityAuditLogsRequest) OccurredBefore(occurredBefore time.Time) ApiGetAccountInfoV3ActivityAuditLogsRequest {
	r.occurredBefore = &occurredBefore
	return r
}

// Set to &#x60;occurredAt&#x60; to order results by the time of the event. By default, events are ordered from oldest to newest.
func (r ApiGetAccountInfoV3ActivityAuditLogsRequest) Sort(sort []string) ApiGetAccountInfoV3ActivityAuditLogsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetAccountInfoV3ActivityAuditLogsRequest) Execute() (*CollectionResponsePublicApiUserActionEventForwardPaging, *http.Response, error) {
	return r.ApiService.GetAccountInfoV3ActivityAuditLogsExecute(r)
}

/*
GetAccountInfoV3ActivityAuditLogs Retrieve audit logs

Retrieve activity history for user actions related to approvals, content updates, CRM object updates, security activity, and more (Enterprise only). Learn more about [activities included in audit log exports](https://knowledge.hubspot.com/account-management/view-and-export-account-activity-history-in-a-centralized-audit-log?hubs_content=knowledge.hubspot.com/account-management/view-and-export-account-activity-history&hubs_content-cta=centralized%20audit%20log#data-included-in-the-centralized-audit-log).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAccountInfoV3ActivityAuditLogsRequest
*/
func (a *ActivityAPIService) GetAccountInfoV3ActivityAuditLogs(ctx context.Context) ApiGetAccountInfoV3ActivityAuditLogsRequest {
	return ApiGetAccountInfoV3ActivityAuditLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponsePublicApiUserActionEventForwardPaging
func (a *ActivityAPIService) GetAccountInfoV3ActivityAuditLogsExecute(r ApiGetAccountInfoV3ActivityAuditLogsRequest) (*CollectionResponsePublicApiUserActionEventForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponsePublicApiUserActionEventForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityAPIService.GetAccountInfoV3ActivityAuditLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account-info/v3/activity/audit-logs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.actingUserId != nil {
		t := *r.actingUserId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "actingUserId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "actingUserId", t, "form", "multi")
		}
	}
	if r.occurredAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredAfter", r.occurredAfter, "form", "")
	}
	if r.occurredBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredBefore", r.occurredBefore, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAccountInfoV3ActivityLoginRequest struct {
	ctx context.Context
	ApiService *ActivityAPIService
	after *string
	limit *int32
	userId *int32
}

// The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetAccountInfoV3ActivityLoginRequest) After(after string) ApiGetAccountInfoV3ActivityLoginRequest {
	r.after = &after
	return r
}

// The maximum number of results to display per page. Max value of limit is 200.
func (r ApiGetAccountInfoV3ActivityLoginRequest) Limit(limit int32) ApiGetAccountInfoV3ActivityLoginRequest {
	r.limit = &limit
	return r
}

// The ID of a user, for retrieving user-specific logs.
func (r ApiGetAccountInfoV3ActivityLoginRequest) UserId(userId int32) ApiGetAccountInfoV3ActivityLoginRequest {
	r.userId = &userId
	return r
}

func (r ApiGetAccountInfoV3ActivityLoginRequest) Execute() (*CollectionResponsePublicLoginAuditForwardPaging, *http.Response, error) {
	return r.ApiService.GetAccountInfoV3ActivityLoginExecute(r)
}

/*
GetAccountInfoV3ActivityLogin Retrieve login activity

Retrieve logs of user actions related to [login activity](https://knowledge.hubspot.com/account-management/view-and-export-account-activity-history#account-login-history).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAccountInfoV3ActivityLoginRequest
*/
func (a *ActivityAPIService) GetAccountInfoV3ActivityLogin(ctx context.Context) ApiGetAccountInfoV3ActivityLoginRequest {
	return ApiGetAccountInfoV3ActivityLoginRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponsePublicLoginAuditForwardPaging
func (a *ActivityAPIService) GetAccountInfoV3ActivityLoginExecute(r ApiGetAccountInfoV3ActivityLoginRequest) (*CollectionResponsePublicLoginAuditForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponsePublicLoginAuditForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityAPIService.GetAccountInfoV3ActivityLogin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account-info/v3/activity/login"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAccountInfoV3ActivitySecurityRequest struct {
	ctx context.Context
	ApiService *ActivityAPIService
	after *string
	limit *int32
	userId *int32
	fromTimestamp *int64
	toTimestamp *int64
}

// The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetAccountInfoV3ActivitySecurityRequest) After(after string) ApiGetAccountInfoV3ActivitySecurityRequest {
	r.after = &after
	return r
}

// The maximum number of results to display per page. Max value of limit is 200.
func (r ApiGetAccountInfoV3ActivitySecurityRequest) Limit(limit int32) ApiGetAccountInfoV3ActivitySecurityRequest {
	r.limit = &limit
	return r
}

// The ID of a user, for retrieving user-specific logs.
func (r ApiGetAccountInfoV3ActivitySecurityRequest) UserId(userId int32) ApiGetAccountInfoV3ActivitySecurityRequest {
	r.userId = &userId
	return r
}

// The start time, for retrieving logs within a specific timeframe.
func (r ApiGetAccountInfoV3ActivitySecurityRequest) FromTimestamp(fromTimestamp int64) ApiGetAccountInfoV3ActivitySecurityRequest {
	r.fromTimestamp = &fromTimestamp
	return r
}

// The end time, for retrieving logs within a specific timeframe.
func (r ApiGetAccountInfoV3ActivitySecurityRequest) ToTimestamp(toTimestamp int64) ApiGetAccountInfoV3ActivitySecurityRequest {
	r.toTimestamp = &toTimestamp
	return r
}

func (r ApiGetAccountInfoV3ActivitySecurityRequest) Execute() (*CollectionResponseHydratedCriticalActionForwardPaging, *http.Response, error) {
	return r.ApiService.GetAccountInfoV3ActivitySecurityExecute(r)
}

/*
GetAccountInfoV3ActivitySecurity Retrieve security history

Retrieve logs of user actions related to [security activity](https://knowledge.hubspot.com/account-management/view-and-export-account-activity-history#security-activity-history).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAccountInfoV3ActivitySecurityRequest
*/
func (a *ActivityAPIService) GetAccountInfoV3ActivitySecurity(ctx context.Context) ApiGetAccountInfoV3ActivitySecurityRequest {
	return ApiGetAccountInfoV3ActivitySecurityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseHydratedCriticalActionForwardPaging
func (a *ActivityAPIService) GetAccountInfoV3ActivitySecurityExecute(r ApiGetAccountInfoV3ActivitySecurityRequest) (*CollectionResponseHydratedCriticalActionForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseHydratedCriticalActionForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityAPIService.GetAccountInfoV3ActivitySecurity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account-info/v3/activity/security"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.fromTimestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromTimestamp", r.fromTimestamp, "form", "")
	}
	if r.toTimestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toTimestamp", r.toTimestamp, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
