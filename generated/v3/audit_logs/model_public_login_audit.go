/*
Audit Logs

Get information about a HubSpot account and its API usage.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package audit_logs

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublicLoginAudit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicLoginAudit{}

// PublicLoginAudit Details about the a particular login activity for a HubSpot account.
type PublicLoginAudit struct {
	// The approximate region code of the login.
	RegionCode *string `json:"regionCode,omitempty"`
	// The approximate country code of the login.
	CountryCode *string `json:"countryCode,omitempty"`
	// IP address where the activity originated.
	IpAddress *string `json:"ipAddress,omitempty"`
	Location *string `json:"location,omitempty"`
	// Information about the device used for logging in.
	UserAgent *string `json:"userAgent,omitempty"`
	// The login activity's unique ID.
	Id string `json:"id"`
	// The time the login took place.
	LoginAt time.Time `json:"loginAt"`
	// The user's unique ID.
	UserId *int32 `json:"userId,omitempty"`
	// Email address of the user associated with the login.
	Email *string `json:"email,omitempty"`
	// Whether the login was successful or not.
	LoginSucceeded bool `json:"loginSucceeded"`
}

type _PublicLoginAudit PublicLoginAudit

// NewPublicLoginAudit instantiates a new PublicLoginAudit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicLoginAudit(id string, loginAt time.Time, loginSucceeded bool) *PublicLoginAudit {
	this := PublicLoginAudit{}
	this.Id = id
	this.LoginAt = loginAt
	this.LoginSucceeded = loginSucceeded
	return &this
}

// NewPublicLoginAuditWithDefaults instantiates a new PublicLoginAudit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicLoginAuditWithDefaults() *PublicLoginAudit {
	this := PublicLoginAudit{}
	return &this
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *PublicLoginAudit) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicLoginAudit) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *PublicLoginAudit) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *PublicLoginAudit) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *PublicLoginAudit) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicLoginAudit) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *PublicLoginAudit) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *PublicLoginAudit) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *PublicLoginAudit) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicLoginAudit) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *PublicLoginAudit) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *PublicLoginAudit) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *PublicLoginAudit) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicLoginAudit) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *PublicLoginAudit) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *PublicLoginAudit) SetLocation(v string) {
	o.Location = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *PublicLoginAudit) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicLoginAudit) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *PublicLoginAudit) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *PublicLoginAudit) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetId returns the Id field value
func (o *PublicLoginAudit) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicLoginAudit) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicLoginAudit) SetId(v string) {
	o.Id = v
}

// GetLoginAt returns the LoginAt field value
func (o *PublicLoginAudit) GetLoginAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LoginAt
}

// GetLoginAtOk returns a tuple with the LoginAt field value
// and a boolean to check if the value has been set.
func (o *PublicLoginAudit) GetLoginAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoginAt, true
}

// SetLoginAt sets field value
func (o *PublicLoginAudit) SetLoginAt(v time.Time) {
	o.LoginAt = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PublicLoginAudit) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicLoginAudit) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PublicLoginAudit) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *PublicLoginAudit) SetUserId(v int32) {
	o.UserId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PublicLoginAudit) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicLoginAudit) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PublicLoginAudit) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *PublicLoginAudit) SetEmail(v string) {
	o.Email = &v
}

// GetLoginSucceeded returns the LoginSucceeded field value
func (o *PublicLoginAudit) GetLoginSucceeded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LoginSucceeded
}

// GetLoginSucceededOk returns a tuple with the LoginSucceeded field value
// and a boolean to check if the value has been set.
func (o *PublicLoginAudit) GetLoginSucceededOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoginSucceeded, true
}

// SetLoginSucceeded sets field value
func (o *PublicLoginAudit) SetLoginSucceeded(v bool) {
	o.LoginSucceeded = v
}

func (o PublicLoginAudit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicLoginAudit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RegionCode) {
		toSerialize["regionCode"] = o.RegionCode
	}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.UserAgent) {
		toSerialize["userAgent"] = o.UserAgent
	}
	toSerialize["id"] = o.Id
	toSerialize["loginAt"] = o.LoginAt
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	toSerialize["loginSucceeded"] = o.LoginSucceeded
	return toSerialize, nil
}

func (o *PublicLoginAudit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"loginAt",
		"loginSucceeded",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicLoginAudit := _PublicLoginAudit{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicLoginAudit)

	if err != nil {
		return err
	}

	*o = PublicLoginAudit(varPublicLoginAudit)

	return err
}

type NullablePublicLoginAudit struct {
	value *PublicLoginAudit
	isSet bool
}

func (v NullablePublicLoginAudit) Get() *PublicLoginAudit {
	return v.value
}

func (v *NullablePublicLoginAudit) Set(val *PublicLoginAudit) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicLoginAudit) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicLoginAudit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicLoginAudit(val *PublicLoginAudit) *NullablePublicLoginAudit {
	return &NullablePublicLoginAudit{value: val, isSet: true}
}

func (v NullablePublicLoginAudit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicLoginAudit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


