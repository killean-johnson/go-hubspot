/*
Audit Logs

Get information about a HubSpot account and its API usage.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package audit_logs

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublicApiUserActionEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicApiUserActionEvent{}

// PublicApiUserActionEvent struct for PublicApiUserActionEvent
type PublicApiUserActionEvent struct {
	ActingUser ActingUser `json:"actingUser"`
	// The subcategory of the activity.
	SubCategory *string `json:"subCategory,omitempty"`
	// The time that the action occurred at.
	OccurredAt time.Time `json:"occurredAt"`
	// The ID of the impacted object.
	TargetObjectId *string `json:"targetObjectId,omitempty"`
	// The type of action taken.
	Action string `json:"action"`
	// The unique ID of the activity.
	Id string `json:"id"`
	// The category of the activity.
	Category string `json:"category"`
}

type _PublicApiUserActionEvent PublicApiUserActionEvent

// NewPublicApiUserActionEvent instantiates a new PublicApiUserActionEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicApiUserActionEvent(actingUser ActingUser, occurredAt time.Time, action string, id string, category string) *PublicApiUserActionEvent {
	this := PublicApiUserActionEvent{}
	this.ActingUser = actingUser
	this.OccurredAt = occurredAt
	this.Action = action
	this.Id = id
	this.Category = category
	return &this
}

// NewPublicApiUserActionEventWithDefaults instantiates a new PublicApiUserActionEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicApiUserActionEventWithDefaults() *PublicApiUserActionEvent {
	this := PublicApiUserActionEvent{}
	return &this
}

// GetActingUser returns the ActingUser field value
func (o *PublicApiUserActionEvent) GetActingUser() ActingUser {
	if o == nil {
		var ret ActingUser
		return ret
	}

	return o.ActingUser
}

// GetActingUserOk returns a tuple with the ActingUser field value
// and a boolean to check if the value has been set.
func (o *PublicApiUserActionEvent) GetActingUserOk() (*ActingUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActingUser, true
}

// SetActingUser sets field value
func (o *PublicApiUserActionEvent) SetActingUser(v ActingUser) {
	o.ActingUser = v
}

// GetSubCategory returns the SubCategory field value if set, zero value otherwise.
func (o *PublicApiUserActionEvent) GetSubCategory() string {
	if o == nil || IsNil(o.SubCategory) {
		var ret string
		return ret
	}
	return *o.SubCategory
}

// GetSubCategoryOk returns a tuple with the SubCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicApiUserActionEvent) GetSubCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.SubCategory) {
		return nil, false
	}
	return o.SubCategory, true
}

// HasSubCategory returns a boolean if a field has been set.
func (o *PublicApiUserActionEvent) HasSubCategory() bool {
	if o != nil && !IsNil(o.SubCategory) {
		return true
	}

	return false
}

// SetSubCategory gets a reference to the given string and assigns it to the SubCategory field.
func (o *PublicApiUserActionEvent) SetSubCategory(v string) {
	o.SubCategory = &v
}

// GetOccurredAt returns the OccurredAt field value
func (o *PublicApiUserActionEvent) GetOccurredAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.OccurredAt
}

// GetOccurredAtOk returns a tuple with the OccurredAt field value
// and a boolean to check if the value has been set.
func (o *PublicApiUserActionEvent) GetOccurredAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OccurredAt, true
}

// SetOccurredAt sets field value
func (o *PublicApiUserActionEvent) SetOccurredAt(v time.Time) {
	o.OccurredAt = v
}

// GetTargetObjectId returns the TargetObjectId field value if set, zero value otherwise.
func (o *PublicApiUserActionEvent) GetTargetObjectId() string {
	if o == nil || IsNil(o.TargetObjectId) {
		var ret string
		return ret
	}
	return *o.TargetObjectId
}

// GetTargetObjectIdOk returns a tuple with the TargetObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicApiUserActionEvent) GetTargetObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetObjectId) {
		return nil, false
	}
	return o.TargetObjectId, true
}

// HasTargetObjectId returns a boolean if a field has been set.
func (o *PublicApiUserActionEvent) HasTargetObjectId() bool {
	if o != nil && !IsNil(o.TargetObjectId) {
		return true
	}

	return false
}

// SetTargetObjectId gets a reference to the given string and assigns it to the TargetObjectId field.
func (o *PublicApiUserActionEvent) SetTargetObjectId(v string) {
	o.TargetObjectId = &v
}

// GetAction returns the Action field value
func (o *PublicApiUserActionEvent) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PublicApiUserActionEvent) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *PublicApiUserActionEvent) SetAction(v string) {
	o.Action = v
}

// GetId returns the Id field value
func (o *PublicApiUserActionEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicApiUserActionEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicApiUserActionEvent) SetId(v string) {
	o.Id = v
}

// GetCategory returns the Category field value
func (o *PublicApiUserActionEvent) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *PublicApiUserActionEvent) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *PublicApiUserActionEvent) SetCategory(v string) {
	o.Category = v
}

func (o PublicApiUserActionEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicApiUserActionEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["actingUser"] = o.ActingUser
	if !IsNil(o.SubCategory) {
		toSerialize["subCategory"] = o.SubCategory
	}
	toSerialize["occurredAt"] = o.OccurredAt
	if !IsNil(o.TargetObjectId) {
		toSerialize["targetObjectId"] = o.TargetObjectId
	}
	toSerialize["action"] = o.Action
	toSerialize["id"] = o.Id
	toSerialize["category"] = o.Category
	return toSerialize, nil
}

func (o *PublicApiUserActionEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"actingUser",
		"occurredAt",
		"action",
		"id",
		"category",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicApiUserActionEvent := _PublicApiUserActionEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicApiUserActionEvent)

	if err != nil {
		return err
	}

	*o = PublicApiUserActionEvent(varPublicApiUserActionEvent)

	return err
}

type NullablePublicApiUserActionEvent struct {
	value *PublicApiUserActionEvent
	isSet bool
}

func (v NullablePublicApiUserActionEvent) Get() *PublicApiUserActionEvent {
	return v.value
}

func (v *NullablePublicApiUserActionEvent) Set(val *PublicApiUserActionEvent) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicApiUserActionEvent) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicApiUserActionEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicApiUserActionEvent(val *PublicApiUserActionEvent) *NullablePublicApiUserActionEvent {
	return &NullablePublicApiUserActionEvent{value: val, isSet: true}
}

func (v NullablePublicApiUserActionEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicApiUserActionEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


