/*
Marketing Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublicList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicList{}

// PublicList struct for PublicList
type PublicList struct {
	ProcessingType string `json:"processingType"`
	ObjectTypeId string `json:"objectTypeId"`
	UpdatedById *string `json:"updatedById,omitempty"`
	FiltersUpdatedAt *time.Time `json:"filtersUpdatedAt,omitempty"`
	ListId string `json:"listId"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	ProcessingStatus string `json:"processingStatus"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	ListVersion int32 `json:"listVersion"`
	Size *int64 `json:"size,omitempty"`
	Name string `json:"name"`
	CreatedById *string `json:"createdById,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type _PublicList PublicList

// NewPublicList instantiates a new PublicList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicList(processingType string, objectTypeId string, listId string, processingStatus string, listVersion int32, name string) *PublicList {
	this := PublicList{}
	this.ProcessingType = processingType
	this.ObjectTypeId = objectTypeId
	this.ListId = listId
	this.ProcessingStatus = processingStatus
	this.ListVersion = listVersion
	this.Name = name
	return &this
}

// NewPublicListWithDefaults instantiates a new PublicList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicListWithDefaults() *PublicList {
	this := PublicList{}
	return &this
}

// GetProcessingType returns the ProcessingType field value
func (o *PublicList) GetProcessingType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessingType
}

// GetProcessingTypeOk returns a tuple with the ProcessingType field value
// and a boolean to check if the value has been set.
func (o *PublicList) GetProcessingTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessingType, true
}

// SetProcessingType sets field value
func (o *PublicList) SetProcessingType(v string) {
	o.ProcessingType = v
}

// GetObjectTypeId returns the ObjectTypeId field value
func (o *PublicList) GetObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *PublicList) GetObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectTypeId, true
}

// SetObjectTypeId sets field value
func (o *PublicList) SetObjectTypeId(v string) {
	o.ObjectTypeId = v
}

// GetUpdatedById returns the UpdatedById field value if set, zero value otherwise.
func (o *PublicList) GetUpdatedById() string {
	if o == nil || IsNil(o.UpdatedById) {
		var ret string
		return ret
	}
	return *o.UpdatedById
}

// GetUpdatedByIdOk returns a tuple with the UpdatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicList) GetUpdatedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedById) {
		return nil, false
	}
	return o.UpdatedById, true
}

// HasUpdatedById returns a boolean if a field has been set.
func (o *PublicList) HasUpdatedById() bool {
	if o != nil && !IsNil(o.UpdatedById) {
		return true
	}

	return false
}

// SetUpdatedById gets a reference to the given string and assigns it to the UpdatedById field.
func (o *PublicList) SetUpdatedById(v string) {
	o.UpdatedById = &v
}

// GetFiltersUpdatedAt returns the FiltersUpdatedAt field value if set, zero value otherwise.
func (o *PublicList) GetFiltersUpdatedAt() time.Time {
	if o == nil || IsNil(o.FiltersUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.FiltersUpdatedAt
}

// GetFiltersUpdatedAtOk returns a tuple with the FiltersUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicList) GetFiltersUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FiltersUpdatedAt) {
		return nil, false
	}
	return o.FiltersUpdatedAt, true
}

// HasFiltersUpdatedAt returns a boolean if a field has been set.
func (o *PublicList) HasFiltersUpdatedAt() bool {
	if o != nil && !IsNil(o.FiltersUpdatedAt) {
		return true
	}

	return false
}

// SetFiltersUpdatedAt gets a reference to the given time.Time and assigns it to the FiltersUpdatedAt field.
func (o *PublicList) SetFiltersUpdatedAt(v time.Time) {
	o.FiltersUpdatedAt = &v
}

// GetListId returns the ListId field value
func (o *PublicList) GetListId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListId
}

// GetListIdOk returns a tuple with the ListId field value
// and a boolean to check if the value has been set.
func (o *PublicList) GetListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListId, true
}

// SetListId sets field value
func (o *PublicList) SetListId(v string) {
	o.ListId = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PublicList) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicList) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PublicList) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PublicList) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetProcessingStatus returns the ProcessingStatus field value
func (o *PublicList) GetProcessingStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessingStatus
}

// GetProcessingStatusOk returns a tuple with the ProcessingStatus field value
// and a boolean to check if the value has been set.
func (o *PublicList) GetProcessingStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessingStatus, true
}

// SetProcessingStatus sets field value
func (o *PublicList) SetProcessingStatus(v string) {
	o.ProcessingStatus = v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *PublicList) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicList) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *PublicList) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *PublicList) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetListVersion returns the ListVersion field value
func (o *PublicList) GetListVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ListVersion
}

// GetListVersionOk returns a tuple with the ListVersion field value
// and a boolean to check if the value has been set.
func (o *PublicList) GetListVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListVersion, true
}

// SetListVersion sets field value
func (o *PublicList) SetListVersion(v int32) {
	o.ListVersion = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PublicList) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicList) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PublicList) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *PublicList) SetSize(v int64) {
	o.Size = &v
}

// GetName returns the Name field value
func (o *PublicList) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicList) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicList) SetName(v string) {
	o.Name = v
}

// GetCreatedById returns the CreatedById field value if set, zero value otherwise.
func (o *PublicList) GetCreatedById() string {
	if o == nil || IsNil(o.CreatedById) {
		var ret string
		return ret
	}
	return *o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicList) GetCreatedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedById) {
		return nil, false
	}
	return o.CreatedById, true
}

// HasCreatedById returns a boolean if a field has been set.
func (o *PublicList) HasCreatedById() bool {
	if o != nil && !IsNil(o.CreatedById) {
		return true
	}

	return false
}

// SetCreatedById gets a reference to the given string and assigns it to the CreatedById field.
func (o *PublicList) SetCreatedById(v string) {
	o.CreatedById = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PublicList) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicList) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PublicList) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PublicList) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o PublicList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["processingType"] = o.ProcessingType
	toSerialize["objectTypeId"] = o.ObjectTypeId
	if !IsNil(o.UpdatedById) {
		toSerialize["updatedById"] = o.UpdatedById
	}
	if !IsNil(o.FiltersUpdatedAt) {
		toSerialize["filtersUpdatedAt"] = o.FiltersUpdatedAt
	}
	toSerialize["listId"] = o.ListId
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	toSerialize["processingStatus"] = o.ProcessingStatus
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	toSerialize["listVersion"] = o.ListVersion
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.CreatedById) {
		toSerialize["createdById"] = o.CreatedById
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *PublicList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"processingType",
		"objectTypeId",
		"listId",
		"processingStatus",
		"listVersion",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicList := _PublicList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicList)

	if err != nil {
		return err
	}

	*o = PublicList(varPublicList)

	return err
}

type NullablePublicList struct {
	value *PublicList
	isSet bool
}

func (v NullablePublicList) Get() *PublicList {
	return v.value
}

func (v *NullablePublicList) Set(val *PublicList) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicList) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicList(val *PublicList) *NullablePublicList {
	return &NullablePublicList{value: val, isSet: true}
}

func (v NullablePublicList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


