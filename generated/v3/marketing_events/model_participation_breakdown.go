/*
Marketing Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ParticipationBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParticipationBreakdown{}

// ParticipationBreakdown struct for ParticipationBreakdown
type ParticipationBreakdown struct {
	Associations ParticipationAssociations `json:"associations"`
	CreatedAt time.Time `json:"createdAt"`
	Id string `json:"id"`
	Properties ParticipationProperties `json:"properties"`
}

type _ParticipationBreakdown ParticipationBreakdown

// NewParticipationBreakdown instantiates a new ParticipationBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipationBreakdown(associations ParticipationAssociations, createdAt time.Time, id string, properties ParticipationProperties) *ParticipationBreakdown {
	this := ParticipationBreakdown{}
	this.Associations = associations
	this.CreatedAt = createdAt
	this.Id = id
	this.Properties = properties
	return &this
}

// NewParticipationBreakdownWithDefaults instantiates a new ParticipationBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipationBreakdownWithDefaults() *ParticipationBreakdown {
	this := ParticipationBreakdown{}
	return &this
}

// GetAssociations returns the Associations field value
func (o *ParticipationBreakdown) GetAssociations() ParticipationAssociations {
	if o == nil {
		var ret ParticipationAssociations
		return ret
	}

	return o.Associations
}

// GetAssociationsOk returns a tuple with the Associations field value
// and a boolean to check if the value has been set.
func (o *ParticipationBreakdown) GetAssociationsOk() (*ParticipationAssociations, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Associations, true
}

// SetAssociations sets field value
func (o *ParticipationBreakdown) SetAssociations(v ParticipationAssociations) {
	o.Associations = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ParticipationBreakdown) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ParticipationBreakdown) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ParticipationBreakdown) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *ParticipationBreakdown) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ParticipationBreakdown) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ParticipationBreakdown) SetId(v string) {
	o.Id = v
}

// GetProperties returns the Properties field value
func (o *ParticipationBreakdown) GetProperties() ParticipationProperties {
	if o == nil {
		var ret ParticipationProperties
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *ParticipationBreakdown) GetPropertiesOk() (*ParticipationProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *ParticipationBreakdown) SetProperties(v ParticipationProperties) {
	o.Properties = v
}

func (o ParticipationBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParticipationBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["associations"] = o.Associations
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["id"] = o.Id
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

func (o *ParticipationBreakdown) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"associations",
		"createdAt",
		"id",
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParticipationBreakdown := _ParticipationBreakdown{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParticipationBreakdown)

	if err != nil {
		return err
	}

	*o = ParticipationBreakdown(varParticipationBreakdown)

	return err
}

type NullableParticipationBreakdown struct {
	value *ParticipationBreakdown
	isSet bool
}

func (v NullableParticipationBreakdown) Get() *ParticipationBreakdown {
	return v.value
}

func (v *NullableParticipationBreakdown) Set(val *ParticipationBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipationBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipationBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipationBreakdown(val *ParticipationBreakdown) *NullableParticipationBreakdown {
	return &NullableParticipationBreakdown{value: val, isSet: true}
}

func (v NullableParticipationBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipationBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


