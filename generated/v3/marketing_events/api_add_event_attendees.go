/*
Marketing Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
)


// AddEventAttendeesAPIService AddEventAttendeesAPI service
type AddEventAttendeesAPIService service

type ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsRequest struct {
	ctx context.Context
	ApiService *AddEventAttendeesAPIService
	externalEventId string
	subscriberState string
	batchInputMarketingEventSubscriber *BatchInputMarketingEventSubscriber
	externalAccountId *string
}

func (r ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsRequest) BatchInputMarketingEventSubscriber(batchInputMarketingEventSubscriber BatchInputMarketingEventSubscriber) ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsRequest {
	r.batchInputMarketingEventSubscriber = &batchInputMarketingEventSubscriber
	return r
}

// The accountId that is associated with this marketing event in the external event application
func (r ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsRequest) ExternalAccountId(externalAccountId string) ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsRequest {
	r.externalAccountId = &externalAccountId
	return r
}

func (r ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsRequest) Execute() (*BatchResponseSubscriberVidResponse, *http.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsExecute(r)
}

/*
PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIds Record Participants by ContactId with Marketing Event External Ids

Records the participation of multiple HubSpot contacts in a Marketing Event using their HubSpot contact IDs.

Additional Functionality:
- Adds a timeline event to the contacts.

Allowed Properties:
For the state "attend":
- joinedAt
- leftAt

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event in the external event application
 @param subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: 'register', 'attend' or 'cancel'.
 @return ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsRequest
*/
func (a *AddEventAttendeesAPIService) PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIds(ctx context.Context, externalEventId string, subscriberState string) ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsRequest {
	return ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsRequest{
		ApiService: a,
		ctx: ctx,
		externalEventId: externalEventId,
		subscriberState: subscriberState,
	}
}

// Execute executes the request
//  @return BatchResponseSubscriberVidResponse
func (a *AddEventAttendeesAPIService) PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsExecute(r ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIdsRequest) (*BatchResponseSubscriberVidResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponseSubscriberVidResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddEventAttendeesAPIService.PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateRecordByContactIds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/create"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterValueToString(r.externalEventId, "externalEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriberState"+"}", url.PathEscape(parameterValueToString(r.subscriberState, "subscriberState")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputMarketingEventSubscriber == nil {
		return localVarReturnValue, nil, reportError("batchInputMarketingEventSubscriber is required and must be specified")
	}

	if r.externalAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalAccountId", r.externalAccountId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputMarketingEventSubscriber
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsRequest struct {
	ctx context.Context
	ApiService *AddEventAttendeesAPIService
	externalEventId string
	subscriberState string
	batchInputMarketingEventEmailSubscriber *BatchInputMarketingEventEmailSubscriber
	externalAccountId *string
}

func (r ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsRequest) BatchInputMarketingEventEmailSubscriber(batchInputMarketingEventEmailSubscriber BatchInputMarketingEventEmailSubscriber) ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsRequest {
	r.batchInputMarketingEventEmailSubscriber = &batchInputMarketingEventEmailSubscriber
	return r
}

// The accountId that is associated with this marketing event in the external event application
func (r ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsRequest) ExternalAccountId(externalAccountId string) ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsRequest {
	r.externalAccountId = &externalAccountId
	return r
}

func (r ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsRequest) Execute() (*BatchResponseSubscriberEmailResponse, *http.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsExecute(r)
}

/*
PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmails Record Participants by Email with Marketing Event External Ids

Records the participation of multiple HubSpot contacts in a Marketing Event using their email addresses.

If a contact does not exist, it will be automatically created. The contactProperties field is used exclusively for creating new contacts and will not update properties of existing contacts.

Additional Functionality:
- Adds a timeline event to the contacts.

Allowed Properties:
For the state "attend":
- joinedAt
- leftAt

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event in the external event application
 @param subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: 'register', 'attend' or 'cancel'.
 @return ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsRequest
*/
func (a *AddEventAttendeesAPIService) PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmails(ctx context.Context, externalEventId string, subscriberState string) ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsRequest {
	return ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsRequest{
		ApiService: a,
		ctx: ctx,
		externalEventId: externalEventId,
		subscriberState: subscriberState,
	}
}

// Execute executes the request
//  @return BatchResponseSubscriberEmailResponse
func (a *AddEventAttendeesAPIService) PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsExecute(r ApiPostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmailsRequest) (*BatchResponseSubscriberEmailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponseSubscriberEmailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddEventAttendeesAPIService.PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateRecordByContactEmails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/email-create"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterValueToString(r.externalEventId, "externalEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriberState"+"}", url.PathEscape(parameterValueToString(r.subscriberState, "subscriberState")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputMarketingEventEmailSubscriber == nil {
		return localVarReturnValue, nil, reportError("batchInputMarketingEventEmailSubscriber is required and must be specified")
	}

	if r.externalAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalAccountId", r.externalAccountId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputMarketingEventEmailSubscriber
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactIdRequest struct {
	ctx context.Context
	ApiService *AddEventAttendeesAPIService
	objectId string
	subscriberState string
	batchInputMarketingEventSubscriber *BatchInputMarketingEventSubscriber
}

func (r ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactIdRequest) BatchInputMarketingEventSubscriber(batchInputMarketingEventSubscriber BatchInputMarketingEventSubscriber) ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactIdRequest {
	r.batchInputMarketingEventSubscriber = &batchInputMarketingEventSubscriber
	return r
}

func (r ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactIdRequest) Execute() (*BatchResponseSubscriberVidResponse, *http.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactIdExecute(r)
}

/*
PostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactId Record Participants by ContactId with Marketing Event Object Id

Records the participation of multiple HubSpot contacts in a Marketing Event using their HubSpot contact IDs.

Additional Functionality:
- Adds a timeline event to the contacts.

Allowed Properties:
For the state "attend":
- joinedAt
- leftAt

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectId The internal id of the marketing event in HubSpot
 @param subscriberState The attendance state value. It may be 'register', 'attend' or 'cancel'
 @return ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactIdRequest
*/
func (a *AddEventAttendeesAPIService) PostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactId(ctx context.Context, objectId string, subscriberState string) ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactIdRequest {
	return ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactIdRequest{
		ApiService: a,
		ctx: ctx,
		objectId: objectId,
		subscriberState: subscriberState,
	}
}

// Execute executes the request
//  @return BatchResponseSubscriberVidResponse
func (a *AddEventAttendeesAPIService) PostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactIdExecute(r ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactIdRequest) (*BatchResponseSubscriberVidResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponseSubscriberVidResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddEventAttendeesAPIService.PostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateCreateRecordByContactId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/{objectId}/attendance/{subscriberState}/create"
	localVarPath = strings.Replace(localVarPath, "{"+"objectId"+"}", url.PathEscape(parameterValueToString(r.objectId, "objectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriberState"+"}", url.PathEscape(parameterValueToString(r.subscriberState, "subscriberState")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputMarketingEventSubscriber == nil {
		return localVarReturnValue, nil, reportError("batchInputMarketingEventSubscriber is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputMarketingEventSubscriber
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmailRequest struct {
	ctx context.Context
	ApiService *AddEventAttendeesAPIService
	objectId string
	subscriberState string
	batchInputMarketingEventEmailSubscriber *BatchInputMarketingEventEmailSubscriber
}

func (r ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmailRequest) BatchInputMarketingEventEmailSubscriber(batchInputMarketingEventEmailSubscriber BatchInputMarketingEventEmailSubscriber) ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmailRequest {
	r.batchInputMarketingEventEmailSubscriber = &batchInputMarketingEventEmailSubscriber
	return r
}

func (r ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmailRequest) Execute() (*BatchResponseSubscriberEmailResponse, *http.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmailExecute(r)
}

/*
PostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmail Record Participants by Email with Marketing Event Object Id

Records the participation of multiple HubSpot contacts in a Marketing Event using their email addresses.

If a contact does not exist, it will be automatically created. The contactProperties field is used exclusively for creating new contacts and will not update properties of existing contacts.

Additional Functionality:
- Adds a timeline event to the contacts.

Allowed Properties:
For the state "attend":
- joinedAt
- leftAt

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectId The internal ID of the marketing event in HubSpot
 @param subscriberState The attendance state value. It may be 'register', 'attend' or 'cancel'
 @return ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmailRequest
*/
func (a *AddEventAttendeesAPIService) PostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmail(ctx context.Context, objectId string, subscriberState string) ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmailRequest {
	return ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmailRequest{
		ApiService: a,
		ctx: ctx,
		objectId: objectId,
		subscriberState: subscriberState,
	}
}

// Execute executes the request
//  @return BatchResponseSubscriberEmailResponse
func (a *AddEventAttendeesAPIService) PostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmailExecute(r ApiPostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmailRequest) (*BatchResponseSubscriberEmailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponseSubscriberEmailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddEventAttendeesAPIService.PostMarketingV3MarketingEventsObjectIdAttendanceSubscriberStateEmailCreateRecordByEmail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/{objectId}/attendance/{subscriberState}/email-create"
	localVarPath = strings.Replace(localVarPath, "{"+"objectId"+"}", url.PathEscape(parameterValueToString(r.objectId, "objectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriberState"+"}", url.PathEscape(parameterValueToString(r.subscriberState, "subscriberState")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputMarketingEventEmailSubscriber == nil {
		return localVarReturnValue, nil, reportError("batchInputMarketingEventEmailSubscriber is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputMarketingEventEmailSubscriber
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
