/*
Marketing Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
)


// BatchAPIService BatchAPI service
type BatchAPIService service

type ApiPostMarketingV3MarketingEventsBatchArchiveArchiveByObjectIdRequest struct {
	ctx context.Context
	ApiService *BatchAPIService
	batchInputMarketingEventPublicObjectIdDeleteRequest *BatchInputMarketingEventPublicObjectIdDeleteRequest
}

func (r ApiPostMarketingV3MarketingEventsBatchArchiveArchiveByObjectIdRequest) BatchInputMarketingEventPublicObjectIdDeleteRequest(batchInputMarketingEventPublicObjectIdDeleteRequest BatchInputMarketingEventPublicObjectIdDeleteRequest) ApiPostMarketingV3MarketingEventsBatchArchiveArchiveByObjectIdRequest {
	r.batchInputMarketingEventPublicObjectIdDeleteRequest = &batchInputMarketingEventPublicObjectIdDeleteRequest
	return r
}

func (r ApiPostMarketingV3MarketingEventsBatchArchiveArchiveByObjectIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsBatchArchiveArchiveByObjectIdExecute(r)
}

/*
PostMarketingV3MarketingEventsBatchArchiveArchiveByObjectId Delete Multiple Marketing Events by ObjectId

Deletes multiple Marketing Events from the portal based on their objectId, if they exist.

Responses:
204: Returned if all specified Marketing Events were successfully deleted.
207: Returned if some objectIds did not correspond to any existing Marketing Events.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3MarketingEventsBatchArchiveArchiveByObjectIdRequest
*/
func (a *BatchAPIService) PostMarketingV3MarketingEventsBatchArchiveArchiveByObjectId(ctx context.Context) ApiPostMarketingV3MarketingEventsBatchArchiveArchiveByObjectIdRequest {
	return ApiPostMarketingV3MarketingEventsBatchArchiveArchiveByObjectIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *BatchAPIService) PostMarketingV3MarketingEventsBatchArchiveArchiveByObjectIdExecute(r ApiPostMarketingV3MarketingEventsBatchArchiveArchiveByObjectIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchAPIService.PostMarketingV3MarketingEventsBatchArchiveArchiveByObjectId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/batch/archive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputMarketingEventPublicObjectIdDeleteRequest == nil {
		return nil, reportError("batchInputMarketingEventPublicObjectIdDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputMarketingEventPublicObjectIdDeleteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostMarketingV3MarketingEventsBatchUpdateUpdateByObjectIdRequest struct {
	ctx context.Context
	ApiService *BatchAPIService
	batchInputMarketingEventPublicUpdateRequestFullV2 *BatchInputMarketingEventPublicUpdateRequestFullV2
}

func (r ApiPostMarketingV3MarketingEventsBatchUpdateUpdateByObjectIdRequest) BatchInputMarketingEventPublicUpdateRequestFullV2(batchInputMarketingEventPublicUpdateRequestFullV2 BatchInputMarketingEventPublicUpdateRequestFullV2) ApiPostMarketingV3MarketingEventsBatchUpdateUpdateByObjectIdRequest {
	r.batchInputMarketingEventPublicUpdateRequestFullV2 = &batchInputMarketingEventPublicUpdateRequestFullV2
	return r
}

func (r ApiPostMarketingV3MarketingEventsBatchUpdateUpdateByObjectIdRequest) Execute() (*BatchResponseMarketingEventPublicDefaultResponseV2, *http.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsBatchUpdateUpdateByObjectIdExecute(r)
}

/*
PostMarketingV3MarketingEventsBatchUpdateUpdateByObjectId Update Multiple Marketing Events by ObjectId

Updates multiple Marketing Events on the portal based on their objectId, if they exist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3MarketingEventsBatchUpdateUpdateByObjectIdRequest
*/
func (a *BatchAPIService) PostMarketingV3MarketingEventsBatchUpdateUpdateByObjectId(ctx context.Context) ApiPostMarketingV3MarketingEventsBatchUpdateUpdateByObjectIdRequest {
	return ApiPostMarketingV3MarketingEventsBatchUpdateUpdateByObjectIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchResponseMarketingEventPublicDefaultResponseV2
func (a *BatchAPIService) PostMarketingV3MarketingEventsBatchUpdateUpdateByObjectIdExecute(r ApiPostMarketingV3MarketingEventsBatchUpdateUpdateByObjectIdRequest) (*BatchResponseMarketingEventPublicDefaultResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponseMarketingEventPublicDefaultResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchAPIService.PostMarketingV3MarketingEventsBatchUpdateUpdateByObjectId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/batch/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputMarketingEventPublicUpdateRequestFullV2 == nil {
		return localVarReturnValue, nil, reportError("batchInputMarketingEventPublicUpdateRequestFullV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputMarketingEventPublicUpdateRequestFullV2
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3MarketingEventsEventsDeleteArchiveRequest struct {
	ctx context.Context
	ApiService *BatchAPIService
	batchInputMarketingEventExternalUniqueIdentifier *BatchInputMarketingEventExternalUniqueIdentifier
}

func (r ApiPostMarketingV3MarketingEventsEventsDeleteArchiveRequest) BatchInputMarketingEventExternalUniqueIdentifier(batchInputMarketingEventExternalUniqueIdentifier BatchInputMarketingEventExternalUniqueIdentifier) ApiPostMarketingV3MarketingEventsEventsDeleteArchiveRequest {
	r.batchInputMarketingEventExternalUniqueIdentifier = &batchInputMarketingEventExternalUniqueIdentifier
	return r
}

func (r ApiPostMarketingV3MarketingEventsEventsDeleteArchiveRequest) Execute() (*Error, *http.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsEventsDeleteArchiveExecute(r)
}

/*
PostMarketingV3MarketingEventsEventsDeleteArchive Delete Multiple Marketing Events by External Ids

Deletes multiple Marketing Events based on externalAccountId, externalEventId, and appId.

Only Marketing Events created by the same apps will be deleted; events from other apps cannot be removed by this endpoint. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3MarketingEventsEventsDeleteArchiveRequest
*/
func (a *BatchAPIService) PostMarketingV3MarketingEventsEventsDeleteArchive(ctx context.Context) ApiPostMarketingV3MarketingEventsEventsDeleteArchiveRequest {
	return ApiPostMarketingV3MarketingEventsEventsDeleteArchiveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Error
func (a *BatchAPIService) PostMarketingV3MarketingEventsEventsDeleteArchiveExecute(r ApiPostMarketingV3MarketingEventsEventsDeleteArchiveRequest) (*Error, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Error
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchAPIService.PostMarketingV3MarketingEventsEventsDeleteArchive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputMarketingEventExternalUniqueIdentifier == nil {
		return localVarReturnValue, nil, reportError("batchInputMarketingEventExternalUniqueIdentifier is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputMarketingEventExternalUniqueIdentifier
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3MarketingEventsEventsUpsertUpsertRequest struct {
	ctx context.Context
	ApiService *BatchAPIService
	batchInputMarketingEventCreateRequestParams *BatchInputMarketingEventCreateRequestParams
}

func (r ApiPostMarketingV3MarketingEventsEventsUpsertUpsertRequest) BatchInputMarketingEventCreateRequestParams(batchInputMarketingEventCreateRequestParams BatchInputMarketingEventCreateRequestParams) ApiPostMarketingV3MarketingEventsEventsUpsertUpsertRequest {
	r.batchInputMarketingEventCreateRequestParams = &batchInputMarketingEventCreateRequestParams
	return r
}

func (r ApiPostMarketingV3MarketingEventsEventsUpsertUpsertRequest) Execute() (*BatchResponseMarketingEventPublicDefaultResponse, *http.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsEventsUpsertUpsertExecute(r)
}

/*
PostMarketingV3MarketingEventsEventsUpsertUpsert Create or Update Multiple Marketing Events

Upserts multiple Marketing Events. If a Marketing Event with the specified ID already exists, it will be updated; otherwise, a new event will be created.

Only Marketing Events originally created by the same app can be updated.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3MarketingEventsEventsUpsertUpsertRequest
*/
func (a *BatchAPIService) PostMarketingV3MarketingEventsEventsUpsertUpsert(ctx context.Context) ApiPostMarketingV3MarketingEventsEventsUpsertUpsertRequest {
	return ApiPostMarketingV3MarketingEventsEventsUpsertUpsertRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchResponseMarketingEventPublicDefaultResponse
func (a *BatchAPIService) PostMarketingV3MarketingEventsEventsUpsertUpsertExecute(r ApiPostMarketingV3MarketingEventsEventsUpsertUpsertRequest) (*BatchResponseMarketingEventPublicDefaultResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponseMarketingEventPublicDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchAPIService.PostMarketingV3MarketingEventsEventsUpsertUpsert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/upsert"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputMarketingEventCreateRequestParams == nil {
		return localVarReturnValue, nil, reportError("batchInputMarketingEventCreateRequestParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputMarketingEventCreateRequestParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
