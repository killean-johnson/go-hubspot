/*
Marketing Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/clarkmcc/go-hubspot"
"net/url"
	"strings"
)


// IdentifiersAPIService IdentifiersAPI service
type IdentifiersAPIService service

type ApiGetMarketingV3MarketingEventsEventsSearchDoSearchRequest struct {
	ctx context.Context
	ApiService *IdentifiersAPIService
	q *string
}

// The id of the marketing event in the external event application (externalEventId)
func (r ApiGetMarketingV3MarketingEventsEventsSearchDoSearchRequest) Q(q string) ApiGetMarketingV3MarketingEventsEventsSearchDoSearchRequest {
	r.q = &q
	return r
}

func (r ApiGetMarketingV3MarketingEventsEventsSearchDoSearchRequest) Execute() (*CollectionResponseSearchPublicResponseWrapperNoPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsEventsSearchDoSearchExecute(r)
}

/*
GetMarketingV3MarketingEventsEventsSearchDoSearch Find App-Specific Marketing Events by External Event Id

Retrieves Marketing Events where the externalEventId matches the value provided in the request, limited to events created by the app making the request.

Marketing Events created by other apps will not be included in the results.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingV3MarketingEventsEventsSearchDoSearchRequest
*/
func (a *IdentifiersAPIService) GetMarketingV3MarketingEventsEventsSearchDoSearch(ctx context.Context) ApiGetMarketingV3MarketingEventsEventsSearchDoSearchRequest {
	return ApiGetMarketingV3MarketingEventsEventsSearchDoSearchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseSearchPublicResponseWrapperNoPaging
func (a *IdentifiersAPIService) GetMarketingV3MarketingEventsEventsSearchDoSearchExecute(r ApiGetMarketingV3MarketingEventsEventsSearchDoSearchRequest) (*CollectionResponseSearchPublicResponseWrapperNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseSearchPublicResponseWrapperNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentifiersAPIService.GetMarketingV3MarketingEventsEventsSearchDoSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3MarketingEventsExternalEventIdIdentifiersSearchPortalEventsRequest struct {
	ctx context.Context
	ApiService *IdentifiersAPIService
	externalEventId string
}

func (r ApiGetMarketingV3MarketingEventsExternalEventIdIdentifiersSearchPortalEventsRequest) Execute() (*CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsExternalEventIdIdentifiersSearchPortalEventsExecute(r)
}

/*
GetMarketingV3MarketingEventsExternalEventIdIdentifiersSearchPortalEvents Find Marketing Events by External Event Id

This endpoint searches the portal for all Marketing Events whose externalEventId matches the value provided in the request.

It retrieves the objectId and additional event details for each matching Marketing Event.

Since multiple Marketing Events can have the same externalEventId, the endpoint returns all matching results.

Note: Marketing Events become searchable by externalEventId a few minutes after creation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event in the external event application.
 @return ApiGetMarketingV3MarketingEventsExternalEventIdIdentifiersSearchPortalEventsRequest
*/
func (a *IdentifiersAPIService) GetMarketingV3MarketingEventsExternalEventIdIdentifiersSearchPortalEvents(ctx context.Context, externalEventId string) ApiGetMarketingV3MarketingEventsExternalEventIdIdentifiersSearchPortalEventsRequest {
	return ApiGetMarketingV3MarketingEventsExternalEventIdIdentifiersSearchPortalEventsRequest{
		ApiService: a,
		ctx: ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging
func (a *IdentifiersAPIService) GetMarketingV3MarketingEventsExternalEventIdIdentifiersSearchPortalEventsExecute(r ApiGetMarketingV3MarketingEventsExternalEventIdIdentifiersSearchPortalEventsRequest) (*CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentifiersAPIService.GetMarketingV3MarketingEventsExternalEventIdIdentifiersSearchPortalEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/{externalEventId}/identifiers"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterValueToString(r.externalEventId, "externalEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
