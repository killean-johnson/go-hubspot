/*
Marketing Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParticipationAssociations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParticipationAssociations{}

// ParticipationAssociations struct for ParticipationAssociations
type ParticipationAssociations struct {
	MarketingEvent MarketingEventAssociation `json:"marketingEvent"`
	Contact ContactAssociation `json:"contact"`
}

type _ParticipationAssociations ParticipationAssociations

// NewParticipationAssociations instantiates a new ParticipationAssociations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipationAssociations(marketingEvent MarketingEventAssociation, contact ContactAssociation) *ParticipationAssociations {
	this := ParticipationAssociations{}
	this.MarketingEvent = marketingEvent
	this.Contact = contact
	return &this
}

// NewParticipationAssociationsWithDefaults instantiates a new ParticipationAssociations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipationAssociationsWithDefaults() *ParticipationAssociations {
	this := ParticipationAssociations{}
	return &this
}

// GetMarketingEvent returns the MarketingEvent field value
func (o *ParticipationAssociations) GetMarketingEvent() MarketingEventAssociation {
	if o == nil {
		var ret MarketingEventAssociation
		return ret
	}

	return o.MarketingEvent
}

// GetMarketingEventOk returns a tuple with the MarketingEvent field value
// and a boolean to check if the value has been set.
func (o *ParticipationAssociations) GetMarketingEventOk() (*MarketingEventAssociation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MarketingEvent, true
}

// SetMarketingEvent sets field value
func (o *ParticipationAssociations) SetMarketingEvent(v MarketingEventAssociation) {
	o.MarketingEvent = v
}

// GetContact returns the Contact field value
func (o *ParticipationAssociations) GetContact() ContactAssociation {
	if o == nil {
		var ret ContactAssociation
		return ret
	}

	return o.Contact
}

// GetContactOk returns a tuple with the Contact field value
// and a boolean to check if the value has been set.
func (o *ParticipationAssociations) GetContactOk() (*ContactAssociation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contact, true
}

// SetContact sets field value
func (o *ParticipationAssociations) SetContact(v ContactAssociation) {
	o.Contact = v
}

func (o ParticipationAssociations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParticipationAssociations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["marketingEvent"] = o.MarketingEvent
	toSerialize["contact"] = o.Contact
	return toSerialize, nil
}

func (o *ParticipationAssociations) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"marketingEvent",
		"contact",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParticipationAssociations := _ParticipationAssociations{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParticipationAssociations)

	if err != nil {
		return err
	}

	*o = ParticipationAssociations(varParticipationAssociations)

	return err
}

type NullableParticipationAssociations struct {
	value *ParticipationAssociations
	isSet bool
}

func (v NullableParticipationAssociations) Get() *ParticipationAssociations {
	return v.value
}

func (v *NullableParticipationAssociations) Set(val *ParticipationAssociations) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipationAssociations) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipationAssociations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipationAssociations(val *ParticipationAssociations) *NullableParticipationAssociations {
	return &NullableParticipationAssociations{value: val, isSet: true}
}

func (v NullableParticipationAssociations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipationAssociations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


