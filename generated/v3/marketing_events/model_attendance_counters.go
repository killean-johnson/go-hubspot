/*
Marketing Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AttendanceCounters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttendanceCounters{}

// AttendanceCounters struct for AttendanceCounters
type AttendanceCounters struct {
	Attended int32 `json:"attended"`
	Registered int32 `json:"registered"`
	Cancelled int32 `json:"cancelled"`
	NoShows int32 `json:"noShows"`
}

type _AttendanceCounters AttendanceCounters

// NewAttendanceCounters instantiates a new AttendanceCounters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttendanceCounters(attended int32, registered int32, cancelled int32, noShows int32) *AttendanceCounters {
	this := AttendanceCounters{}
	this.Attended = attended
	this.Registered = registered
	this.Cancelled = cancelled
	this.NoShows = noShows
	return &this
}

// NewAttendanceCountersWithDefaults instantiates a new AttendanceCounters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttendanceCountersWithDefaults() *AttendanceCounters {
	this := AttendanceCounters{}
	return &this
}

// GetAttended returns the Attended field value
func (o *AttendanceCounters) GetAttended() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Attended
}

// GetAttendedOk returns a tuple with the Attended field value
// and a boolean to check if the value has been set.
func (o *AttendanceCounters) GetAttendedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attended, true
}

// SetAttended sets field value
func (o *AttendanceCounters) SetAttended(v int32) {
	o.Attended = v
}

// GetRegistered returns the Registered field value
func (o *AttendanceCounters) GetRegistered() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Registered
}

// GetRegisteredOk returns a tuple with the Registered field value
// and a boolean to check if the value has been set.
func (o *AttendanceCounters) GetRegisteredOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Registered, true
}

// SetRegistered sets field value
func (o *AttendanceCounters) SetRegistered(v int32) {
	o.Registered = v
}

// GetCancelled returns the Cancelled field value
func (o *AttendanceCounters) GetCancelled() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cancelled
}

// GetCancelledOk returns a tuple with the Cancelled field value
// and a boolean to check if the value has been set.
func (o *AttendanceCounters) GetCancelledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cancelled, true
}

// SetCancelled sets field value
func (o *AttendanceCounters) SetCancelled(v int32) {
	o.Cancelled = v
}

// GetNoShows returns the NoShows field value
func (o *AttendanceCounters) GetNoShows() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NoShows
}

// GetNoShowsOk returns a tuple with the NoShows field value
// and a boolean to check if the value has been set.
func (o *AttendanceCounters) GetNoShowsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoShows, true
}

// SetNoShows sets field value
func (o *AttendanceCounters) SetNoShows(v int32) {
	o.NoShows = v
}

func (o AttendanceCounters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttendanceCounters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attended"] = o.Attended
	toSerialize["registered"] = o.Registered
	toSerialize["cancelled"] = o.Cancelled
	toSerialize["noShows"] = o.NoShows
	return toSerialize, nil
}

func (o *AttendanceCounters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attended",
		"registered",
		"cancelled",
		"noShows",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttendanceCounters := _AttendanceCounters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttendanceCounters)

	if err != nil {
		return err
	}

	*o = AttendanceCounters(varAttendanceCounters)

	return err
}

type NullableAttendanceCounters struct {
	value *AttendanceCounters
	isSet bool
}

func (v NullableAttendanceCounters) Get() *AttendanceCounters {
	return v.value
}

func (v *NullableAttendanceCounters) Set(val *AttendanceCounters) {
	v.value = val
	v.isSet = true
}

func (v NullableAttendanceCounters) IsSet() bool {
	return v.isSet
}

func (v *NullableAttendanceCounters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttendanceCounters(val *AttendanceCounters) *NullableAttendanceCounters {
	return &NullableAttendanceCounters{value: val, isSet: true}
}

func (v NullableAttendanceCounters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttendanceCounters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


