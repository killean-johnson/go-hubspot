/*
Marketing Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// RetrieveParticipantStateAPIService RetrieveParticipantStateAPI service
type RetrieveParticipantStateAPIService service

type ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest struct {
	ctx context.Context
	ApiService *RetrieveParticipantStateAPIService
	contactIdentifier string
	state *string
	limit *int32
	after *string
}

// The participation state value. It may be REGISTERED, CANCELLED, ATTENDED, NO_SHOW
func (r ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest) State(state string) ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest {
	r.state = &state
	return r
}

// The limit for response size. The default value is 10, the max number is 100
func (r ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest) Limit(limit int32) ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest {
	r.limit = &limit
	return r
}

// The cursor indicating the position of the last retrieved item.
func (r ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest) After(after string) ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest {
	r.after = &after
	return r
}

func (r ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest) Execute() (*CollectionResponseWithTotalParticipationBreakdownForwardPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdExecute(r)
}

/*
GetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactId Read participations breakdown by Contact identifier

Read Contact's participations by identifier - email or internal id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactIdentifier The identifier of the Contact. It may be email or internal id.
 @return ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest
*/
func (a *RetrieveParticipantStateAPIService) GetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactId(ctx context.Context, contactIdentifier string) ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest {
	return ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest{
		ApiService: a,
		ctx: ctx,
		contactIdentifier: contactIdentifier,
	}
}

// Execute executes the request
//  @return CollectionResponseWithTotalParticipationBreakdownForwardPaging
func (a *RetrieveParticipantStateAPIService) GetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdExecute(r ApiGetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactIdRequest) (*CollectionResponseWithTotalParticipationBreakdownForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseWithTotalParticipationBreakdownForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RetrieveParticipantStateAPIService.GetMarketingV3MarketingEventsParticipationsContactsContactIdentifierBreakdownGetParticipationsBreakdownByContactId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/participations/contacts/{contactIdentifier}/breakdown"
	localVarPath = strings.Replace(localVarPath, "{"+"contactIdentifier"+"}", url.PathEscape(parameterValueToString(r.contactIdentifier, "contactIdentifier")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 10
		r.limit = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest struct {
	ctx context.Context
	ApiService *RetrieveParticipantStateAPIService
	externalAccountId string
	externalEventId string
	contactIdentifier *string
	state *string
	limit *int32
	after *string
}

// The identifier of the Contact. It may be email or internal id.
func (r ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest) ContactIdentifier(contactIdentifier string) ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest {
	r.contactIdentifier = &contactIdentifier
	return r
}

// The participation state value. It may be REGISTERED, CANCELLED, ATTENDED, NO_SHOW
func (r ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest) State(state string) ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest {
	r.state = &state
	return r
}

// The limit for response size. The default value is 10, the max number is 100
func (r ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest) Limit(limit int32) ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest {
	r.limit = &limit
	return r
}

// The cursor indicating the position of the last retrieved item.
func (r ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest) After(after string) ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest {
	r.after = &after
	return r
}

func (r ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest) Execute() (*CollectionResponseWithTotalParticipationBreakdownForwardPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdExecute(r)
}

/*
GetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventId Read participations breakdown by Marketing Event external identifier

Read Marketing event's participations breakdown with optional filters by externalAccountId and externalEventId pair.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalAccountId The accountId that is associated with this marketing event in the external event application.
 @param externalEventId The id of the marketing event in the external event application.
 @return ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest
*/
func (a *RetrieveParticipantStateAPIService) GetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventId(ctx context.Context, externalAccountId string, externalEventId string) ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest {
	return ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest{
		ApiService: a,
		ctx: ctx,
		externalAccountId: externalAccountId,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return CollectionResponseWithTotalParticipationBreakdownForwardPaging
func (a *RetrieveParticipantStateAPIService) GetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdExecute(r ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventIdRequest) (*CollectionResponseWithTotalParticipationBreakdownForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseWithTotalParticipationBreakdownForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RetrieveParticipantStateAPIService.GetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdBreakdownGetParticipationsBreakdownByExternalEventId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/participations/{externalAccountId}/{externalEventId}/breakdown"
	localVarPath = strings.Replace(localVarPath, "{"+"externalAccountId"+"}", url.PathEscape(parameterValueToString(r.externalAccountId, "externalAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterValueToString(r.externalEventId, "externalEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contactIdentifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contactIdentifier", r.contactIdentifier, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 10
		r.limit = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdGetParticipationsCountersByEventExternalIdRequest struct {
	ctx context.Context
	ApiService *RetrieveParticipantStateAPIService
	externalAccountId string
	externalEventId string
}

func (r ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdGetParticipationsCountersByEventExternalIdRequest) Execute() (*AttendanceCounters, *http.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdGetParticipationsCountersByEventExternalIdExecute(r)
}

/*
GetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdGetParticipationsCountersByEventExternalId Read participations counters by Marketing Event external identifier

Read Marketing event's participations counters by externalAccountId and externalEventId pair.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalAccountId The accountId that is associated with this marketing event in the external event application.
 @param externalEventId The id of the marketing event in the external event application.
 @return ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdGetParticipationsCountersByEventExternalIdRequest
*/
func (a *RetrieveParticipantStateAPIService) GetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdGetParticipationsCountersByEventExternalId(ctx context.Context, externalAccountId string, externalEventId string) ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdGetParticipationsCountersByEventExternalIdRequest {
	return ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdGetParticipationsCountersByEventExternalIdRequest{
		ApiService: a,
		ctx: ctx,
		externalAccountId: externalAccountId,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return AttendanceCounters
func (a *RetrieveParticipantStateAPIService) GetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdGetParticipationsCountersByEventExternalIdExecute(r ApiGetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdGetParticipationsCountersByEventExternalIdRequest) (*AttendanceCounters, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AttendanceCounters
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RetrieveParticipantStateAPIService.GetMarketingV3MarketingEventsParticipationsExternalAccountIdExternalEventIdGetParticipationsCountersByEventExternalId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/participations/{externalAccountId}/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalAccountId"+"}", url.PathEscape(parameterValueToString(r.externalAccountId, "externalAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterValueToString(r.externalEventId, "externalEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest struct {
	ctx context.Context
	ApiService *RetrieveParticipantStateAPIService
	marketingEventId int64
	contactIdentifier *string
	state *string
	limit *int32
	after *string
}

// The identifier of the Contact. It may be email or internal id.
func (r ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest) ContactIdentifier(contactIdentifier string) ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest {
	r.contactIdentifier = &contactIdentifier
	return r
}

// The participation state value. It may be REGISTERED, CANCELLED, ATTENDED, NO_SHOW
func (r ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest) State(state string) ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest {
	r.state = &state
	return r
}

// The limit for response size. The default value is 10, the max number is 100
func (r ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest) Limit(limit int32) ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest {
	r.limit = &limit
	return r
}

// The cursor indicating the position of the last retrieved item.
func (r ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest) After(after string) ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest {
	r.after = &after
	return r
}

func (r ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest) Execute() (*CollectionResponseWithTotalParticipationBreakdownForwardPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdExecute(r)
}

/*
GetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventId Read participations breakdown by Marketing Event internal identifier

Read Marketing event's participations breakdown with optional filters by internal identifier marketingEventId.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param marketingEventId The internal id of the marketing event in HubSpot.
 @return ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest
*/
func (a *RetrieveParticipantStateAPIService) GetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventId(ctx context.Context, marketingEventId int64) ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest {
	return ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest{
		ApiService: a,
		ctx: ctx,
		marketingEventId: marketingEventId,
	}
}

// Execute executes the request
//  @return CollectionResponseWithTotalParticipationBreakdownForwardPaging
func (a *RetrieveParticipantStateAPIService) GetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdExecute(r ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventIdRequest) (*CollectionResponseWithTotalParticipationBreakdownForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseWithTotalParticipationBreakdownForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RetrieveParticipantStateAPIService.GetMarketingV3MarketingEventsParticipationsMarketingEventIdBreakdownGetParticipationsBreakdownByMarketingEventId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/participations/{marketingEventId}/breakdown"
	localVarPath = strings.Replace(localVarPath, "{"+"marketingEventId"+"}", url.PathEscape(parameterValueToString(r.marketingEventId, "marketingEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contactIdentifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contactIdentifier", r.contactIdentifier, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 10
		r.limit = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdGetParticipationsCountersByMarketingEventIdRequest struct {
	ctx context.Context
	ApiService *RetrieveParticipantStateAPIService
	marketingEventId int64
}

func (r ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdGetParticipationsCountersByMarketingEventIdRequest) Execute() (*AttendanceCounters, *http.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsParticipationsMarketingEventIdGetParticipationsCountersByMarketingEventIdExecute(r)
}

/*
GetMarketingV3MarketingEventsParticipationsMarketingEventIdGetParticipationsCountersByMarketingEventId Read participations counters by Marketing Event internal identifier

Read Marketing event's participations counters by internal identifier marketingEventId.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param marketingEventId The internal id of the marketing event in HubSpot.
 @return ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdGetParticipationsCountersByMarketingEventIdRequest
*/
func (a *RetrieveParticipantStateAPIService) GetMarketingV3MarketingEventsParticipationsMarketingEventIdGetParticipationsCountersByMarketingEventId(ctx context.Context, marketingEventId int64) ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdGetParticipationsCountersByMarketingEventIdRequest {
	return ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdGetParticipationsCountersByMarketingEventIdRequest{
		ApiService: a,
		ctx: ctx,
		marketingEventId: marketingEventId,
	}
}

// Execute executes the request
//  @return AttendanceCounters
func (a *RetrieveParticipantStateAPIService) GetMarketingV3MarketingEventsParticipationsMarketingEventIdGetParticipationsCountersByMarketingEventIdExecute(r ApiGetMarketingV3MarketingEventsParticipationsMarketingEventIdGetParticipationsCountersByMarketingEventIdRequest) (*AttendanceCounters, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AttendanceCounters
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RetrieveParticipantStateAPIService.GetMarketingV3MarketingEventsParticipationsMarketingEventIdGetParticipationsCountersByMarketingEventId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/participations/{marketingEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"marketingEventId"+"}", url.PathEscape(parameterValueToString(r.marketingEventId, "marketingEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
