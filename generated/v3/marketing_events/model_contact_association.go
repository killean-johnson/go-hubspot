/*
Marketing Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContactAssociation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactAssociation{}

// ContactAssociation struct for ContactAssociation
type ContactAssociation struct {
	Firstname *string `json:"firstname,omitempty"`
	ContactId string `json:"contactId"`
	Email string `json:"email"`
	Lastname *string `json:"lastname,omitempty"`
}

type _ContactAssociation ContactAssociation

// NewContactAssociation instantiates a new ContactAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactAssociation(contactId string, email string) *ContactAssociation {
	this := ContactAssociation{}
	this.ContactId = contactId
	this.Email = email
	return &this
}

// NewContactAssociationWithDefaults instantiates a new ContactAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactAssociationWithDefaults() *ContactAssociation {
	this := ContactAssociation{}
	return &this
}

// GetFirstname returns the Firstname field value if set, zero value otherwise.
func (o *ContactAssociation) GetFirstname() string {
	if o == nil || IsNil(o.Firstname) {
		var ret string
		return ret
	}
	return *o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAssociation) GetFirstnameOk() (*string, bool) {
	if o == nil || IsNil(o.Firstname) {
		return nil, false
	}
	return o.Firstname, true
}

// HasFirstname returns a boolean if a field has been set.
func (o *ContactAssociation) HasFirstname() bool {
	if o != nil && !IsNil(o.Firstname) {
		return true
	}

	return false
}

// SetFirstname gets a reference to the given string and assigns it to the Firstname field.
func (o *ContactAssociation) SetFirstname(v string) {
	o.Firstname = &v
}

// GetContactId returns the ContactId field value
func (o *ContactAssociation) GetContactId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContactId
}

// GetContactIdOk returns a tuple with the ContactId field value
// and a boolean to check if the value has been set.
func (o *ContactAssociation) GetContactIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContactId, true
}

// SetContactId sets field value
func (o *ContactAssociation) SetContactId(v string) {
	o.ContactId = v
}

// GetEmail returns the Email field value
func (o *ContactAssociation) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *ContactAssociation) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *ContactAssociation) SetEmail(v string) {
	o.Email = v
}

// GetLastname returns the Lastname field value if set, zero value otherwise.
func (o *ContactAssociation) GetLastname() string {
	if o == nil || IsNil(o.Lastname) {
		var ret string
		return ret
	}
	return *o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAssociation) GetLastnameOk() (*string, bool) {
	if o == nil || IsNil(o.Lastname) {
		return nil, false
	}
	return o.Lastname, true
}

// HasLastname returns a boolean if a field has been set.
func (o *ContactAssociation) HasLastname() bool {
	if o != nil && !IsNil(o.Lastname) {
		return true
	}

	return false
}

// SetLastname gets a reference to the given string and assigns it to the Lastname field.
func (o *ContactAssociation) SetLastname(v string) {
	o.Lastname = &v
}

func (o ContactAssociation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactAssociation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Firstname) {
		toSerialize["firstname"] = o.Firstname
	}
	toSerialize["contactId"] = o.ContactId
	toSerialize["email"] = o.Email
	if !IsNil(o.Lastname) {
		toSerialize["lastname"] = o.Lastname
	}
	return toSerialize, nil
}

func (o *ContactAssociation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contactId",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactAssociation := _ContactAssociation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactAssociation)

	if err != nil {
		return err
	}

	*o = ContactAssociation(varContactAssociation)

	return err
}

type NullableContactAssociation struct {
	value *ContactAssociation
	isSet bool
}

func (v NullableContactAssociation) Get() *ContactAssociation {
	return v.value
}

func (v *NullableContactAssociation) Set(val *ContactAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableContactAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableContactAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactAssociation(val *ContactAssociation) *NullableContactAssociation {
	return &NullableContactAssociation{value: val, isSet: true}
}

func (v NullableContactAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


