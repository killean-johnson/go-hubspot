/*
Marketing Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MarketingEventEmailSubscriber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketingEventEmailSubscriber{}

// MarketingEventEmailSubscriber struct for MarketingEventEmailSubscriber
type MarketingEventEmailSubscriber struct {
	ContactProperties *map[string]string `json:"contactProperties,omitempty"`
	Properties *map[string]string `json:"properties,omitempty"`
	// The email address of the contact in HubSpot to associate with the event.
	Email string `json:"email"`
	// Timestamp in milliseconds at which the contact subscribed to the event.
	InteractionDateTime int64 `json:"interactionDateTime"`
}

type _MarketingEventEmailSubscriber MarketingEventEmailSubscriber

// NewMarketingEventEmailSubscriber instantiates a new MarketingEventEmailSubscriber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketingEventEmailSubscriber(email string, interactionDateTime int64) *MarketingEventEmailSubscriber {
	this := MarketingEventEmailSubscriber{}
	this.Email = email
	this.InteractionDateTime = interactionDateTime
	return &this
}

// NewMarketingEventEmailSubscriberWithDefaults instantiates a new MarketingEventEmailSubscriber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketingEventEmailSubscriberWithDefaults() *MarketingEventEmailSubscriber {
	this := MarketingEventEmailSubscriber{}
	return &this
}

// GetContactProperties returns the ContactProperties field value if set, zero value otherwise.
func (o *MarketingEventEmailSubscriber) GetContactProperties() map[string]string {
	if o == nil || IsNil(o.ContactProperties) {
		var ret map[string]string
		return ret
	}
	return *o.ContactProperties
}

// GetContactPropertiesOk returns a tuple with the ContactProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingEventEmailSubscriber) GetContactPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ContactProperties) {
		return nil, false
	}
	return o.ContactProperties, true
}

// HasContactProperties returns a boolean if a field has been set.
func (o *MarketingEventEmailSubscriber) HasContactProperties() bool {
	if o != nil && !IsNil(o.ContactProperties) {
		return true
	}

	return false
}

// SetContactProperties gets a reference to the given map[string]string and assigns it to the ContactProperties field.
func (o *MarketingEventEmailSubscriber) SetContactProperties(v map[string]string) {
	o.ContactProperties = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *MarketingEventEmailSubscriber) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingEventEmailSubscriber) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *MarketingEventEmailSubscriber) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *MarketingEventEmailSubscriber) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetEmail returns the Email field value
func (o *MarketingEventEmailSubscriber) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *MarketingEventEmailSubscriber) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *MarketingEventEmailSubscriber) SetEmail(v string) {
	o.Email = v
}

// GetInteractionDateTime returns the InteractionDateTime field value
func (o *MarketingEventEmailSubscriber) GetInteractionDateTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.InteractionDateTime
}

// GetInteractionDateTimeOk returns a tuple with the InteractionDateTime field value
// and a boolean to check if the value has been set.
func (o *MarketingEventEmailSubscriber) GetInteractionDateTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InteractionDateTime, true
}

// SetInteractionDateTime sets field value
func (o *MarketingEventEmailSubscriber) SetInteractionDateTime(v int64) {
	o.InteractionDateTime = v
}

func (o MarketingEventEmailSubscriber) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketingEventEmailSubscriber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContactProperties) {
		toSerialize["contactProperties"] = o.ContactProperties
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	toSerialize["email"] = o.Email
	toSerialize["interactionDateTime"] = o.InteractionDateTime
	return toSerialize, nil
}

func (o *MarketingEventEmailSubscriber) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"interactionDateTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMarketingEventEmailSubscriber := _MarketingEventEmailSubscriber{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMarketingEventEmailSubscriber)

	if err != nil {
		return err
	}

	*o = MarketingEventEmailSubscriber(varMarketingEventEmailSubscriber)

	return err
}

type NullableMarketingEventEmailSubscriber struct {
	value *MarketingEventEmailSubscriber
	isSet bool
}

func (v NullableMarketingEventEmailSubscriber) Get() *MarketingEventEmailSubscriber {
	return v.value
}

func (v *NullableMarketingEventEmailSubscriber) Set(val *MarketingEventEmailSubscriber) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketingEventEmailSubscriber) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketingEventEmailSubscriber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketingEventEmailSubscriber(val *MarketingEventEmailSubscriber) *NullableMarketingEventEmailSubscriber {
	return &NullableMarketingEventEmailSubscriber{value: val, isSet: true}
}

func (v NullableMarketingEventEmailSubscriber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketingEventEmailSubscriber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


