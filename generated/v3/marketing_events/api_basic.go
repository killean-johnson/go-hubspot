/*
Marketing Events

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// BasicAPIService BasicAPI service
type BasicAPIService service

type ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	externalEventId string
	externalAccountId *string
}

// The accountId that is associated with this marketing event in the external event application
func (r ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest) ExternalAccountId(externalAccountId string) ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest {
	r.externalAccountId = &externalAccountId
	return r
}

func (r ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveExecute(r)
}

/*
DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive Delete Marketing Event by External Ids

Deletes the existing Marketing Event with the specified externalAccountId, externalEventId, if it exists.

Only Marketing Events created by the same app can be deleted.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event in the external event application
 @return ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest
*/
func (a *BasicAPIService) DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive(ctx context.Context, externalEventId string) ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest {
	return ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest{
		ApiService: a,
		ctx: ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
func (a *BasicAPIService) DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveExecute(r ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterValueToString(r.externalEventId, "externalEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalAccountId == nil {
		return nil, reportError("externalAccountId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "externalAccountId", r.externalAccountId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteMarketingV3MarketingEventsObjectIdArchiveByObjectIdRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	objectId string
}

func (r ApiDeleteMarketingV3MarketingEventsObjectIdArchiveByObjectIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingV3MarketingEventsObjectIdArchiveByObjectIdExecute(r)
}

/*
DeleteMarketingV3MarketingEventsObjectIdArchiveByObjectId Delete Marketing Event by objectId

Deletes the existing Marketing Event with the specified objectId, if it exists.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectId The internal ID of the marketing event in HubSpot
 @return ApiDeleteMarketingV3MarketingEventsObjectIdArchiveByObjectIdRequest
*/
func (a *BasicAPIService) DeleteMarketingV3MarketingEventsObjectIdArchiveByObjectId(ctx context.Context, objectId string) ApiDeleteMarketingV3MarketingEventsObjectIdArchiveByObjectIdRequest {
	return ApiDeleteMarketingV3MarketingEventsObjectIdArchiveByObjectIdRequest{
		ApiService: a,
		ctx: ctx,
		objectId: objectId,
	}
}

// Execute executes the request
func (a *BasicAPIService) DeleteMarketingV3MarketingEventsObjectIdArchiveByObjectIdExecute(r ApiDeleteMarketingV3MarketingEventsObjectIdArchiveByObjectIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.DeleteMarketingV3MarketingEventsObjectIdArchiveByObjectId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/{objectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"objectId"+"}", url.PathEscape(parameterValueToString(r.objectId, "objectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetDetailsRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	externalEventId string
	externalAccountId *string
}

// The accountId that is associated with this marketing event in the external event application
func (r ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetDetailsRequest) ExternalAccountId(externalAccountId string) ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetDetailsRequest {
	r.externalAccountId = &externalAccountId
	return r
}

func (r ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetDetailsRequest) Execute() (*MarketingEventPublicReadResponse, *http.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsEventsExternalEventIdGetDetailsExecute(r)
}

/*
GetMarketingV3MarketingEventsEventsExternalEventIdGetDetails Get Marketing Event by External IDs

Returns the details of a Marketing Event with the specified externalAccountId, externalEventId, if it exists.

Only Marketing Events created by the same app making the request can be retrieved.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event in the external event application
 @return ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetDetailsRequest
*/
func (a *BasicAPIService) GetMarketingV3MarketingEventsEventsExternalEventIdGetDetails(ctx context.Context, externalEventId string) ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetDetailsRequest {
	return ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetDetailsRequest{
		ApiService: a,
		ctx: ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return MarketingEventPublicReadResponse
func (a *BasicAPIService) GetMarketingV3MarketingEventsEventsExternalEventIdGetDetailsExecute(r ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetDetailsRequest) (*MarketingEventPublicReadResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarketingEventPublicReadResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.GetMarketingV3MarketingEventsEventsExternalEventIdGetDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterValueToString(r.externalEventId, "externalEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalAccountId == nil {
		return localVarReturnValue, nil, reportError("externalAccountId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "externalAccountId", r.externalAccountId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3MarketingEventsGetAllRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	after *string
	limit *int32
}

// The cursor indicating the position of the last retrieved item.
func (r ApiGetMarketingV3MarketingEventsGetAllRequest) After(after string) ApiGetMarketingV3MarketingEventsGetAllRequest {
	r.after = &after
	return r
}

// The limit for response size. The default value is 10, the max number is 100
func (r ApiGetMarketingV3MarketingEventsGetAllRequest) Limit(limit int32) ApiGetMarketingV3MarketingEventsGetAllRequest {
	r.limit = &limit
	return r
}

func (r ApiGetMarketingV3MarketingEventsGetAllRequest) Execute() (*CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsGetAllExecute(r)
}

/*
GetMarketingV3MarketingEventsGetAll Get all marketing event

Returns all Marketing Events available on the portal, along with their properties, regardless of whether they were created manually or through the application.

The marketing events returned by this endpoint are sorted by objectId.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingV3MarketingEventsGetAllRequest
*/
func (a *BasicAPIService) GetMarketingV3MarketingEventsGetAll(ctx context.Context) ApiGetMarketingV3MarketingEventsGetAllRequest {
	return ApiGetMarketingV3MarketingEventsGetAllRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging
func (a *BasicAPIService) GetMarketingV3MarketingEventsGetAllExecute(r ApiGetMarketingV3MarketingEventsGetAllRequest) (*CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.GetMarketingV3MarketingEventsGetAll")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 10
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3MarketingEventsObjectIdGetByObjectIdRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	objectId string
}

func (r ApiGetMarketingV3MarketingEventsObjectIdGetByObjectIdRequest) Execute() (*MarketingEventPublicReadResponseV2, *http.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsObjectIdGetByObjectIdExecute(r)
}

/*
GetMarketingV3MarketingEventsObjectIdGetByObjectId Get Marketing Event by objectId

Returns the details of a Marketing Event with the specified objectId, if it exists.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectId The internal ID of the marketing event in HubSpot
 @return ApiGetMarketingV3MarketingEventsObjectIdGetByObjectIdRequest
*/
func (a *BasicAPIService) GetMarketingV3MarketingEventsObjectIdGetByObjectId(ctx context.Context, objectId string) ApiGetMarketingV3MarketingEventsObjectIdGetByObjectIdRequest {
	return ApiGetMarketingV3MarketingEventsObjectIdGetByObjectIdRequest{
		ApiService: a,
		ctx: ctx,
		objectId: objectId,
	}
}

// Execute executes the request
//  @return MarketingEventPublicReadResponseV2
func (a *BasicAPIService) GetMarketingV3MarketingEventsObjectIdGetByObjectIdExecute(r ApiGetMarketingV3MarketingEventsObjectIdGetByObjectIdRequest) (*MarketingEventPublicReadResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarketingEventPublicReadResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.GetMarketingV3MarketingEventsObjectIdGetByObjectId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/{objectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"objectId"+"}", url.PathEscape(parameterValueToString(r.objectId, "objectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	externalEventId string
	externalAccountId *string
	marketingEventUpdateRequestParams *MarketingEventUpdateRequestParams
}

// The accountId that is associated with this marketing event in the external event application
func (r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest) ExternalAccountId(externalAccountId string) ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest {
	r.externalAccountId = &externalAccountId
	return r
}

func (r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest) MarketingEventUpdateRequestParams(marketingEventUpdateRequestParams MarketingEventUpdateRequestParams) ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest {
	r.marketingEventUpdateRequestParams = &marketingEventUpdateRequestParams
	return r
}

func (r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest) Execute() (*MarketingEventPublicDefaultResponse, *http.Response, error) {
	return r.ApiService.PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateExecute(r)
}

/*
PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate Update Marketing Event by External IDs

Updates the details of an existing Marketing Event identified by its externalAccountId, externalEventId if it exists.

Only Marketing Events created by the same app can be updated.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event in the external event application
 @return ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest
*/
func (a *BasicAPIService) PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate(ctx context.Context, externalEventId string) ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest {
	return ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest{
		ApiService: a,
		ctx: ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return MarketingEventPublicDefaultResponse
func (a *BasicAPIService) PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateExecute(r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest) (*MarketingEventPublicDefaultResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarketingEventPublicDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterValueToString(r.externalEventId, "externalEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalAccountId == nil {
		return localVarReturnValue, nil, reportError("externalAccountId is required and must be specified")
	}
	if r.marketingEventUpdateRequestParams == nil {
		return localVarReturnValue, nil, reportError("marketingEventUpdateRequestParams is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "externalAccountId", r.externalAccountId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.marketingEventUpdateRequestParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingV3MarketingEventsObjectIdUpdateByObjectIdRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	objectId string
	marketingEventPublicUpdateRequestV2 *MarketingEventPublicUpdateRequestV2
}

func (r ApiPatchMarketingV3MarketingEventsObjectIdUpdateByObjectIdRequest) MarketingEventPublicUpdateRequestV2(marketingEventPublicUpdateRequestV2 MarketingEventPublicUpdateRequestV2) ApiPatchMarketingV3MarketingEventsObjectIdUpdateByObjectIdRequest {
	r.marketingEventPublicUpdateRequestV2 = &marketingEventPublicUpdateRequestV2
	return r
}

func (r ApiPatchMarketingV3MarketingEventsObjectIdUpdateByObjectIdRequest) Execute() (*MarketingEventPublicDefaultResponseV2, *http.Response, error) {
	return r.ApiService.PatchMarketingV3MarketingEventsObjectIdUpdateByObjectIdExecute(r)
}

/*
PatchMarketingV3MarketingEventsObjectIdUpdateByObjectId Update Marketing Event by objectId

Updates the details of an existing Marketing Event identified by its objectId, if it exists.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectId The internal ID of the marketing event in HubSpot
 @return ApiPatchMarketingV3MarketingEventsObjectIdUpdateByObjectIdRequest
*/
func (a *BasicAPIService) PatchMarketingV3MarketingEventsObjectIdUpdateByObjectId(ctx context.Context, objectId string) ApiPatchMarketingV3MarketingEventsObjectIdUpdateByObjectIdRequest {
	return ApiPatchMarketingV3MarketingEventsObjectIdUpdateByObjectIdRequest{
		ApiService: a,
		ctx: ctx,
		objectId: objectId,
	}
}

// Execute executes the request
//  @return MarketingEventPublicDefaultResponseV2
func (a *BasicAPIService) PatchMarketingV3MarketingEventsObjectIdUpdateByObjectIdExecute(r ApiPatchMarketingV3MarketingEventsObjectIdUpdateByObjectIdRequest) (*MarketingEventPublicDefaultResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarketingEventPublicDefaultResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.PatchMarketingV3MarketingEventsObjectIdUpdateByObjectId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/{objectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"objectId"+"}", url.PathEscape(parameterValueToString(r.objectId, "objectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.marketingEventPublicUpdateRequestV2 == nil {
		return localVarReturnValue, nil, reportError("marketingEventPublicUpdateRequestV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.marketingEventPublicUpdateRequestV2
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3MarketingEventsEventsCreateRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	marketingEventCreateRequestParams *MarketingEventCreateRequestParams
}

func (r ApiPostMarketingV3MarketingEventsEventsCreateRequest) MarketingEventCreateRequestParams(marketingEventCreateRequestParams MarketingEventCreateRequestParams) ApiPostMarketingV3MarketingEventsEventsCreateRequest {
	r.marketingEventCreateRequestParams = &marketingEventCreateRequestParams
	return r
}

func (r ApiPostMarketingV3MarketingEventsEventsCreateRequest) Execute() (*MarketingEventDefaultResponse, *http.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsEventsCreateExecute(r)
}

/*
PostMarketingV3MarketingEventsEventsCreate Create a marketing event

Creates a new marketing event in HubSpot

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3MarketingEventsEventsCreateRequest
*/
func (a *BasicAPIService) PostMarketingV3MarketingEventsEventsCreate(ctx context.Context) ApiPostMarketingV3MarketingEventsEventsCreateRequest {
	return ApiPostMarketingV3MarketingEventsEventsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MarketingEventDefaultResponse
func (a *BasicAPIService) PostMarketingV3MarketingEventsEventsCreateExecute(r ApiPostMarketingV3MarketingEventsEventsCreateRequest) (*MarketingEventDefaultResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarketingEventDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.PostMarketingV3MarketingEventsEventsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.marketingEventCreateRequestParams == nil {
		return localVarReturnValue, nil, reportError("marketingEventCreateRequestParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.marketingEventCreateRequestParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingV3MarketingEventsEventsExternalEventIdUpsertRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	externalEventId string
	marketingEventCreateRequestParams *MarketingEventCreateRequestParams
}

func (r ApiPutMarketingV3MarketingEventsEventsExternalEventIdUpsertRequest) MarketingEventCreateRequestParams(marketingEventCreateRequestParams MarketingEventCreateRequestParams) ApiPutMarketingV3MarketingEventsEventsExternalEventIdUpsertRequest {
	r.marketingEventCreateRequestParams = &marketingEventCreateRequestParams
	return r
}

func (r ApiPutMarketingV3MarketingEventsEventsExternalEventIdUpsertRequest) Execute() (*MarketingEventPublicDefaultResponse, *http.Response, error) {
	return r.ApiService.PutMarketingV3MarketingEventsEventsExternalEventIdUpsertExecute(r)
}

/*
PutMarketingV3MarketingEventsEventsExternalEventIdUpsert Create or update a marketing event

Upserts a marketing event If there is an existing marketing event with the specified ID, it will be updated; otherwise a new event will be created.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event in the external event application
 @return ApiPutMarketingV3MarketingEventsEventsExternalEventIdUpsertRequest
*/
func (a *BasicAPIService) PutMarketingV3MarketingEventsEventsExternalEventIdUpsert(ctx context.Context, externalEventId string) ApiPutMarketingV3MarketingEventsEventsExternalEventIdUpsertRequest {
	return ApiPutMarketingV3MarketingEventsEventsExternalEventIdUpsertRequest{
		ApiService: a,
		ctx: ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return MarketingEventPublicDefaultResponse
func (a *BasicAPIService) PutMarketingV3MarketingEventsEventsExternalEventIdUpsertExecute(r ApiPutMarketingV3MarketingEventsEventsExternalEventIdUpsertRequest) (*MarketingEventPublicDefaultResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarketingEventPublicDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.PutMarketingV3MarketingEventsEventsExternalEventIdUpsert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterValueToString(r.externalEventId, "externalEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.marketingEventCreateRequestParams == nil {
		return localVarReturnValue, nil, reportError("marketingEventCreateRequestParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.marketingEventCreateRequestParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
