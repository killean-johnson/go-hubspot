/*
Settings Multicurrency

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multicurrency

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ExchangeRateUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeRateUpdateRequest{}

// ExchangeRateUpdateRequest struct for ExchangeRateUpdateRequest
type ExchangeRateUpdateRequest struct {
	EffectiveAt *time.Time `json:"effectiveAt,omitempty"`
	Id string `json:"id"`
	ConversionRate float32 `json:"conversionRate"`
}

type _ExchangeRateUpdateRequest ExchangeRateUpdateRequest

// NewExchangeRateUpdateRequest instantiates a new ExchangeRateUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRateUpdateRequest(id string, conversionRate float32) *ExchangeRateUpdateRequest {
	this := ExchangeRateUpdateRequest{}
	this.Id = id
	this.ConversionRate = conversionRate
	return &this
}

// NewExchangeRateUpdateRequestWithDefaults instantiates a new ExchangeRateUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRateUpdateRequestWithDefaults() *ExchangeRateUpdateRequest {
	this := ExchangeRateUpdateRequest{}
	return &this
}

// GetEffectiveAt returns the EffectiveAt field value if set, zero value otherwise.
func (o *ExchangeRateUpdateRequest) GetEffectiveAt() time.Time {
	if o == nil || IsNil(o.EffectiveAt) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveAt
}

// GetEffectiveAtOk returns a tuple with the EffectiveAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateUpdateRequest) GetEffectiveAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EffectiveAt) {
		return nil, false
	}
	return o.EffectiveAt, true
}

// HasEffectiveAt returns a boolean if a field has been set.
func (o *ExchangeRateUpdateRequest) HasEffectiveAt() bool {
	if o != nil && !IsNil(o.EffectiveAt) {
		return true
	}

	return false
}

// SetEffectiveAt gets a reference to the given time.Time and assigns it to the EffectiveAt field.
func (o *ExchangeRateUpdateRequest) SetEffectiveAt(v time.Time) {
	o.EffectiveAt = &v
}

// GetId returns the Id field value
func (o *ExchangeRateUpdateRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExchangeRateUpdateRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExchangeRateUpdateRequest) SetId(v string) {
	o.Id = v
}

// GetConversionRate returns the ConversionRate field value
func (o *ExchangeRateUpdateRequest) GetConversionRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value
// and a boolean to check if the value has been set.
func (o *ExchangeRateUpdateRequest) GetConversionRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionRate, true
}

// SetConversionRate sets field value
func (o *ExchangeRateUpdateRequest) SetConversionRate(v float32) {
	o.ConversionRate = v
}

func (o ExchangeRateUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeRateUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EffectiveAt) {
		toSerialize["effectiveAt"] = o.EffectiveAt
	}
	toSerialize["id"] = o.Id
	toSerialize["conversionRate"] = o.ConversionRate
	return toSerialize, nil
}

func (o *ExchangeRateUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"conversionRate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExchangeRateUpdateRequest := _ExchangeRateUpdateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExchangeRateUpdateRequest)

	if err != nil {
		return err
	}

	*o = ExchangeRateUpdateRequest(varExchangeRateUpdateRequest)

	return err
}

type NullableExchangeRateUpdateRequest struct {
	value *ExchangeRateUpdateRequest
	isSet bool
}

func (v NullableExchangeRateUpdateRequest) Get() *ExchangeRateUpdateRequest {
	return v.value
}

func (v *NullableExchangeRateUpdateRequest) Set(val *ExchangeRateUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRateUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRateUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRateUpdateRequest(val *ExchangeRateUpdateRequest) *NullableExchangeRateUpdateRequest {
	return &NullableExchangeRateUpdateRequest{value: val, isSet: true}
}

func (v NullableExchangeRateUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRateUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


