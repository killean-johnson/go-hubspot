/*
Settings Multicurrency

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multicurrency

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// CurrencyAPIService CurrencyAPI service
type CurrencyAPIService service

type ApiGetSettingsV3CurrenciesCodesRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
}

func (r ApiGetSettingsV3CurrenciesCodesRequest) Execute() (*CollectionResponseCurrencyCodeInfoNoPaging, *http.Response, error) {
	return r.ApiService.GetSettingsV3CurrenciesCodesExecute(r)
}

/*
GetSettingsV3CurrenciesCodes Method for GetSettingsV3CurrenciesCodes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSettingsV3CurrenciesCodesRequest
*/
func (a *CurrencyAPIService) GetSettingsV3CurrenciesCodes(ctx context.Context) ApiGetSettingsV3CurrenciesCodesRequest {
	return ApiGetSettingsV3CurrenciesCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseCurrencyCodeInfoNoPaging
func (a *CurrencyAPIService) GetSettingsV3CurrenciesCodesExecute(r ApiGetSettingsV3CurrenciesCodesRequest) (*CollectionResponseCurrencyCodeInfoNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseCurrencyCodeInfoNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.GetSettingsV3CurrenciesCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/codes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSettingsV3CurrenciesCompanyCurrencyRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
}

func (r ApiGetSettingsV3CurrenciesCompanyCurrencyRequest) Execute() (*CompanyCurrency, *http.Response, error) {
	return r.ApiService.GetSettingsV3CurrenciesCompanyCurrencyExecute(r)
}

/*
GetSettingsV3CurrenciesCompanyCurrency Method for GetSettingsV3CurrenciesCompanyCurrency

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSettingsV3CurrenciesCompanyCurrencyRequest
*/
func (a *CurrencyAPIService) GetSettingsV3CurrenciesCompanyCurrency(ctx context.Context) ApiGetSettingsV3CurrenciesCompanyCurrencyRequest {
	return ApiGetSettingsV3CurrenciesCompanyCurrencyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CompanyCurrency
func (a *CurrencyAPIService) GetSettingsV3CurrenciesCompanyCurrencyExecute(r ApiGetSettingsV3CurrenciesCompanyCurrencyRequest) (*CompanyCurrency, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCurrency
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.GetSettingsV3CurrenciesCompanyCurrency")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/company-currency"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSettingsV3CurrenciesExchangeRatesRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
	limit *int32
	after *string
	fromCurrencyCode *string
	toCurrencyCode *string
}

// The maximum number of results to display per page.
func (r ApiGetSettingsV3CurrenciesExchangeRatesRequest) Limit(limit int32) ApiGetSettingsV3CurrenciesExchangeRatesRequest {
	r.limit = &limit
	return r
}

// The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetSettingsV3CurrenciesExchangeRatesRequest) After(after string) ApiGetSettingsV3CurrenciesExchangeRatesRequest {
	r.after = &after
	return r
}

func (r ApiGetSettingsV3CurrenciesExchangeRatesRequest) FromCurrencyCode(fromCurrencyCode string) ApiGetSettingsV3CurrenciesExchangeRatesRequest {
	r.fromCurrencyCode = &fromCurrencyCode
	return r
}

func (r ApiGetSettingsV3CurrenciesExchangeRatesRequest) ToCurrencyCode(toCurrencyCode string) ApiGetSettingsV3CurrenciesExchangeRatesRequest {
	r.toCurrencyCode = &toCurrencyCode
	return r
}

func (r ApiGetSettingsV3CurrenciesExchangeRatesRequest) Execute() (*CollectionResponseExchangeRateForwardPaging, *http.Response, error) {
	return r.ApiService.GetSettingsV3CurrenciesExchangeRatesExecute(r)
}

/*
GetSettingsV3CurrenciesExchangeRates Method for GetSettingsV3CurrenciesExchangeRates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSettingsV3CurrenciesExchangeRatesRequest
*/
func (a *CurrencyAPIService) GetSettingsV3CurrenciesExchangeRates(ctx context.Context) ApiGetSettingsV3CurrenciesExchangeRatesRequest {
	return ApiGetSettingsV3CurrenciesExchangeRatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseExchangeRateForwardPaging
func (a *CurrencyAPIService) GetSettingsV3CurrenciesExchangeRatesExecute(r ApiGetSettingsV3CurrenciesExchangeRatesRequest) (*CollectionResponseExchangeRateForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseExchangeRateForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.GetSettingsV3CurrenciesExchangeRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/exchange-rates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.fromCurrencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromCurrencyCode", r.fromCurrencyCode, "form", "")
	}
	if r.toCurrencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toCurrencyCode", r.toCurrencyCode, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSettingsV3CurrenciesExchangeRatesCurrentRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
}

func (r ApiGetSettingsV3CurrenciesExchangeRatesCurrentRequest) Execute() (*CollectionResponseExchangeRateNoPaging, *http.Response, error) {
	return r.ApiService.GetSettingsV3CurrenciesExchangeRatesCurrentExecute(r)
}

/*
GetSettingsV3CurrenciesExchangeRatesCurrent Method for GetSettingsV3CurrenciesExchangeRatesCurrent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSettingsV3CurrenciesExchangeRatesCurrentRequest
*/
func (a *CurrencyAPIService) GetSettingsV3CurrenciesExchangeRatesCurrent(ctx context.Context) ApiGetSettingsV3CurrenciesExchangeRatesCurrentRequest {
	return ApiGetSettingsV3CurrenciesExchangeRatesCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseExchangeRateNoPaging
func (a *CurrencyAPIService) GetSettingsV3CurrenciesExchangeRatesCurrentExecute(r ApiGetSettingsV3CurrenciesExchangeRatesCurrentRequest) (*CollectionResponseExchangeRateNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseExchangeRateNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.GetSettingsV3CurrenciesExchangeRatesCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/exchange-rates/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
	exchangeRateId string
}

func (r ApiGetSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest) Execute() (*ExchangeRate, *http.Response, error) {
	return r.ApiService.GetSettingsV3CurrenciesExchangeRatesExchangeRateIdExecute(r)
}

/*
GetSettingsV3CurrenciesExchangeRatesExchangeRateId Method for GetSettingsV3CurrenciesExchangeRatesExchangeRateId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param exchangeRateId
 @return ApiGetSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest
*/
func (a *CurrencyAPIService) GetSettingsV3CurrenciesExchangeRatesExchangeRateId(ctx context.Context, exchangeRateId string) ApiGetSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest {
	return ApiGetSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest{
		ApiService: a,
		ctx: ctx,
		exchangeRateId: exchangeRateId,
	}
}

// Execute executes the request
//  @return ExchangeRate
func (a *CurrencyAPIService) GetSettingsV3CurrenciesExchangeRatesExchangeRateIdExecute(r ApiGetSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest) (*ExchangeRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExchangeRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.GetSettingsV3CurrenciesExchangeRatesExchangeRateId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/exchange-rates/{exchangeRateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"exchangeRateId"+"}", url.PathEscape(parameterValueToString(r.exchangeRateId, "exchangeRateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
	exchangeRateId string
	exchangeRateMultiplier *ExchangeRateMultiplier
}

func (r ApiPatchSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest) ExchangeRateMultiplier(exchangeRateMultiplier ExchangeRateMultiplier) ApiPatchSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest {
	r.exchangeRateMultiplier = &exchangeRateMultiplier
	return r
}

func (r ApiPatchSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest) Execute() (*ExchangeRate, *http.Response, error) {
	return r.ApiService.PatchSettingsV3CurrenciesExchangeRatesExchangeRateIdExecute(r)
}

/*
PatchSettingsV3CurrenciesExchangeRatesExchangeRateId Method for PatchSettingsV3CurrenciesExchangeRatesExchangeRateId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param exchangeRateId
 @return ApiPatchSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest
*/
func (a *CurrencyAPIService) PatchSettingsV3CurrenciesExchangeRatesExchangeRateId(ctx context.Context, exchangeRateId string) ApiPatchSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest {
	return ApiPatchSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest{
		ApiService: a,
		ctx: ctx,
		exchangeRateId: exchangeRateId,
	}
}

// Execute executes the request
//  @return ExchangeRate
func (a *CurrencyAPIService) PatchSettingsV3CurrenciesExchangeRatesExchangeRateIdExecute(r ApiPatchSettingsV3CurrenciesExchangeRatesExchangeRateIdRequest) (*ExchangeRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExchangeRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.PatchSettingsV3CurrenciesExchangeRatesExchangeRateId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/exchange-rates/{exchangeRateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"exchangeRateId"+"}", url.PathEscape(parameterValueToString(r.exchangeRateId, "exchangeRateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exchangeRateMultiplier == nil {
		return localVarReturnValue, nil, reportError("exchangeRateMultiplier is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exchangeRateMultiplier
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSettingsV3CurrenciesExchangeRatesRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
	exchangeRateCreateRequest *ExchangeRateCreateRequest
}

func (r ApiPostSettingsV3CurrenciesExchangeRatesRequest) ExchangeRateCreateRequest(exchangeRateCreateRequest ExchangeRateCreateRequest) ApiPostSettingsV3CurrenciesExchangeRatesRequest {
	r.exchangeRateCreateRequest = &exchangeRateCreateRequest
	return r
}

func (r ApiPostSettingsV3CurrenciesExchangeRatesRequest) Execute() (*ExchangeRate, *http.Response, error) {
	return r.ApiService.PostSettingsV3CurrenciesExchangeRatesExecute(r)
}

/*
PostSettingsV3CurrenciesExchangeRates Method for PostSettingsV3CurrenciesExchangeRates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSettingsV3CurrenciesExchangeRatesRequest
*/
func (a *CurrencyAPIService) PostSettingsV3CurrenciesExchangeRates(ctx context.Context) ApiPostSettingsV3CurrenciesExchangeRatesRequest {
	return ApiPostSettingsV3CurrenciesExchangeRatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExchangeRate
func (a *CurrencyAPIService) PostSettingsV3CurrenciesExchangeRatesExecute(r ApiPostSettingsV3CurrenciesExchangeRatesRequest) (*ExchangeRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExchangeRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.PostSettingsV3CurrenciesExchangeRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/exchange-rates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exchangeRateCreateRequest == nil {
		return localVarReturnValue, nil, reportError("exchangeRateCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exchangeRateCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSettingsV3CurrenciesExchangeRatesBatchCreateRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
	batchInputExchangeRateCreateRequest *BatchInputExchangeRateCreateRequest
}

func (r ApiPostSettingsV3CurrenciesExchangeRatesBatchCreateRequest) BatchInputExchangeRateCreateRequest(batchInputExchangeRateCreateRequest BatchInputExchangeRateCreateRequest) ApiPostSettingsV3CurrenciesExchangeRatesBatchCreateRequest {
	r.batchInputExchangeRateCreateRequest = &batchInputExchangeRateCreateRequest
	return r
}

func (r ApiPostSettingsV3CurrenciesExchangeRatesBatchCreateRequest) Execute() (*BatchResponseExchangeRate, *http.Response, error) {
	return r.ApiService.PostSettingsV3CurrenciesExchangeRatesBatchCreateExecute(r)
}

/*
PostSettingsV3CurrenciesExchangeRatesBatchCreate Method for PostSettingsV3CurrenciesExchangeRatesBatchCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSettingsV3CurrenciesExchangeRatesBatchCreateRequest
*/
func (a *CurrencyAPIService) PostSettingsV3CurrenciesExchangeRatesBatchCreate(ctx context.Context) ApiPostSettingsV3CurrenciesExchangeRatesBatchCreateRequest {
	return ApiPostSettingsV3CurrenciesExchangeRatesBatchCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchResponseExchangeRate
func (a *CurrencyAPIService) PostSettingsV3CurrenciesExchangeRatesBatchCreateExecute(r ApiPostSettingsV3CurrenciesExchangeRatesBatchCreateRequest) (*BatchResponseExchangeRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponseExchangeRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.PostSettingsV3CurrenciesExchangeRatesBatchCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/exchange-rates/batch/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputExchangeRateCreateRequest == nil {
		return localVarReturnValue, nil, reportError("batchInputExchangeRateCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputExchangeRateCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSettingsV3CurrenciesExchangeRatesBatchReadRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
	batchInputPublicObjectId *BatchInputPublicObjectId
}

func (r ApiPostSettingsV3CurrenciesExchangeRatesBatchReadRequest) BatchInputPublicObjectId(batchInputPublicObjectId BatchInputPublicObjectId) ApiPostSettingsV3CurrenciesExchangeRatesBatchReadRequest {
	r.batchInputPublicObjectId = &batchInputPublicObjectId
	return r
}

func (r ApiPostSettingsV3CurrenciesExchangeRatesBatchReadRequest) Execute() (*BatchResponseExchangeRate, *http.Response, error) {
	return r.ApiService.PostSettingsV3CurrenciesExchangeRatesBatchReadExecute(r)
}

/*
PostSettingsV3CurrenciesExchangeRatesBatchRead Method for PostSettingsV3CurrenciesExchangeRatesBatchRead

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSettingsV3CurrenciesExchangeRatesBatchReadRequest
*/
func (a *CurrencyAPIService) PostSettingsV3CurrenciesExchangeRatesBatchRead(ctx context.Context) ApiPostSettingsV3CurrenciesExchangeRatesBatchReadRequest {
	return ApiPostSettingsV3CurrenciesExchangeRatesBatchReadRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchResponseExchangeRate
func (a *CurrencyAPIService) PostSettingsV3CurrenciesExchangeRatesBatchReadExecute(r ApiPostSettingsV3CurrenciesExchangeRatesBatchReadRequest) (*BatchResponseExchangeRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponseExchangeRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.PostSettingsV3CurrenciesExchangeRatesBatchRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/exchange-rates/batch/read"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputPublicObjectId == nil {
		return localVarReturnValue, nil, reportError("batchInputPublicObjectId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputPublicObjectId
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSettingsV3CurrenciesExchangeRatesBatchUpdateRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
	batchInputExchangeRateUpdateRequest *BatchInputExchangeRateUpdateRequest
}

func (r ApiPostSettingsV3CurrenciesExchangeRatesBatchUpdateRequest) BatchInputExchangeRateUpdateRequest(batchInputExchangeRateUpdateRequest BatchInputExchangeRateUpdateRequest) ApiPostSettingsV3CurrenciesExchangeRatesBatchUpdateRequest {
	r.batchInputExchangeRateUpdateRequest = &batchInputExchangeRateUpdateRequest
	return r
}

func (r ApiPostSettingsV3CurrenciesExchangeRatesBatchUpdateRequest) Execute() (*BatchResponseExchangeRate, *http.Response, error) {
	return r.ApiService.PostSettingsV3CurrenciesExchangeRatesBatchUpdateExecute(r)
}

/*
PostSettingsV3CurrenciesExchangeRatesBatchUpdate Method for PostSettingsV3CurrenciesExchangeRatesBatchUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSettingsV3CurrenciesExchangeRatesBatchUpdateRequest
*/
func (a *CurrencyAPIService) PostSettingsV3CurrenciesExchangeRatesBatchUpdate(ctx context.Context) ApiPostSettingsV3CurrenciesExchangeRatesBatchUpdateRequest {
	return ApiPostSettingsV3CurrenciesExchangeRatesBatchUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchResponseExchangeRate
func (a *CurrencyAPIService) PostSettingsV3CurrenciesExchangeRatesBatchUpdateExecute(r ApiPostSettingsV3CurrenciesExchangeRatesBatchUpdateRequest) (*BatchResponseExchangeRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponseExchangeRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.PostSettingsV3CurrenciesExchangeRatesBatchUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/exchange-rates/batch/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchInputExchangeRateUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("batchInputExchangeRateUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchInputExchangeRateUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSettingsV3CurrenciesExchangeRatesUpdateVisibilityRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
	currencyPairUpdate *CurrencyPairUpdate
}

func (r ApiPostSettingsV3CurrenciesExchangeRatesUpdateVisibilityRequest) CurrencyPairUpdate(currencyPairUpdate CurrencyPairUpdate) ApiPostSettingsV3CurrenciesExchangeRatesUpdateVisibilityRequest {
	r.currencyPairUpdate = &currencyPairUpdate
	return r
}

func (r ApiPostSettingsV3CurrenciesExchangeRatesUpdateVisibilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostSettingsV3CurrenciesExchangeRatesUpdateVisibilityExecute(r)
}

/*
PostSettingsV3CurrenciesExchangeRatesUpdateVisibility Method for PostSettingsV3CurrenciesExchangeRatesUpdateVisibility

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSettingsV3CurrenciesExchangeRatesUpdateVisibilityRequest
*/
func (a *CurrencyAPIService) PostSettingsV3CurrenciesExchangeRatesUpdateVisibility(ctx context.Context) ApiPostSettingsV3CurrenciesExchangeRatesUpdateVisibilityRequest {
	return ApiPostSettingsV3CurrenciesExchangeRatesUpdateVisibilityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurrencyAPIService) PostSettingsV3CurrenciesExchangeRatesUpdateVisibilityExecute(r ApiPostSettingsV3CurrenciesExchangeRatesUpdateVisibilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.PostSettingsV3CurrenciesExchangeRatesUpdateVisibility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/exchange-rates/update-visibility"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.currencyPairUpdate == nil {
		return nil, reportError("currencyPairUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.currencyPairUpdate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutSettingsV3CurrenciesCompanyCurrencyRequest struct {
	ctx context.Context
	ApiService *CurrencyAPIService
	companyCurrencyUpdateRequest *CompanyCurrencyUpdateRequest
}

func (r ApiPutSettingsV3CurrenciesCompanyCurrencyRequest) CompanyCurrencyUpdateRequest(companyCurrencyUpdateRequest CompanyCurrencyUpdateRequest) ApiPutSettingsV3CurrenciesCompanyCurrencyRequest {
	r.companyCurrencyUpdateRequest = &companyCurrencyUpdateRequest
	return r
}

func (r ApiPutSettingsV3CurrenciesCompanyCurrencyRequest) Execute() (*CompanyCurrency, *http.Response, error) {
	return r.ApiService.PutSettingsV3CurrenciesCompanyCurrencyExecute(r)
}

/*
PutSettingsV3CurrenciesCompanyCurrency Method for PutSettingsV3CurrenciesCompanyCurrency

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPutSettingsV3CurrenciesCompanyCurrencyRequest
*/
func (a *CurrencyAPIService) PutSettingsV3CurrenciesCompanyCurrency(ctx context.Context) ApiPutSettingsV3CurrenciesCompanyCurrencyRequest {
	return ApiPutSettingsV3CurrenciesCompanyCurrencyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CompanyCurrency
func (a *CurrencyAPIService) PutSettingsV3CurrenciesCompanyCurrencyExecute(r ApiPutSettingsV3CurrenciesCompanyCurrencyRequest) (*CompanyCurrency, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCurrency
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrencyAPIService.PutSettingsV3CurrenciesCompanyCurrency")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/v3/currencies/company-currency"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyCurrencyUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("companyCurrencyUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.companyCurrencyUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
