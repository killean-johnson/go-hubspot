/*
Settings Multicurrency

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multicurrency

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CurrencyCodeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyCodeInfo{}

// CurrencyCodeInfo struct for CurrencyCodeInfo
type CurrencyCodeInfo struct {
	CurrencyName string `json:"currencyName"`
	CurrencyCode string `json:"currencyCode"`
}

type _CurrencyCodeInfo CurrencyCodeInfo

// NewCurrencyCodeInfo instantiates a new CurrencyCodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyCodeInfo(currencyName string, currencyCode string) *CurrencyCodeInfo {
	this := CurrencyCodeInfo{}
	this.CurrencyName = currencyName
	this.CurrencyCode = currencyCode
	return &this
}

// NewCurrencyCodeInfoWithDefaults instantiates a new CurrencyCodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyCodeInfoWithDefaults() *CurrencyCodeInfo {
	this := CurrencyCodeInfo{}
	return &this
}

// GetCurrencyName returns the CurrencyName field value
func (o *CurrencyCodeInfo) GetCurrencyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyName
}

// GetCurrencyNameOk returns a tuple with the CurrencyName field value
// and a boolean to check if the value has been set.
func (o *CurrencyCodeInfo) GetCurrencyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyName, true
}

// SetCurrencyName sets field value
func (o *CurrencyCodeInfo) SetCurrencyName(v string) {
	o.CurrencyName = v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *CurrencyCodeInfo) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *CurrencyCodeInfo) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *CurrencyCodeInfo) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

func (o CurrencyCodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyCodeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currencyName"] = o.CurrencyName
	toSerialize["currencyCode"] = o.CurrencyCode
	return toSerialize, nil
}

func (o *CurrencyCodeInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currencyName",
		"currencyCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCurrencyCodeInfo := _CurrencyCodeInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCurrencyCodeInfo)

	if err != nil {
		return err
	}

	*o = CurrencyCodeInfo(varCurrencyCodeInfo)

	return err
}

type NullableCurrencyCodeInfo struct {
	value *CurrencyCodeInfo
	isSet bool
}

func (v NullableCurrencyCodeInfo) Get() *CurrencyCodeInfo {
	return v.value
}

func (v *NullableCurrencyCodeInfo) Set(val *CurrencyCodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyCodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyCodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyCodeInfo(val *CurrencyCodeInfo) *NullableCurrencyCodeInfo {
	return &NullableCurrencyCodeInfo{value: val, isSet: true}
}

func (v NullableCurrencyCodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyCodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


