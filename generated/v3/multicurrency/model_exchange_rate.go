/*
Settings Multicurrency

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multicurrency

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ExchangeRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeRate{}

// ExchangeRate struct for ExchangeRate
type ExchangeRate struct {
	CreatedAt time.Time `json:"createdAt"`
	ToCurrencyCode string `json:"toCurrencyCode"`
	VisibleInUI bool `json:"visibleInUI"`
	EffectiveAt time.Time `json:"effectiveAt"`
	Id string `json:"id"`
	ConversionRate float32 `json:"conversionRate"`
	FromCurrencyCode string `json:"fromCurrencyCode"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type _ExchangeRate ExchangeRate

// NewExchangeRate instantiates a new ExchangeRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRate(createdAt time.Time, toCurrencyCode string, visibleInUI bool, effectiveAt time.Time, id string, conversionRate float32, fromCurrencyCode string, updatedAt time.Time) *ExchangeRate {
	this := ExchangeRate{}
	this.CreatedAt = createdAt
	this.ToCurrencyCode = toCurrencyCode
	this.VisibleInUI = visibleInUI
	this.EffectiveAt = effectiveAt
	this.Id = id
	this.ConversionRate = conversionRate
	this.FromCurrencyCode = fromCurrencyCode
	this.UpdatedAt = updatedAt
	return &this
}

// NewExchangeRateWithDefaults instantiates a new ExchangeRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRateWithDefaults() *ExchangeRate {
	this := ExchangeRate{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *ExchangeRate) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ExchangeRate) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetToCurrencyCode returns the ToCurrencyCode field value
func (o *ExchangeRate) GetToCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToCurrencyCode
}

// GetToCurrencyCodeOk returns a tuple with the ToCurrencyCode field value
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetToCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToCurrencyCode, true
}

// SetToCurrencyCode sets field value
func (o *ExchangeRate) SetToCurrencyCode(v string) {
	o.ToCurrencyCode = v
}

// GetVisibleInUI returns the VisibleInUI field value
func (o *ExchangeRate) GetVisibleInUI() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VisibleInUI
}

// GetVisibleInUIOk returns a tuple with the VisibleInUI field value
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetVisibleInUIOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VisibleInUI, true
}

// SetVisibleInUI sets field value
func (o *ExchangeRate) SetVisibleInUI(v bool) {
	o.VisibleInUI = v
}

// GetEffectiveAt returns the EffectiveAt field value
func (o *ExchangeRate) GetEffectiveAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EffectiveAt
}

// GetEffectiveAtOk returns a tuple with the EffectiveAt field value
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetEffectiveAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveAt, true
}

// SetEffectiveAt sets field value
func (o *ExchangeRate) SetEffectiveAt(v time.Time) {
	o.EffectiveAt = v
}

// GetId returns the Id field value
func (o *ExchangeRate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExchangeRate) SetId(v string) {
	o.Id = v
}

// GetConversionRate returns the ConversionRate field value
func (o *ExchangeRate) GetConversionRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetConversionRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionRate, true
}

// SetConversionRate sets field value
func (o *ExchangeRate) SetConversionRate(v float32) {
	o.ConversionRate = v
}

// GetFromCurrencyCode returns the FromCurrencyCode field value
func (o *ExchangeRate) GetFromCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromCurrencyCode
}

// GetFromCurrencyCodeOk returns a tuple with the FromCurrencyCode field value
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetFromCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromCurrencyCode, true
}

// SetFromCurrencyCode sets field value
func (o *ExchangeRate) SetFromCurrencyCode(v string) {
	o.FromCurrencyCode = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ExchangeRate) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ExchangeRate) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o ExchangeRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["toCurrencyCode"] = o.ToCurrencyCode
	toSerialize["visibleInUI"] = o.VisibleInUI
	toSerialize["effectiveAt"] = o.EffectiveAt
	toSerialize["id"] = o.Id
	toSerialize["conversionRate"] = o.ConversionRate
	toSerialize["fromCurrencyCode"] = o.FromCurrencyCode
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *ExchangeRate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"toCurrencyCode",
		"visibleInUI",
		"effectiveAt",
		"id",
		"conversionRate",
		"fromCurrencyCode",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExchangeRate := _ExchangeRate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExchangeRate)

	if err != nil {
		return err
	}

	*o = ExchangeRate(varExchangeRate)

	return err
}

type NullableExchangeRate struct {
	value *ExchangeRate
	isSet bool
}

func (v NullableExchangeRate) Get() *ExchangeRate {
	return v.value
}

func (v *NullableExchangeRate) Set(val *ExchangeRate) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRate) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRate(val *ExchangeRate) *NullableExchangeRate {
	return &NullableExchangeRate{value: val, isSet: true}
}

func (v NullableExchangeRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


