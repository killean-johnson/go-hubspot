/*
Settings Multicurrency

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multicurrency

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CurrencyPairUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyPairUpdate{}

// CurrencyPairUpdate struct for CurrencyPairUpdate
type CurrencyPairUpdate struct {
	ToCurrencyCode string `json:"toCurrencyCode"`
	VisibleInUI bool `json:"visibleInUI"`
	FromCurrencyCode string `json:"fromCurrencyCode"`
}

type _CurrencyPairUpdate CurrencyPairUpdate

// NewCurrencyPairUpdate instantiates a new CurrencyPairUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyPairUpdate(toCurrencyCode string, visibleInUI bool, fromCurrencyCode string) *CurrencyPairUpdate {
	this := CurrencyPairUpdate{}
	this.ToCurrencyCode = toCurrencyCode
	this.VisibleInUI = visibleInUI
	this.FromCurrencyCode = fromCurrencyCode
	return &this
}

// NewCurrencyPairUpdateWithDefaults instantiates a new CurrencyPairUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyPairUpdateWithDefaults() *CurrencyPairUpdate {
	this := CurrencyPairUpdate{}
	return &this
}

// GetToCurrencyCode returns the ToCurrencyCode field value
func (o *CurrencyPairUpdate) GetToCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToCurrencyCode
}

// GetToCurrencyCodeOk returns a tuple with the ToCurrencyCode field value
// and a boolean to check if the value has been set.
func (o *CurrencyPairUpdate) GetToCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToCurrencyCode, true
}

// SetToCurrencyCode sets field value
func (o *CurrencyPairUpdate) SetToCurrencyCode(v string) {
	o.ToCurrencyCode = v
}

// GetVisibleInUI returns the VisibleInUI field value
func (o *CurrencyPairUpdate) GetVisibleInUI() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VisibleInUI
}

// GetVisibleInUIOk returns a tuple with the VisibleInUI field value
// and a boolean to check if the value has been set.
func (o *CurrencyPairUpdate) GetVisibleInUIOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VisibleInUI, true
}

// SetVisibleInUI sets field value
func (o *CurrencyPairUpdate) SetVisibleInUI(v bool) {
	o.VisibleInUI = v
}

// GetFromCurrencyCode returns the FromCurrencyCode field value
func (o *CurrencyPairUpdate) GetFromCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromCurrencyCode
}

// GetFromCurrencyCodeOk returns a tuple with the FromCurrencyCode field value
// and a boolean to check if the value has been set.
func (o *CurrencyPairUpdate) GetFromCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromCurrencyCode, true
}

// SetFromCurrencyCode sets field value
func (o *CurrencyPairUpdate) SetFromCurrencyCode(v string) {
	o.FromCurrencyCode = v
}

func (o CurrencyPairUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyPairUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["toCurrencyCode"] = o.ToCurrencyCode
	toSerialize["visibleInUI"] = o.VisibleInUI
	toSerialize["fromCurrencyCode"] = o.FromCurrencyCode
	return toSerialize, nil
}

func (o *CurrencyPairUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"toCurrencyCode",
		"visibleInUI",
		"fromCurrencyCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCurrencyPairUpdate := _CurrencyPairUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCurrencyPairUpdate)

	if err != nil {
		return err
	}

	*o = CurrencyPairUpdate(varCurrencyPairUpdate)

	return err
}

type NullableCurrencyPairUpdate struct {
	value *CurrencyPairUpdate
	isSet bool
}

func (v NullableCurrencyPairUpdate) Get() *CurrencyPairUpdate {
	return v.value
}

func (v *NullableCurrencyPairUpdate) Set(val *CurrencyPairUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyPairUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyPairUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyPairUpdate(val *CurrencyPairUpdate) *NullableCurrencyPairUpdate {
	return &NullableCurrencyPairUpdate{value: val, isSet: true}
}

func (v NullableCurrencyPairUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyPairUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


