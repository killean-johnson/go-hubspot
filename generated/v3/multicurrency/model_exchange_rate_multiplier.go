/*
Settings Multicurrency

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multicurrency

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ExchangeRateMultiplier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeRateMultiplier{}

// ExchangeRateMultiplier struct for ExchangeRateMultiplier
type ExchangeRateMultiplier struct {
	EffectiveAt *time.Time `json:"effectiveAt,omitempty"`
	ConversionRate float32 `json:"conversionRate"`
}

type _ExchangeRateMultiplier ExchangeRateMultiplier

// NewExchangeRateMultiplier instantiates a new ExchangeRateMultiplier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRateMultiplier(conversionRate float32) *ExchangeRateMultiplier {
	this := ExchangeRateMultiplier{}
	this.ConversionRate = conversionRate
	return &this
}

// NewExchangeRateMultiplierWithDefaults instantiates a new ExchangeRateMultiplier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRateMultiplierWithDefaults() *ExchangeRateMultiplier {
	this := ExchangeRateMultiplier{}
	return &this
}

// GetEffectiveAt returns the EffectiveAt field value if set, zero value otherwise.
func (o *ExchangeRateMultiplier) GetEffectiveAt() time.Time {
	if o == nil || IsNil(o.EffectiveAt) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveAt
}

// GetEffectiveAtOk returns a tuple with the EffectiveAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateMultiplier) GetEffectiveAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EffectiveAt) {
		return nil, false
	}
	return o.EffectiveAt, true
}

// HasEffectiveAt returns a boolean if a field has been set.
func (o *ExchangeRateMultiplier) HasEffectiveAt() bool {
	if o != nil && !IsNil(o.EffectiveAt) {
		return true
	}

	return false
}

// SetEffectiveAt gets a reference to the given time.Time and assigns it to the EffectiveAt field.
func (o *ExchangeRateMultiplier) SetEffectiveAt(v time.Time) {
	o.EffectiveAt = &v
}

// GetConversionRate returns the ConversionRate field value
func (o *ExchangeRateMultiplier) GetConversionRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value
// and a boolean to check if the value has been set.
func (o *ExchangeRateMultiplier) GetConversionRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionRate, true
}

// SetConversionRate sets field value
func (o *ExchangeRateMultiplier) SetConversionRate(v float32) {
	o.ConversionRate = v
}

func (o ExchangeRateMultiplier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeRateMultiplier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EffectiveAt) {
		toSerialize["effectiveAt"] = o.EffectiveAt
	}
	toSerialize["conversionRate"] = o.ConversionRate
	return toSerialize, nil
}

func (o *ExchangeRateMultiplier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conversionRate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExchangeRateMultiplier := _ExchangeRateMultiplier{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExchangeRateMultiplier)

	if err != nil {
		return err
	}

	*o = ExchangeRateMultiplier(varExchangeRateMultiplier)

	return err
}

type NullableExchangeRateMultiplier struct {
	value *ExchangeRateMultiplier
	isSet bool
}

func (v NullableExchangeRateMultiplier) Get() *ExchangeRateMultiplier {
	return v.value
}

func (v *NullableExchangeRateMultiplier) Set(val *ExchangeRateMultiplier) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRateMultiplier) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRateMultiplier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRateMultiplier(val *ExchangeRateMultiplier) *NullableExchangeRateMultiplier {
	return &NullableExchangeRateMultiplier{value: val, isSet: true}
}

func (v NullableExchangeRateMultiplier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRateMultiplier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


