/*
Scheduler Meetings

Meetings Service For HubSpot Sales

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package meetings

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExternalCommunicationConsentCheckbox type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalCommunicationConsentCheckbox{}

// ExternalCommunicationConsentCheckbox struct for ExternalCommunicationConsentCheckbox
type ExternalCommunicationConsentCheckbox struct {
	CommunicationTypeId string `json:"communicationTypeId"`
	Label string `json:"label"`
	Required bool `json:"required"`
}

type _ExternalCommunicationConsentCheckbox ExternalCommunicationConsentCheckbox

// NewExternalCommunicationConsentCheckbox instantiates a new ExternalCommunicationConsentCheckbox object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalCommunicationConsentCheckbox(communicationTypeId string, label string, required bool) *ExternalCommunicationConsentCheckbox {
	this := ExternalCommunicationConsentCheckbox{}
	this.CommunicationTypeId = communicationTypeId
	this.Label = label
	this.Required = required
	return &this
}

// NewExternalCommunicationConsentCheckboxWithDefaults instantiates a new ExternalCommunicationConsentCheckbox object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalCommunicationConsentCheckboxWithDefaults() *ExternalCommunicationConsentCheckbox {
	this := ExternalCommunicationConsentCheckbox{}
	return &this
}

// GetCommunicationTypeId returns the CommunicationTypeId field value
func (o *ExternalCommunicationConsentCheckbox) GetCommunicationTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommunicationTypeId
}

// GetCommunicationTypeIdOk returns a tuple with the CommunicationTypeId field value
// and a boolean to check if the value has been set.
func (o *ExternalCommunicationConsentCheckbox) GetCommunicationTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommunicationTypeId, true
}

// SetCommunicationTypeId sets field value
func (o *ExternalCommunicationConsentCheckbox) SetCommunicationTypeId(v string) {
	o.CommunicationTypeId = v
}

// GetLabel returns the Label field value
func (o *ExternalCommunicationConsentCheckbox) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ExternalCommunicationConsentCheckbox) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ExternalCommunicationConsentCheckbox) SetLabel(v string) {
	o.Label = v
}

// GetRequired returns the Required field value
func (o *ExternalCommunicationConsentCheckbox) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *ExternalCommunicationConsentCheckbox) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *ExternalCommunicationConsentCheckbox) SetRequired(v bool) {
	o.Required = v
}

func (o ExternalCommunicationConsentCheckbox) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalCommunicationConsentCheckbox) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["communicationTypeId"] = o.CommunicationTypeId
	toSerialize["label"] = o.Label
	toSerialize["required"] = o.Required
	return toSerialize, nil
}

func (o *ExternalCommunicationConsentCheckbox) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"communicationTypeId",
		"label",
		"required",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalCommunicationConsentCheckbox := _ExternalCommunicationConsentCheckbox{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalCommunicationConsentCheckbox)

	if err != nil {
		return err
	}

	*o = ExternalCommunicationConsentCheckbox(varExternalCommunicationConsentCheckbox)

	return err
}

type NullableExternalCommunicationConsentCheckbox struct {
	value *ExternalCommunicationConsentCheckbox
	isSet bool
}

func (v NullableExternalCommunicationConsentCheckbox) Get() *ExternalCommunicationConsentCheckbox {
	return v.value
}

func (v *NullableExternalCommunicationConsentCheckbox) Set(val *ExternalCommunicationConsentCheckbox) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalCommunicationConsentCheckbox) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalCommunicationConsentCheckbox) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalCommunicationConsentCheckbox(val *ExternalCommunicationConsentCheckbox) *NullableExternalCommunicationConsentCheckbox {
	return &NullableExternalCommunicationConsentCheckbox{value: val, isSet: true}
}

func (v NullableExternalCommunicationConsentCheckbox) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalCommunicationConsentCheckbox) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


