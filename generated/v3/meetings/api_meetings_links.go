/*
Scheduler Meetings

Meetings Service For HubSpot Sales

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package meetings

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// MeetingsLinksAPIService MeetingsLinksAPI service
type MeetingsLinksAPIService service

type ApiGetSchedulerV3MeetingsMeetingLinksRequest struct {
	ctx context.Context
	ApiService *MeetingsLinksAPIService
	after *string
	limit *int32
	name *string
	organizerUserId *string
	type_ *string
}

// 
func (r ApiGetSchedulerV3MeetingsMeetingLinksRequest) After(after string) ApiGetSchedulerV3MeetingsMeetingLinksRequest {
	r.after = &after
	return r
}

// 
func (r ApiGetSchedulerV3MeetingsMeetingLinksRequest) Limit(limit int32) ApiGetSchedulerV3MeetingsMeetingLinksRequest {
	r.limit = &limit
	return r
}

// 
func (r ApiGetSchedulerV3MeetingsMeetingLinksRequest) Name(name string) ApiGetSchedulerV3MeetingsMeetingLinksRequest {
	r.name = &name
	return r
}

// 
func (r ApiGetSchedulerV3MeetingsMeetingLinksRequest) OrganizerUserId(organizerUserId string) ApiGetSchedulerV3MeetingsMeetingLinksRequest {
	r.organizerUserId = &organizerUserId
	return r
}

// 
func (r ApiGetSchedulerV3MeetingsMeetingLinksRequest) Type_(type_ string) ApiGetSchedulerV3MeetingsMeetingLinksRequest {
	r.type_ = &type_
	return r
}

func (r ApiGetSchedulerV3MeetingsMeetingLinksRequest) Execute() (*CollectionResponseWithTotalExternalLinkMetadataForwardPaging, *http.Response, error) {
	return r.ApiService.GetSchedulerV3MeetingsMeetingLinksExecute(r)
}

/*
GetSchedulerV3MeetingsMeetingLinks Method for GetSchedulerV3MeetingsMeetingLinks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSchedulerV3MeetingsMeetingLinksRequest
*/
func (a *MeetingsLinksAPIService) GetSchedulerV3MeetingsMeetingLinks(ctx context.Context) ApiGetSchedulerV3MeetingsMeetingLinksRequest {
	return ApiGetSchedulerV3MeetingsMeetingLinksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseWithTotalExternalLinkMetadataForwardPaging
func (a *MeetingsLinksAPIService) GetSchedulerV3MeetingsMeetingLinksExecute(r ApiGetSchedulerV3MeetingsMeetingLinksRequest) (*CollectionResponseWithTotalExternalLinkMetadataForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseWithTotalExternalLinkMetadataForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeetingsLinksAPIService.GetSchedulerV3MeetingsMeetingLinks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scheduler/v3/meetings/meeting-links"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.organizerUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizerUserId", r.organizerUserId, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugRequest struct {
	ctx context.Context
	ApiService *MeetingsLinksAPIService
	slug string
	timezone *string
	monthOffset *int32
}

// 
func (r ApiGetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugRequest) Timezone(timezone string) ApiGetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugRequest {
	r.timezone = &timezone
	return r
}

// 
func (r ApiGetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugRequest) MonthOffset(monthOffset int32) ApiGetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugRequest {
	r.monthOffset = &monthOffset
	return r
}

func (r ApiGetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugRequest) Execute() (*ExternalLinkAvailabilityAndBusyTimes, *http.Response, error) {
	return r.ApiService.GetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugExecute(r)
}

/*
GetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlug Method for GetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlug

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param slug 
 @return ApiGetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugRequest
*/
func (a *MeetingsLinksAPIService) GetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlug(ctx context.Context, slug string) ApiGetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugRequest {
	return ApiGetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugRequest{
		ApiService: a,
		ctx: ctx,
		slug: slug,
	}
}

// Execute executes the request
//  @return ExternalLinkAvailabilityAndBusyTimes
func (a *MeetingsLinksAPIService) GetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugExecute(r ApiGetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlugRequest) (*ExternalLinkAvailabilityAndBusyTimes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalLinkAvailabilityAndBusyTimes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeetingsLinksAPIService.GetSchedulerV3MeetingsMeetingLinksBookAvailabilityPageSlug")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scheduler/v3/meetings/meeting-links/book/availability-page/{slug}"
	localVarPath = strings.Replace(localVarPath, "{"+"slug"+"}", url.PathEscape(parameterValueToString(r.slug, "slug")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.timezone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timezone", r.timezone, "form", "")
	}
	if r.monthOffset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monthOffset", r.monthOffset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSchedulerV3MeetingsMeetingLinksBookSlugRequest struct {
	ctx context.Context
	ApiService *MeetingsLinksAPIService
	slug string
	timezone *string
}

// 
func (r ApiGetSchedulerV3MeetingsMeetingLinksBookSlugRequest) Timezone(timezone string) ApiGetSchedulerV3MeetingsMeetingLinksBookSlugRequest {
	r.timezone = &timezone
	return r
}

func (r ApiGetSchedulerV3MeetingsMeetingLinksBookSlugRequest) Execute() (*ExternalBookingInfo, *http.Response, error) {
	return r.ApiService.GetSchedulerV3MeetingsMeetingLinksBookSlugExecute(r)
}

/*
GetSchedulerV3MeetingsMeetingLinksBookSlug Method for GetSchedulerV3MeetingsMeetingLinksBookSlug

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param slug 
 @return ApiGetSchedulerV3MeetingsMeetingLinksBookSlugRequest
*/
func (a *MeetingsLinksAPIService) GetSchedulerV3MeetingsMeetingLinksBookSlug(ctx context.Context, slug string) ApiGetSchedulerV3MeetingsMeetingLinksBookSlugRequest {
	return ApiGetSchedulerV3MeetingsMeetingLinksBookSlugRequest{
		ApiService: a,
		ctx: ctx,
		slug: slug,
	}
}

// Execute executes the request
//  @return ExternalBookingInfo
func (a *MeetingsLinksAPIService) GetSchedulerV3MeetingsMeetingLinksBookSlugExecute(r ApiGetSchedulerV3MeetingsMeetingLinksBookSlugRequest) (*ExternalBookingInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalBookingInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeetingsLinksAPIService.GetSchedulerV3MeetingsMeetingLinksBookSlug")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scheduler/v3/meetings/meeting-links/book/{slug}"
	localVarPath = strings.Replace(localVarPath, "{"+"slug"+"}", url.PathEscape(parameterValueToString(r.slug, "slug")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.timezone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timezone", r.timezone, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSchedulerV3MeetingsMeetingLinksBookRequest struct {
	ctx context.Context
	ApiService *MeetingsLinksAPIService
	externalMeetingBooking *ExternalMeetingBooking
}

func (r ApiPostSchedulerV3MeetingsMeetingLinksBookRequest) ExternalMeetingBooking(externalMeetingBooking ExternalMeetingBooking) ApiPostSchedulerV3MeetingsMeetingLinksBookRequest {
	r.externalMeetingBooking = &externalMeetingBooking
	return r
}

func (r ApiPostSchedulerV3MeetingsMeetingLinksBookRequest) Execute() (*ExternalMeetingBookingResponse, *http.Response, error) {
	return r.ApiService.PostSchedulerV3MeetingsMeetingLinksBookExecute(r)
}

/*
PostSchedulerV3MeetingsMeetingLinksBook Method for PostSchedulerV3MeetingsMeetingLinksBook

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSchedulerV3MeetingsMeetingLinksBookRequest
*/
func (a *MeetingsLinksAPIService) PostSchedulerV3MeetingsMeetingLinksBook(ctx context.Context) ApiPostSchedulerV3MeetingsMeetingLinksBookRequest {
	return ApiPostSchedulerV3MeetingsMeetingLinksBookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExternalMeetingBookingResponse
func (a *MeetingsLinksAPIService) PostSchedulerV3MeetingsMeetingLinksBookExecute(r ApiPostSchedulerV3MeetingsMeetingLinksBookRequest) (*ExternalMeetingBookingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalMeetingBookingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeetingsLinksAPIService.PostSchedulerV3MeetingsMeetingLinksBook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scheduler/v3/meetings/meeting-links/book"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalMeetingBooking == nil {
		return localVarReturnValue, nil, reportError("externalMeetingBooking is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.externalMeetingBooking
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
