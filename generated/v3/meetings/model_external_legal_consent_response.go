/*
Scheduler Meetings

Meetings Service For HubSpot Sales

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package meetings

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExternalLegalConsentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalLegalConsentResponse{}

// ExternalLegalConsentResponse struct for ExternalLegalConsentResponse
type ExternalLegalConsentResponse struct {
	CommunicationTypeId string `json:"communicationTypeId"`
	Consented bool `json:"consented"`
}

type _ExternalLegalConsentResponse ExternalLegalConsentResponse

// NewExternalLegalConsentResponse instantiates a new ExternalLegalConsentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalLegalConsentResponse(communicationTypeId string, consented bool) *ExternalLegalConsentResponse {
	this := ExternalLegalConsentResponse{}
	this.CommunicationTypeId = communicationTypeId
	this.Consented = consented
	return &this
}

// NewExternalLegalConsentResponseWithDefaults instantiates a new ExternalLegalConsentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalLegalConsentResponseWithDefaults() *ExternalLegalConsentResponse {
	this := ExternalLegalConsentResponse{}
	return &this
}

// GetCommunicationTypeId returns the CommunicationTypeId field value
func (o *ExternalLegalConsentResponse) GetCommunicationTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommunicationTypeId
}

// GetCommunicationTypeIdOk returns a tuple with the CommunicationTypeId field value
// and a boolean to check if the value has been set.
func (o *ExternalLegalConsentResponse) GetCommunicationTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommunicationTypeId, true
}

// SetCommunicationTypeId sets field value
func (o *ExternalLegalConsentResponse) SetCommunicationTypeId(v string) {
	o.CommunicationTypeId = v
}

// GetConsented returns the Consented field value
func (o *ExternalLegalConsentResponse) GetConsented() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Consented
}

// GetConsentedOk returns a tuple with the Consented field value
// and a boolean to check if the value has been set.
func (o *ExternalLegalConsentResponse) GetConsentedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consented, true
}

// SetConsented sets field value
func (o *ExternalLegalConsentResponse) SetConsented(v bool) {
	o.Consented = v
}

func (o ExternalLegalConsentResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalLegalConsentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["communicationTypeId"] = o.CommunicationTypeId
	toSerialize["consented"] = o.Consented
	return toSerialize, nil
}

func (o *ExternalLegalConsentResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"communicationTypeId",
		"consented",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalLegalConsentResponse := _ExternalLegalConsentResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalLegalConsentResponse)

	if err != nil {
		return err
	}

	*o = ExternalLegalConsentResponse(varExternalLegalConsentResponse)

	return err
}

type NullableExternalLegalConsentResponse struct {
	value *ExternalLegalConsentResponse
	isSet bool
}

func (v NullableExternalLegalConsentResponse) Get() *ExternalLegalConsentResponse {
	return v.value
}

func (v *NullableExternalLegalConsentResponse) Set(val *ExternalLegalConsentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalLegalConsentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalLegalConsentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalLegalConsentResponse(val *ExternalLegalConsentResponse) *NullableExternalLegalConsentResponse {
	return &NullableExternalLegalConsentResponse{value: val, isSet: true}
}

func (v NullableExternalLegalConsentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalLegalConsentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


