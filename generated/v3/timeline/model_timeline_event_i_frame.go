/*
Timeline

This feature allows an app to create and configure custom events that can show up in the timelines of certain CRM objects like contacts, companies, tickets, or deals. You'll find multiple use cases for this API in the sections below.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package timeline

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimelineEventIFrame type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimelineEventIFrame{}

// TimelineEventIFrame struct for TimelineEventIFrame
type TimelineEventIFrame struct {
	// The text displaying the link that will display the iframe.
	LinkLabel string `json:"linkLabel"`
	// The label of the modal window that displays the iframe contents.
	HeaderLabel string `json:"headerLabel"`
	// The width of the modal window in pixels.
	Width int32 `json:"width"`
	// The URI of the iframe contents.
	Url string `json:"url"`
	// The height of the modal window in pixels.
	Height int32 `json:"height"`
}

type _TimelineEventIFrame TimelineEventIFrame

// NewTimelineEventIFrame instantiates a new TimelineEventIFrame object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineEventIFrame(linkLabel string, headerLabel string, width int32, url string, height int32) *TimelineEventIFrame {
	this := TimelineEventIFrame{}
	this.LinkLabel = linkLabel
	this.HeaderLabel = headerLabel
	this.Width = width
	this.Url = url
	this.Height = height
	return &this
}

// NewTimelineEventIFrameWithDefaults instantiates a new TimelineEventIFrame object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineEventIFrameWithDefaults() *TimelineEventIFrame {
	this := TimelineEventIFrame{}
	return &this
}

// GetLinkLabel returns the LinkLabel field value
func (o *TimelineEventIFrame) GetLinkLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkLabel
}

// GetLinkLabelOk returns a tuple with the LinkLabel field value
// and a boolean to check if the value has been set.
func (o *TimelineEventIFrame) GetLinkLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkLabel, true
}

// SetLinkLabel sets field value
func (o *TimelineEventIFrame) SetLinkLabel(v string) {
	o.LinkLabel = v
}

// GetHeaderLabel returns the HeaderLabel field value
func (o *TimelineEventIFrame) GetHeaderLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HeaderLabel
}

// GetHeaderLabelOk returns a tuple with the HeaderLabel field value
// and a boolean to check if the value has been set.
func (o *TimelineEventIFrame) GetHeaderLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeaderLabel, true
}

// SetHeaderLabel sets field value
func (o *TimelineEventIFrame) SetHeaderLabel(v string) {
	o.HeaderLabel = v
}

// GetWidth returns the Width field value
func (o *TimelineEventIFrame) GetWidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *TimelineEventIFrame) GetWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *TimelineEventIFrame) SetWidth(v int32) {
	o.Width = v
}

// GetUrl returns the Url field value
func (o *TimelineEventIFrame) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *TimelineEventIFrame) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *TimelineEventIFrame) SetUrl(v string) {
	o.Url = v
}

// GetHeight returns the Height field value
func (o *TimelineEventIFrame) GetHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *TimelineEventIFrame) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *TimelineEventIFrame) SetHeight(v int32) {
	o.Height = v
}

func (o TimelineEventIFrame) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimelineEventIFrame) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["linkLabel"] = o.LinkLabel
	toSerialize["headerLabel"] = o.HeaderLabel
	toSerialize["width"] = o.Width
	toSerialize["url"] = o.Url
	toSerialize["height"] = o.Height
	return toSerialize, nil
}

func (o *TimelineEventIFrame) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"linkLabel",
		"headerLabel",
		"width",
		"url",
		"height",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimelineEventIFrame := _TimelineEventIFrame{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimelineEventIFrame)

	if err != nil {
		return err
	}

	*o = TimelineEventIFrame(varTimelineEventIFrame)

	return err
}

type NullableTimelineEventIFrame struct {
	value *TimelineEventIFrame
	isSet bool
}

func (v NullableTimelineEventIFrame) Get() *TimelineEventIFrame {
	return v.value
}

func (v *NullableTimelineEventIFrame) Set(val *TimelineEventIFrame) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineEventIFrame) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineEventIFrame) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineEventIFrame(val *TimelineEventIFrame) *NullableTimelineEventIFrame {
	return &NullableTimelineEventIFrame{value: val, isSet: true}
}

func (v NullableTimelineEventIFrame) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineEventIFrame) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


