/*
Timeline

This feature allows an app to create and configure custom events that can show up in the timelines of certain CRM objects like contacts, companies, tickets, or deals. You'll find multiple use cases for this API in the sections below.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package timeline

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BatchInputTimelineEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchInputTimelineEvent{}

// BatchInputTimelineEvent Used to create timeline events in batches.
type BatchInputTimelineEvent struct {
	// A collection of timeline events we want to create.
	Inputs []TimelineEvent `json:"inputs"`
}

type _BatchInputTimelineEvent BatchInputTimelineEvent

// NewBatchInputTimelineEvent instantiates a new BatchInputTimelineEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchInputTimelineEvent(inputs []TimelineEvent) *BatchInputTimelineEvent {
	this := BatchInputTimelineEvent{}
	this.Inputs = inputs
	return &this
}

// NewBatchInputTimelineEventWithDefaults instantiates a new BatchInputTimelineEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchInputTimelineEventWithDefaults() *BatchInputTimelineEvent {
	this := BatchInputTimelineEvent{}
	return &this
}

// GetInputs returns the Inputs field value
func (o *BatchInputTimelineEvent) GetInputs() []TimelineEvent {
	if o == nil {
		var ret []TimelineEvent
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *BatchInputTimelineEvent) GetInputsOk() ([]TimelineEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *BatchInputTimelineEvent) SetInputs(v []TimelineEvent) {
	o.Inputs = v
}

func (o BatchInputTimelineEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchInputTimelineEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["inputs"] = o.Inputs
	return toSerialize, nil
}

func (o *BatchInputTimelineEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"inputs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchInputTimelineEvent := _BatchInputTimelineEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchInputTimelineEvent)

	if err != nil {
		return err
	}

	*o = BatchInputTimelineEvent(varBatchInputTimelineEvent)

	return err
}

type NullableBatchInputTimelineEvent struct {
	value *BatchInputTimelineEvent
	isSet bool
}

func (v NullableBatchInputTimelineEvent) Get() *BatchInputTimelineEvent {
	return v.value
}

func (v *NullableBatchInputTimelineEvent) Set(val *BatchInputTimelineEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchInputTimelineEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchInputTimelineEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchInputTimelineEvent(val *BatchInputTimelineEvent) *NullableBatchInputTimelineEvent {
	return &NullableBatchInputTimelineEvent{value: val, isSet: true}
}

func (v NullableBatchInputTimelineEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchInputTimelineEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


