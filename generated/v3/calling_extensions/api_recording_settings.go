/*
CRM Calling Extensions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calling_extensions

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// RecordingSettingsAPIService RecordingSettingsAPI service
type RecordingSettingsAPIService service

type ApiGetCrmV3ExtensionsCallingAppIdSettingsRecordingGetUrlFormatRequest struct {
	ctx context.Context
	ApiService *RecordingSettingsAPIService
	appId int32
}

func (r ApiGetCrmV3ExtensionsCallingAppIdSettingsRecordingGetUrlFormatRequest) Execute() (*RecordingSettingsResponse, *http.Response, error) {
	return r.ApiService.GetCrmV3ExtensionsCallingAppIdSettingsRecordingGetUrlFormatExecute(r)
}

/*
GetCrmV3ExtensionsCallingAppIdSettingsRecordingGetUrlFormat Retrieve recording settings

Retrieve the URL that is registered for [call recording](https://developers.hubspot.com/docs/guides/apps/extensions/calling-extensions/recordings-and-transcriptions#register-your-app-s-endpoint-with-hubspot-using-the-calling-settings-api).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId The ID of the app.
 @return ApiGetCrmV3ExtensionsCallingAppIdSettingsRecordingGetUrlFormatRequest
*/
func (a *RecordingSettingsAPIService) GetCrmV3ExtensionsCallingAppIdSettingsRecordingGetUrlFormat(ctx context.Context, appId int32) ApiGetCrmV3ExtensionsCallingAppIdSettingsRecordingGetUrlFormatRequest {
	return ApiGetCrmV3ExtensionsCallingAppIdSettingsRecordingGetUrlFormatRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
//  @return RecordingSettingsResponse
func (a *RecordingSettingsAPIService) GetCrmV3ExtensionsCallingAppIdSettingsRecordingGetUrlFormatExecute(r ApiGetCrmV3ExtensionsCallingAppIdSettingsRecordingGetUrlFormatRequest) (*RecordingSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecordingSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecordingSettingsAPIService.GetCrmV3ExtensionsCallingAppIdSettingsRecordingGetUrlFormat")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/calling/{appId}/settings/recording"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormatRequest struct {
	ctx context.Context
	ApiService *RecordingSettingsAPIService
	appId int32
	recordingSettingsPatchRequest *RecordingSettingsPatchRequest
}

func (r ApiPatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormatRequest) RecordingSettingsPatchRequest(recordingSettingsPatchRequest RecordingSettingsPatchRequest) ApiPatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormatRequest {
	r.recordingSettingsPatchRequest = &recordingSettingsPatchRequest
	return r
}

func (r ApiPatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormatRequest) Execute() (*RecordingSettingsResponse, *http.Response, error) {
	return r.ApiService.PatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormatExecute(r)
}

/*
PatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormat Update recording settings

Update the URL that HubSpot will use to retrieve [call recordings](https://developers.hubspot.com/docs/guides/apps/extensions/calling-extensions/recordings-and-transcriptions#register-your-app-s-endpoint-with-hubspot-using-the-calling-settings-api).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId The ID of the app.
 @return ApiPatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormatRequest
*/
func (a *RecordingSettingsAPIService) PatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormat(ctx context.Context, appId int32) ApiPatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormatRequest {
	return ApiPatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormatRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
//  @return RecordingSettingsResponse
func (a *RecordingSettingsAPIService) PatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormatExecute(r ApiPatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormatRequest) (*RecordingSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecordingSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecordingSettingsAPIService.PatchCrmV3ExtensionsCallingAppIdSettingsRecordingUpdateUrlFormat")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/calling/{appId}/settings/recording"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordingSettingsPatchRequest == nil {
		return localVarReturnValue, nil, reportError("recordingSettingsPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recordingSettingsPatchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormatRequest struct {
	ctx context.Context
	ApiService *RecordingSettingsAPIService
	appId int32
	recordingSettingsRequest *RecordingSettingsRequest
}

func (r ApiPostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormatRequest) RecordingSettingsRequest(recordingSettingsRequest RecordingSettingsRequest) ApiPostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormatRequest {
	r.recordingSettingsRequest = &recordingSettingsRequest
	return r
}

func (r ApiPostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormatRequest) Execute() (*RecordingSettingsResponse, *http.Response, error) {
	return r.ApiService.PostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormatExecute(r)
}

/*
PostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormat Enable the app for call recording

Register an external URL that HubSpot will use to retrieve [call recordings](https://developers.hubspot.com/docs/guides/apps/extensions/calling-extensions/recordings-and-transcriptions#register-your-app-s-endpoint-with-hubspot-using-the-calling-settings-api).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId The ID of the app.
 @return ApiPostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormatRequest
*/
func (a *RecordingSettingsAPIService) PostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormat(ctx context.Context, appId int32) ApiPostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormatRequest {
	return ApiPostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormatRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
//  @return RecordingSettingsResponse
func (a *RecordingSettingsAPIService) PostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormatExecute(r ApiPostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormatRequest) (*RecordingSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecordingSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecordingSettingsAPIService.PostCrmV3ExtensionsCallingAppIdSettingsRecordingRegisterUrlFormat")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/calling/{appId}/settings/recording"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordingSettingsRequest == nil {
		return localVarReturnValue, nil, reportError("recordingSettingsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recordingSettingsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCrmV3ExtensionsCallingRecordingsReadyMarkAsReadyRequest struct {
	ctx context.Context
	ApiService *RecordingSettingsAPIService
	markRecordingAsReadyRequest *MarkRecordingAsReadyRequest
}

func (r ApiPostCrmV3ExtensionsCallingRecordingsReadyMarkAsReadyRequest) MarkRecordingAsReadyRequest(markRecordingAsReadyRequest MarkRecordingAsReadyRequest) ApiPostCrmV3ExtensionsCallingRecordingsReadyMarkAsReadyRequest {
	r.markRecordingAsReadyRequest = &markRecordingAsReadyRequest
	return r
}

func (r ApiPostCrmV3ExtensionsCallingRecordingsReadyMarkAsReadyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostCrmV3ExtensionsCallingRecordingsReadyMarkAsReadyExecute(r)
}

/*
PostCrmV3ExtensionsCallingRecordingsReadyMarkAsReady Mark recording as ready for transcription

Mark a call recording as ready for transcription, specifying the call by its ID (`engagementid`).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCrmV3ExtensionsCallingRecordingsReadyMarkAsReadyRequest
*/
func (a *RecordingSettingsAPIService) PostCrmV3ExtensionsCallingRecordingsReadyMarkAsReady(ctx context.Context) ApiPostCrmV3ExtensionsCallingRecordingsReadyMarkAsReadyRequest {
	return ApiPostCrmV3ExtensionsCallingRecordingsReadyMarkAsReadyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RecordingSettingsAPIService) PostCrmV3ExtensionsCallingRecordingsReadyMarkAsReadyExecute(r ApiPostCrmV3ExtensionsCallingRecordingsReadyMarkAsReadyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecordingSettingsAPIService.PostCrmV3ExtensionsCallingRecordingsReadyMarkAsReady")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/calling/recordings/ready"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.markRecordingAsReadyRequest == nil {
		return nil, reportError("markRecordingAsReadyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.markRecordingAsReadyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
