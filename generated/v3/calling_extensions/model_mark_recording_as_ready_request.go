/*
CRM Calling Extensions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calling_extensions

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MarkRecordingAsReadyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarkRecordingAsReadyRequest{}

// MarkRecordingAsReadyRequest struct for MarkRecordingAsReadyRequest
type MarkRecordingAsReadyRequest struct {
	EngagementId int64 `json:"engagementId"`
}

type _MarkRecordingAsReadyRequest MarkRecordingAsReadyRequest

// NewMarkRecordingAsReadyRequest instantiates a new MarkRecordingAsReadyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarkRecordingAsReadyRequest(engagementId int64) *MarkRecordingAsReadyRequest {
	this := MarkRecordingAsReadyRequest{}
	this.EngagementId = engagementId
	return &this
}

// NewMarkRecordingAsReadyRequestWithDefaults instantiates a new MarkRecordingAsReadyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkRecordingAsReadyRequestWithDefaults() *MarkRecordingAsReadyRequest {
	this := MarkRecordingAsReadyRequest{}
	return &this
}

// GetEngagementId returns the EngagementId field value
func (o *MarkRecordingAsReadyRequest) GetEngagementId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EngagementId
}

// GetEngagementIdOk returns a tuple with the EngagementId field value
// and a boolean to check if the value has been set.
func (o *MarkRecordingAsReadyRequest) GetEngagementIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngagementId, true
}

// SetEngagementId sets field value
func (o *MarkRecordingAsReadyRequest) SetEngagementId(v int64) {
	o.EngagementId = v
}

func (o MarkRecordingAsReadyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarkRecordingAsReadyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["engagementId"] = o.EngagementId
	return toSerialize, nil
}

func (o *MarkRecordingAsReadyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"engagementId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMarkRecordingAsReadyRequest := _MarkRecordingAsReadyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMarkRecordingAsReadyRequest)

	if err != nil {
		return err
	}

	*o = MarkRecordingAsReadyRequest(varMarkRecordingAsReadyRequest)

	return err
}

type NullableMarkRecordingAsReadyRequest struct {
	value *MarkRecordingAsReadyRequest
	isSet bool
}

func (v NullableMarkRecordingAsReadyRequest) Get() *MarkRecordingAsReadyRequest {
	return v.value
}

func (v *NullableMarkRecordingAsReadyRequest) Set(val *MarkRecordingAsReadyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMarkRecordingAsReadyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMarkRecordingAsReadyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarkRecordingAsReadyRequest(val *MarkRecordingAsReadyRequest) *NullableMarkRecordingAsReadyRequest {
	return &NullableMarkRecordingAsReadyRequest{value: val, isSet: true}
}

func (v NullableMarkRecordingAsReadyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarkRecordingAsReadyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


