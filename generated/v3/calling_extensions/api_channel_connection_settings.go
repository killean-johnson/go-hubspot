/*
CRM Calling Extensions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calling_extensions

import (
	"bytes"
	"context"
	"io"
	"net/http"
	
	"github.com/killean-johnson/go-hubspot"
"net/url"
	"strings"
)


// ChannelConnectionSettingsAPIService ChannelConnectionSettingsAPI service
type ChannelConnectionSettingsAPIService service

type ApiDeleteCrmV3ExtensionsCallingAppIdSettingsChannelConnectionArchiveRequest struct {
	ctx context.Context
	ApiService *ChannelConnectionSettingsAPIService
	appId int32
}

func (r ApiDeleteCrmV3ExtensionsCallingAppIdSettingsChannelConnectionArchiveRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCrmV3ExtensionsCallingAppIdSettingsChannelConnectionArchiveExecute(r)
}

/*
DeleteCrmV3ExtensionsCallingAppIdSettingsChannelConnectionArchive Delete channel connection settings

Delete the [channel connection settings](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#delete-existing-channel-connection-settings) for the app.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId The ID of the app.
 @return ApiDeleteCrmV3ExtensionsCallingAppIdSettingsChannelConnectionArchiveRequest
*/
func (a *ChannelConnectionSettingsAPIService) DeleteCrmV3ExtensionsCallingAppIdSettingsChannelConnectionArchive(ctx context.Context, appId int32) ApiDeleteCrmV3ExtensionsCallingAppIdSettingsChannelConnectionArchiveRequest {
	return ApiDeleteCrmV3ExtensionsCallingAppIdSettingsChannelConnectionArchiveRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
func (a *ChannelConnectionSettingsAPIService) DeleteCrmV3ExtensionsCallingAppIdSettingsChannelConnectionArchiveExecute(r ApiDeleteCrmV3ExtensionsCallingAppIdSettingsChannelConnectionArchiveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelConnectionSettingsAPIService.DeleteCrmV3ExtensionsCallingAppIdSettingsChannelConnectionArchive")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/calling/{appId}/settings/channel-connection"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCrmV3ExtensionsCallingAppIdSettingsChannelConnectionGetByIdRequest struct {
	ctx context.Context
	ApiService *ChannelConnectionSettingsAPIService
	appId int32
}

func (r ApiGetCrmV3ExtensionsCallingAppIdSettingsChannelConnectionGetByIdRequest) Execute() (*ChannelConnectionSettingsResponse, *http.Response, error) {
	return r.ApiService.GetCrmV3ExtensionsCallingAppIdSettingsChannelConnectionGetByIdExecute(r)
}

/*
GetCrmV3ExtensionsCallingAppIdSettingsChannelConnectionGetById Retrieve channel connection settings

Retrieve the settings related to the app's [channel connection](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#fetch-existing-channel-connection-settings).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId The ID of the app.
 @return ApiGetCrmV3ExtensionsCallingAppIdSettingsChannelConnectionGetByIdRequest
*/
func (a *ChannelConnectionSettingsAPIService) GetCrmV3ExtensionsCallingAppIdSettingsChannelConnectionGetById(ctx context.Context, appId int32) ApiGetCrmV3ExtensionsCallingAppIdSettingsChannelConnectionGetByIdRequest {
	return ApiGetCrmV3ExtensionsCallingAppIdSettingsChannelConnectionGetByIdRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
//  @return ChannelConnectionSettingsResponse
func (a *ChannelConnectionSettingsAPIService) GetCrmV3ExtensionsCallingAppIdSettingsChannelConnectionGetByIdExecute(r ApiGetCrmV3ExtensionsCallingAppIdSettingsChannelConnectionGetByIdRequest) (*ChannelConnectionSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChannelConnectionSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelConnectionSettingsAPIService.GetCrmV3ExtensionsCallingAppIdSettingsChannelConnectionGetById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/calling/{appId}/settings/channel-connection"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdateRequest struct {
	ctx context.Context
	ApiService *ChannelConnectionSettingsAPIService
	appId int32
	channelConnectionSettingsPatchRequest *ChannelConnectionSettingsPatchRequest
}

func (r ApiPatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdateRequest) ChannelConnectionSettingsPatchRequest(channelConnectionSettingsPatchRequest ChannelConnectionSettingsPatchRequest) ApiPatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdateRequest {
	r.channelConnectionSettingsPatchRequest = &channelConnectionSettingsPatchRequest
	return r
}

func (r ApiPatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdateRequest) Execute() (*ChannelConnectionSettingsResponse, *http.Response, error) {
	return r.ApiService.PatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdateExecute(r)
}

/*
PatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdate Update channel connection settings

Update existing [channel connection settings](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#manage-the-webhook-settings-for-channel-connection) for your app.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId The ID of the app.
 @return ApiPatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdateRequest
*/
func (a *ChannelConnectionSettingsAPIService) PatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdate(ctx context.Context, appId int32) ApiPatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdateRequest {
	return ApiPatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdateRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
//  @return ChannelConnectionSettingsResponse
func (a *ChannelConnectionSettingsAPIService) PatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdateExecute(r ApiPatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdateRequest) (*ChannelConnectionSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChannelConnectionSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelConnectionSettingsAPIService.PatchCrmV3ExtensionsCallingAppIdSettingsChannelConnectionUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/calling/{appId}/settings/channel-connection"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.channelConnectionSettingsPatchRequest == nil {
		return localVarReturnValue, nil, reportError("channelConnectionSettingsPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.channelConnectionSettingsPatchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreateRequest struct {
	ctx context.Context
	ApiService *ChannelConnectionSettingsAPIService
	appId int32
	channelConnectionSettingsRequest *ChannelConnectionSettingsRequest
}

func (r ApiPostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreateRequest) ChannelConnectionSettingsRequest(channelConnectionSettingsRequest ChannelConnectionSettingsRequest) ApiPostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreateRequest {
	r.channelConnectionSettingsRequest = &channelConnectionSettingsRequest
	return r
}

func (r ApiPostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreateRequest) Execute() (*ChannelConnectionSettingsResponse, *http.Response, error) {
	return r.ApiService.PostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreateExecute(r)
}

/*
PostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreate Configure channel connection settings

Configure [channel connection settings](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#create-channel-connection-settings) for the app. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId The ID of the app.
 @return ApiPostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreateRequest
*/
func (a *ChannelConnectionSettingsAPIService) PostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreate(ctx context.Context, appId int32) ApiPostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreateRequest {
	return ApiPostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreateRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
//  @return ChannelConnectionSettingsResponse
func (a *ChannelConnectionSettingsAPIService) PostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreateExecute(r ApiPostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreateRequest) (*ChannelConnectionSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChannelConnectionSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelConnectionSettingsAPIService.PostCrmV3ExtensionsCallingAppIdSettingsChannelConnectionCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/calling/{appId}/settings/channel-connection"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.channelConnectionSettingsRequest == nil {
		return localVarReturnValue, nil, reportError("channelConnectionSettingsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.channelConnectionSettingsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
